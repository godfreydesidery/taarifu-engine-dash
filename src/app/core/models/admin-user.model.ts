/**
 * Admin User entity interface
 */
export interface AdminUser {
  /** Unique identifier */
  uid: string;
  /** Username for authentication */
  username: string;
  /** Email address */
  email: string;
  /** User type - always ADMIN for admin users */
  userType: 'ADMIN';
  /** Current status of the user */
  status: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED';
  /** Password strength indicator */
  passwordStrength: 'WEAK' | 'MEDIUM' | 'STRONG';
  /** Whether user must change password on next login */
  requirePasswordChange: boolean;
  /** Last login timestamp */
  lastLoginAt: string | null;
  /** Creation timestamp */
  createdAt: string;
  /** Last update timestamp */
  updatedAt: string;
}

/**
 * Request DTO for creating a new admin user
 * Password is automatically generated by the backend
 */
export interface CreateAdminUserRequest {
  /** Username (3-50 characters, alphanumeric and underscores only) */
  username: string;
  /** Valid email address */
  email: string;
  /** Initial status (defaults to ACTIVE if not provided) */
  status?: 'ACTIVE' | 'INACTIVE';
}

/**
 * Request DTO for updating an existing admin user
 * All fields are optional for partial updates
 */
export interface UpdateAdminUserRequest {
  /** New username (3-50 characters, alphanumeric and underscores only) */
  username?: string;
  /** New email address */
  email?: string;
  /** New password (minimum 12 characters, strong complexity required) */
  password?: string;
  /** New status */
  status?: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED';
}

/**
 * Request DTO for resetting an admin user's password
 * Generates a new secure password and sends it via email
 */
export interface ResetAdminUserPasswordRequest {
  /** New password (required by API) */
  newPassword: string;
  /** Whether to require password change on next login */
  requirePasswordChange?: boolean;
  /** Whether to send email notification */
  sendEmailNotification?: boolean;
  /** Optional reason for password reset */
  reason?: string;
}

/**
 * Request DTO for changing an admin user's password
 * Requires current password verification
 */
export interface ChangeAdminUserPasswordRequest {
  /** Current password for verification */
  currentPassword: string;
  /** New password (minimum 12 characters, strong complexity required) */
  newPassword: string;
  /** Confirmation of new password */
  confirmPassword: string;
}

/**
 * Response DTO for admin user data (matches AdminUser interface)
 */
export interface AdminUserResponse {
  /** Unique identifier */
  uid: string;
  /** Username for authentication */
  username: string;
  /** Email address */
  email: string;
  /** User type - always ADMIN for admin users */
  userType: 'ADMIN';
  /** Current status of the user */
  status: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED';
  /** Password strength indicator */
  passwordStrength: 'WEAK' | 'MEDIUM' | 'STRONG';
  /** Whether user must change password on next login */
  requirePasswordChange: boolean;
  /** Last login timestamp */
  lastLoginAt: string | null;
  /** Creation timestamp */
  createdAt: string;
  /** Last update timestamp */
  updatedAt: string;
}

/**
 * Statistics about admin users
 */
export interface AdminUserStats {
  /** Total number of admin users */
  totalAdminUsers: number;
  /** Number of active admin users */
  activeAdminUsers: number;
  /** Number of inactive admin users */
  inactiveAdminUsers: number;
  /** Number of suspended admin users */
  suspendedAdminUsers: number;
}

/**
 * Response for username availability check
 */
export interface UsernameAvailabilityResponse {
  /** Whether the username is available */
  available: boolean;
  /** Descriptive message about availability */
  message: string;
}

/**
 * Response for email availability check
 */
export interface EmailAvailabilityResponse {
  /** Whether the email is available */
  available: boolean;
  /** Descriptive message about availability */
  message: string;
}

// Import existing types from auth.model.ts
import { ApiResponse, PageResponse } from './auth.model';

/**
 * API response for creating an admin user
 */
export type CreateAdminUserResponse = ApiResponse<AdminUserResponse>;

/**
 * API response for updating an admin user
 */
export type UpdateAdminUserResponse = ApiResponse<AdminUserResponse>;

/**
 * API response for getting a single admin user
 */
export type GetAdminUserResponse = ApiResponse<AdminUserResponse>;

/**
 * API response for getting a paginated list of admin users
 */
export type AdminUserListResponse = PageResponse<AdminUserResponse>;

/**
 * API response for getting admin user statistics
 */
export type AdminUserStatsResponse = ApiResponse<AdminUserStats>;

/**
 * API response for getting admin user count
 */
export type AdminUserCountResponse = ApiResponse<number>;

/**
 * API response for username availability check
 */
export type UsernameAvailabilityApiResponse = ApiResponse<UsernameAvailabilityResponse>;

/**
 * API response for email availability check
 */
export type EmailAvailabilityApiResponse = ApiResponse<EmailAvailabilityResponse>;

/**
 * API response for resetting admin user password
 */
export type ResetAdminUserPasswordResponse = ApiResponse<AdminUserResponse>;

/**
 * API response for changing admin user password
 */
export type ChangeAdminUserPasswordResponse = ApiResponse<AdminUserResponse>;
