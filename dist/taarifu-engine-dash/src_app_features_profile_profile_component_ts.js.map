{"version":3,"file":"src_app_features_profile_profile_component_ts.js","mappings":"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","sources":["./src/app/core/services/toast.service.ts","./src/app/features/profile/profile.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface Toast {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  message: string;\r\n  duration?: number;\r\n  dismissible?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n  private toastsSubject = new BehaviorSubject<Toast[]>([]);\r\n  public toasts$ = this.toastsSubject.asObservable();\r\n\r\n  private showToast(type: Toast['type'], title: string, message: string, duration: number = 3000, dismissible: boolean = true): void {\r\n    const toast: Toast = {\r\n      id: this.generateId(),\r\n      type,\r\n      title,\r\n      message,\r\n      duration,\r\n      dismissible\r\n    };\r\n\r\n    const currentToasts = this.toastsSubject.value;\r\n    this.toastsSubject.next([...currentToasts, toast]);\r\n\r\n    // Auto remove toast after duration\r\n    if (duration > 0) {\r\n      setTimeout(() => {\r\n        this.removeToast(toast.id);\r\n      }, duration);\r\n    }\r\n  }\r\n\r\n  success(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('success', title, message, duration, dismissible);\r\n  }\r\n\r\n  error(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('error', title, message, duration, dismissible);\r\n  }\r\n\r\n  warning(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('warning', title, message, duration, dismissible);\r\n  }\r\n\r\n  info(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('info', title, message, duration, dismissible);\r\n  }\r\n\r\n  removeToast(id: string): void {\r\n    const currentToasts = this.toastsSubject.value;\r\n    this.toastsSubject.next(currentToasts.filter(toast => toast.id !== id));\r\n  }\r\n\r\n  clearAll(): void {\r\n    this.toastsSubject.next([]);\r\n  }\r\n\r\n  private generateId(): string {\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AuthService } from '../../core/services/auth.service';\r\nimport { AdminUserService } from '../../core/services/admin-user.service';\r\nimport { ToastService } from '../../core/services/toast.service';\r\nimport { Router } from '@angular/router';\r\nimport { User } from '../../core/models/auth.model';\r\nimport { ChangeAdminUserPasswordRequest } from '../../core/models/admin-user.model';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  template: `\r\n    <div class=\"container-fluid\">\r\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <div>\r\n          <h1 class=\"h3 mb-1\">User Profile</h1>\r\n          <p class=\"text-muted\">Manage your account settings and preferences</p>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <!-- Profile Information -->\r\n        <div class=\"col-lg-8\">\r\n          <div class=\"card mb-4\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-person-circle me-2\"></i>\r\n                Profile Information\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <div *ngIf=\"currentUser\" class=\"row\">\r\n                <div class=\"col-md-3 text-center\">\r\n                  <div class=\"profile-avatar mb-3\">\r\n                    <div class=\"avatar-lg bg-primary text-white rounded-circle d-flex align-items-center justify-content-center mx-auto\">\r\n                      {{ currentUser.username.charAt(0).toUpperCase() }}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n                <div class=\"col-md-9\">\r\n                  <div class=\"row\">\r\n                    <div class=\"col-md-6 mb-3\">\r\n                      <label class=\"form-label fw-bold\">Username</label>\r\n                      <div class=\"form-control-plaintext\">{{ currentUser.username }}</div>\r\n                    </div>\r\n                    <div class=\"col-md-6 mb-3\">\r\n                      <label class=\"form-label fw-bold\">Email</label>\r\n                      <div class=\"form-control-plaintext\">{{ currentUser.email }}</div>\r\n                    </div>\r\n                    <div class=\"col-md-6 mb-3\">\r\n                      <label class=\"form-label fw-bold\">User Type</label>\r\n                      <div class=\"form-control-plaintext\">\r\n                        <span class=\"badge bg-info\">{{ currentUser.userType }}</span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-md-6 mb-3\">\r\n                      <label class=\"form-label fw-bold\">Status</label>\r\n                      <div class=\"form-control-plaintext\">\r\n                        <span class=\"badge\" \r\n                              [class.bg-success]=\"currentUser.status === 'ACTIVE'\" \r\n                              [class.bg-warning]=\"currentUser.status === 'INACTIVE'\" \r\n                              [class.bg-danger]=\"currentUser.status === 'SUSPENDED'\">\r\n                          {{ currentUser.status }}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-md-6 mb-3\">\r\n                      <label class=\"form-label fw-bold\">Password Strength</label>\r\n                      <div class=\"form-control-plaintext\">\r\n                        <span class=\"badge\" \r\n                              [class.bg-success]=\"currentUser.passwordStrength === 'STRONG'\" \r\n                              [class.bg-warning]=\"currentUser.passwordStrength === 'MEDIUM'\" \r\n                              [class.bg-danger]=\"currentUser.passwordStrength === 'WEAK'\">\r\n                          {{ currentUser.passwordStrength }}\r\n                        </span>\r\n                        <span *ngIf=\"currentUser.requirePasswordChange\" class=\"badge bg-warning ms-2\" title=\"Password change required\">\r\n                          <i class=\"bi bi-exclamation-triangle\"></i>\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-md-6 mb-3\">\r\n                      <label class=\"form-label fw-bold\">Last Login</label>\r\n                      <div class=\"form-control-plaintext\">\r\n                        {{ currentUser.lastLoginAt ? (currentUser.lastLoginAt | date:'short') : 'Never' }}\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"col-md-6 mb-3\">\r\n                      <label class=\"form-label fw-bold\">Member Since</label>\r\n                      <div class=\"form-control-plaintext\">{{ currentUser.createdAt | date:'short' }}</div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Change Password -->\r\n        <div class=\"col-lg-4\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-key me-2\"></i>\r\n                Change Password\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <form [formGroup]=\"changePasswordForm\" (ngSubmit)=\"onChangePasswordSubmit()\">\r\n                <div class=\"mb-3\">\r\n                  <label for=\"currentPassword\" class=\"form-label\">Current Password</label>\r\n                  <input \r\n                    type=\"password\" \r\n                    class=\"form-control\" \r\n                    id=\"currentPassword\"\r\n                    formControlName=\"currentPassword\"\r\n                    [class.is-invalid]=\"changePasswordForm.get('currentPassword')?.invalid && changePasswordForm.get('currentPassword')?.touched\"\r\n                    placeholder=\"Enter current password\">\r\n                  <div *ngIf=\"changePasswordForm.get('currentPassword')?.invalid && changePasswordForm.get('currentPassword')?.touched\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"changePasswordForm.get('currentPassword')?.errors?.['required']\">Current password is required</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                  <label for=\"newPassword\" class=\"form-label\">New Password</label>\r\n                  <input \r\n                    type=\"password\" \r\n                    class=\"form-control\" \r\n                    id=\"newPassword\"\r\n                    formControlName=\"newPassword\"\r\n                    [class.is-invalid]=\"changePasswordForm.get('newPassword')?.invalid && changePasswordForm.get('newPassword')?.touched\"\r\n                    placeholder=\"Enter new password\">\r\n                  <div *ngIf=\"changePasswordForm.get('newPassword')?.invalid && changePasswordForm.get('newPassword')?.touched\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"changePasswordForm.get('newPassword')?.errors?.['required']\">New password is required</div>\r\n                    <div *ngIf=\"changePasswordForm.get('newPassword')?.errors?.['minlength']\">Password must be at least 12 characters</div>\r\n                    <div *ngIf=\"changePasswordForm.get('newPassword')?.errors?.['pattern']\">Password must contain uppercase, lowercase, numbers, and special characters</div>\r\n                  </div>\r\n                  <div class=\"form-text\">Minimum 12 characters with uppercase, lowercase, numbers, and special characters</div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                  <label for=\"confirmNewPassword\" class=\"form-label\">Confirm New Password</label>\r\n                  <input \r\n                    type=\"password\" \r\n                    class=\"form-control\" \r\n                    id=\"confirmNewPassword\"\r\n                    formControlName=\"confirmNewPassword\"\r\n                    [class.is-invalid]=\"changePasswordForm.get('confirmNewPassword')?.invalid && changePasswordForm.get('confirmNewPassword')?.touched\"\r\n                    placeholder=\"Confirm new password\">\r\n                  <div *ngIf=\"changePasswordForm.get('confirmNewPassword')?.invalid && changePasswordForm.get('confirmNewPassword')?.touched\" class=\"invalid-feedback\">\r\n                    <div *ngIf=\"changePasswordForm.get('confirmNewPassword')?.errors?.['required']\">Please confirm your new password</div>\r\n                    <div *ngIf=\"changePasswordForm.get('confirmNewPassword')?.errors?.['mismatch']\">Passwords do not match</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <button \r\n                  type=\"submit\" \r\n                  class=\"btn btn-primary w-100\" \r\n                  [disabled]=\"changePasswordForm.invalid || isChangingPassword\">\r\n                  <span *ngIf=\"isChangingPassword\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\r\n                  <i *ngIf=\"!isChangingPassword\" class=\"bi bi-key me-1\"></i>\r\n                  {{ isChangingPassword ? 'Changing...' : 'Change Password' }}\r\n                </button>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .container-fluid {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 0 1rem;\r\n    }\r\n\r\n    .profile-avatar .avatar-lg {\r\n      width: 100px;\r\n      height: 100px;\r\n      font-size: 2.5rem;\r\n      font-weight: 600;\r\n    }\r\n\r\n    .form-control-plaintext {\r\n      padding: 0.375rem 0;\r\n      margin-bottom: 0;\r\n      line-height: 1.5;\r\n      color: #495057;\r\n      background-color: transparent;\r\n      border: solid transparent;\r\n      border-width: 1px 0;\r\n    }\r\n\r\n    .badge {\r\n      font-size: 0.875em;\r\n    }\r\n\r\n    /* Mobile Responsive Styles */\r\n    @media (max-width: 768px) {\r\n      .container-fluid {\r\n        padding: 0 0.5rem;\r\n      }\r\n\r\n      .profile-avatar {\r\n        margin-bottom: 1rem !important;\r\n      }\r\n\r\n      .profile-avatar .avatar-lg {\r\n        width: 80px;\r\n        height: 80px;\r\n        font-size: 2rem;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  changePasswordForm: FormGroup;\r\n  currentUser: User | null = null;\r\n  isChangingPassword = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private adminUserService: AdminUserService,\r\n    private toastService: ToastService,\r\n    private router: Router\r\n  ) {\r\n    this.changePasswordForm = this.createChangePasswordForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    console.log('ProfileComponent initialized - Profile page loaded successfully!');\r\n    \r\n    // Get current user information\r\n    this.currentUser = this.authService.getCurrentUser();\r\n    console.log('Current user:', this.currentUser);\r\n    \r\n    if (!this.currentUser) {\r\n      console.error('No current user found');\r\n      this.toastService.error('Error', 'User information not available');\r\n      return;\r\n    }\r\n    \r\n    console.log('Profile component loaded with user:', this.currentUser.username);\r\n  }\r\n\r\n  private createChangePasswordForm(): FormGroup {\r\n    return this.fb.group({\r\n      currentPassword: ['', [Validators.required]],\r\n      newPassword: ['', [\r\n        Validators.required,\r\n        Validators.minLength(12),\r\n        this.strongPasswordValidator\r\n      ]],\r\n      confirmNewPassword: ['', [\r\n        Validators.required,\r\n        this.passwordMatchValidator\r\n      ]]\r\n    });\r\n  }\r\n\r\n  private strongPasswordValidator(control: any) {\r\n    if (!control.value) return null;\r\n    \r\n    const password = control.value;\r\n    const hasUpperCase = /[A-Z]/.test(password);\r\n    const hasLowerCase = /[a-z]/.test(password);\r\n    const hasNumbers = /\\d/.test(password);\r\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n    \r\n    if (hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar) {\r\n      return null;\r\n    } else {\r\n      return { pattern: true };\r\n    }\r\n  }\r\n\r\n  private passwordMatchValidator(control: any) {\r\n    if (!control.value) return null;\r\n    \r\n    const newPassword = control.parent?.get('newPassword')?.value;\r\n    const confirmPassword = control.value;\r\n    \r\n    if (newPassword === confirmPassword) {\r\n      return null;\r\n    } else {\r\n      return { mismatch: true };\r\n    }\r\n  }\r\n\r\n  onChangePasswordSubmit() {\r\n    if (this.changePasswordForm.invalid || !this.currentUser) {\r\n      this.markFormGroupTouched();\r\n      return;\r\n    }\r\n\r\n    this.isChangingPassword = true;\r\n\r\n    const formValue = this.changePasswordForm.value;\r\n    const changePasswordRequest: ChangeAdminUserPasswordRequest = {\r\n      currentPassword: formValue.currentPassword,\r\n      newPassword: formValue.newPassword,\r\n      confirmPassword: formValue.confirmNewPassword\r\n    };\r\n\r\n    this.adminUserService.changeAdminUserPassword(this.currentUser.uid, changePasswordRequest).subscribe({\r\n      next: (response) => {\r\n        this.isChangingPassword = false;\r\n        if (response.status) {\r\n          this.toastService.success('Password Changed Successfully', 'Your password has been changed successfully. Please log in again with your new password.');\r\n          this.changePasswordForm.reset();\r\n          \r\n          // Logout user and redirect to login page for security\r\n          setTimeout(() => {\r\n            this.authService.logout();\r\n            this.router.navigate(['/login']);\r\n          }, 2000);\r\n        }\r\n      },\r\n        error: (error) => {\r\n          this.isChangingPassword = false;\r\n          console.error('Error changing password:', error);\r\n          console.error('Error structure:', JSON.stringify(error, null, 2));\r\n          \r\n          // Display specific error message from API\r\n          // Try different possible paths for the error message\r\n          let errorMessage = 'Failed to change password. Please try again.';\r\n          \r\n          if (error.error?.message) {\r\n            errorMessage = error.error.message;\r\n          } else if (error.error?.data) {\r\n            errorMessage = error.error.data;\r\n          } else if (error.message) {\r\n            errorMessage = error.message;\r\n          }\r\n          \r\n          console.log('Displaying error toast with message:', errorMessage);\r\n          this.toastService.error('Password Change Failed', errorMessage);\r\n        }\r\n    });\r\n  }\r\n\r\n  private markFormGroupTouched() {\r\n    Object.keys(this.changePasswordForm.controls).forEach(key => {\r\n      const control = this.changePasswordForm.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n}\r\n"],"names":["BehaviorSubject","ToastService","constructor","toastsSubject","toasts$","asObservable","showToast","type","title","message","duration","dismissible","toast","id","generateId","currentToasts","value","next","setTimeout","removeToast","success","error","warning","info","filter","clearAll","Math","random","toString","substr","factory","ɵfac","providedIn","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","Validators","i0","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵtemplate","ProfileComponent_div_15_span_35_Template","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","currentUser","username","charAt","toUpperCase","ɵɵtextInterpolate","email","userType","ɵɵclassProp","status","passwordStrength","ɵɵproperty","requirePasswordChange","lastLoginAt","ɵɵpipeBind2","createdAt","ProfileComponent_div_28_div_1_Template","tmp_1_0","changePasswordForm","get","errors","ProfileComponent_div_33_div_1_Template","ProfileComponent_div_33_div_2_Template","ProfileComponent_div_33_div_3_Template","tmp_2_0","tmp_3_0","ProfileComponent_div_40_div_1_Template","ProfileComponent_div_40_div_2_Template","ProfileComponent","fb","authService","adminUserService","toastService","router","isChangingPassword","createChangePasswordForm","ngOnInit","console","log","getCurrentUser","group","currentPassword","required","newPassword","minLength","strongPasswordValidator","confirmNewPassword","passwordMatchValidator","control","password","hasUpperCase","test","hasLowerCase","hasNumbers","hasSpecialChar","pattern","parent","confirmPassword","mismatch","onChangePasswordSubmit","invalid","markFormGroupTouched","formValue","changePasswordRequest","changeAdminUserPassword","uid","subscribe","response","reset","logout","navigate","JSON","stringify","errorMessage","data","Object","keys","controls","forEach","key","markAsTouched","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","AdminUserService","i4","i5","Router","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","ProfileComponent_Template","rf","ctx","ProfileComponent_div_15_Template","ɵɵlistener","ProfileComponent_Template_form_ngSubmit_23_listener","ProfileComponent_div_28_Template","ProfileComponent_div_33_Template","ProfileComponent_div_40_Template","ProfileComponent_span_42_Template","ProfileComponent_i_43_Template","touched","tmp_4_0","tmp_5_0","tmp_6_0","tmp_7_0","i6","NgIf","DatePipe","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}