{"version":3,"file":"src_app_features_villages_village-form_village-form_component_ts.js","mappings":"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","sources":["./src/app/features/villages/village-form/village-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { VillageService } from '../../../core/services/village.service';\r\nimport { WardService } from '../../../core/services/ward.service';\r\nimport { DistrictService } from '../../../core/services/district.service';\r\nimport { RegionService } from '../../../core/services/region.service';\r\nimport { Village, CreateVillageRequest, UpdateVillageRequest } from '../../../core/models/village.model';\r\nimport { Ward } from '../../../core/models/ward.model';\r\nimport { District } from '../../../core/models/district.model';\r\nimport { Region } from '../../../core/models/region.model';\r\n\r\n@Component({\r\n  selector: 'app-village-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  template: `\r\n    <div class=\"village-form-container\">\r\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <div>\r\n          <h1 class=\"h3 mb-1\">{{ isEditMode ? 'Edit Village' : 'Create New Village' }}</h1>\r\n          <p class=\"text-muted\">{{ isEditMode ? 'Update village information' : 'Add a new village to the system' }}</p>\r\n        </div>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"goBack()\">\r\n          <i class=\"bi bi-arrow-left me-1\"></i>\r\n          Back to Villages\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-8\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-house-door me-2\"></i>\r\n                Village Information\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <form [formGroup]=\"villageForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"row g-3\">\r\n                  <!-- Basic Information -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"name\" class=\"form-label\">Village Name <span class=\"text-danger\">*</span></label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"name\"\r\n                      formControlName=\"name\"\r\n                      placeholder=\"Enter village name\"\r\n                      [class.is-invalid]=\"villageForm.get('name')?.invalid && villageForm.get('name')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('name')?.hasError('required')\">\r\n                      Village name is required\r\n                    </div>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('name')?.hasError('maxlength')\">\r\n                      Village name must not exceed 100 characters\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"headquarters\" class=\"form-label\">Headquarters <span class=\"text-danger\">*</span></label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"headquarters\"\r\n                      formControlName=\"headquarters\"\r\n                      placeholder=\"Enter headquarters\"\r\n                      [class.is-invalid]=\"villageForm.get('headquarters')?.invalid && villageForm.get('headquarters')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('headquarters')?.hasError('required')\">\r\n                      Headquarters is required\r\n                    </div>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('headquarters')?.hasError('maxlength')\">\r\n                      Headquarters must not exceed 100 characters\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Location Information -->\r\n                  <div class=\"col-md-4\">\r\n                    <label for=\"regionId\" class=\"form-label\">Region <span class=\"text-danger\">*</span></label>\r\n                    <select \r\n                      class=\"form-select\" \r\n                      id=\"regionId\"\r\n                      formControlName=\"regionId\"\r\n                      (change)=\"onRegionChange()\"\r\n                      [class.is-invalid]=\"villageForm.get('regionId')?.invalid && villageForm.get('regionId')?.touched\">\r\n                      <option value=\"\">Select a region</option>\r\n                      <option *ngFor=\"let region of regions\" [value]=\"region.id\">{{ region.name }}</option>\r\n                    </select>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('regionId')?.hasError('required')\">\r\n                      Region is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-4\">\r\n                    <label for=\"districtId\" class=\"form-label\">District <span class=\"text-danger\">*</span></label>\r\n                    <select \r\n                      class=\"form-select\" \r\n                      id=\"districtId\"\r\n                      formControlName=\"districtId\"\r\n                      (change)=\"onDistrictChange()\"\r\n                      [class.is-invalid]=\"villageForm.get('districtId')?.invalid && villageForm.get('districtId')?.touched\">\r\n                      <option value=\"\">Select a district</option>\r\n                      <option *ngFor=\"let district of filteredDistricts\" [value]=\"district.id\">{{ district.name }}</option>\r\n                    </select>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('districtId')?.hasError('required')\">\r\n                      District is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-4\">\r\n                    <label for=\"wardId\" class=\"form-label\">Ward <span class=\"text-danger\">*</span></label>\r\n                    <select \r\n                      class=\"form-select\" \r\n                      id=\"wardId\"\r\n                      formControlName=\"wardId\"\r\n                      [class.is-invalid]=\"villageForm.get('wardId')?.invalid && villageForm.get('wardId')?.touched\">\r\n                      <option value=\"\">Select a ward</option>\r\n                      <option *ngFor=\"let ward of filteredWards\" [value]=\"ward.id\">{{ ward.name }}</option>\r\n                    </select>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('wardId')?.hasError('required')\">\r\n                      Ward is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Population and Area -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"population\" class=\"form-label\">Population</label>\r\n                    <input \r\n                      type=\"number\" \r\n                      class=\"form-control\" \r\n                      id=\"population\"\r\n                      formControlName=\"population\"\r\n                      placeholder=\"Enter population\"\r\n                      min=\"0\"\r\n                      [class.is-invalid]=\"villageForm.get('population')?.invalid && villageForm.get('population')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('population')?.hasError('min')\">\r\n                      Population must be a positive number\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"areaSqKm\" class=\"form-label\">Area (km²)</label>\r\n                    <input \r\n                      type=\"number\" \r\n                      class=\"form-control\" \r\n                      id=\"areaSqKm\"\r\n                      formControlName=\"areaSqKm\"\r\n                      placeholder=\"Enter area in square kilometers\"\r\n                      min=\"0\"\r\n                      step=\"0.1\"\r\n                      [class.is-invalid]=\"villageForm.get('areaSqKm')?.invalid && villageForm.get('areaSqKm')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('areaSqKm')?.hasError('min')\">\r\n                      Area must be a positive number\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Coordinates -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"latitude\" class=\"form-label\">Latitude</label>\r\n                    <input \r\n                      type=\"number\" \r\n                      class=\"form-control\" \r\n                      id=\"latitude\"\r\n                      formControlName=\"latitude\"\r\n                      placeholder=\"Enter latitude\"\r\n                      step=\"0.000001\"\r\n                      [class.is-invalid]=\"villageForm.get('latitude')?.invalid && villageForm.get('latitude')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('latitude')?.hasError('min') || villageForm.get('latitude')?.hasError('max')\">\r\n                      Latitude must be between -90 and 90\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"longitude\" class=\"form-label\">Longitude</label>\r\n                    <input \r\n                      type=\"number\" \r\n                      class=\"form-control\" \r\n                      id=\"longitude\"\r\n                      formControlName=\"longitude\"\r\n                      placeholder=\"Enter longitude\"\r\n                      step=\"0.000001\"\r\n                      [class.is-invalid]=\"villageForm.get('longitude')?.invalid && villageForm.get('longitude')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('longitude')?.hasError('min') || villageForm.get('longitude')?.hasError('max')\">\r\n                      Longitude must be between -180 and 180\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Executive Officer -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"executiveOfficer\" class=\"form-label\">Executive Officer</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"executiveOfficer\"\r\n                      formControlName=\"executiveOfficer\"\r\n                      placeholder=\"Enter executive officer name\"\r\n                      [class.is-invalid]=\"villageForm.get('executiveOfficer')?.invalid && villageForm.get('executiveOfficer')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('executiveOfficer')?.hasError('maxlength')\">\r\n                      Executive officer name must not exceed 100 characters\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Status -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"isActive\" class=\"form-label\">Status</label>\r\n                    <select \r\n                      class=\"form-select\" \r\n                      id=\"isActive\"\r\n                      formControlName=\"isActive\">\r\n                      <option [value]=\"true\">Active</option>\r\n                      <option [value]=\"false\">Inactive</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <!-- Description -->\r\n                  <div class=\"col-12\">\r\n                    <label for=\"description\" class=\"form-label\">Description</label>\r\n                    <textarea \r\n                      class=\"form-control\" \r\n                      id=\"description\"\r\n                      formControlName=\"description\"\r\n                      rows=\"3\"\r\n                      placeholder=\"Enter village description\"\r\n                      [class.is-invalid]=\"villageForm.get('description')?.invalid && villageForm.get('description')?.touched\"></textarea>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"villageForm.get('description')?.hasError('maxlength')\">\r\n                      Description must not exceed 500 characters\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Form Actions -->\r\n                <div class=\"row mt-4\">\r\n                  <div class=\"col-12\">\r\n                    <div class=\"d-flex gap-2\">\r\n                      <button \r\n                        type=\"submit\" \r\n                        class=\"btn btn-primary\"\r\n                        [disabled]=\"villageForm.invalid || isLoading\">\r\n                        <span *ngIf=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\r\n                        <i *ngIf=\"!isLoading\" class=\"bi bi-check-circle me-1\"></i>\r\n                        {{ isEditMode ? 'Update Village' : 'Create Village' }}\r\n                      </button>\r\n                      <button \r\n                        type=\"button\" \r\n                        class=\"btn btn-outline-secondary\"\r\n                        (click)=\"goBack()\">\r\n                        <i class=\"bi bi-x-circle me-1\"></i>\r\n                        Cancel\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Help Panel -->\r\n        <div class=\"col-lg-4\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h6 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-info-circle me-2\"></i>\r\n                Help & Guidelines\r\n              </h6>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <h6>Required Fields</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Village Name</li>\r\n                <li>• Headquarters</li>\r\n                <li>• Region</li>\r\n                <li>• District</li>\r\n                <li>• Ward</li>\r\n              </ul>\r\n\r\n              <h6 class=\"mt-3\">Optional Fields</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Population</li>\r\n                <li>• Area (km²)</li>\r\n                <li>• Coordinates</li>\r\n                <li>• Executive Officer</li>\r\n                <li>• Description</li>\r\n              </ul>\r\n\r\n              <h6 class=\"mt-3\">Tips</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Select region first to filter districts</li>\r\n                <li>• Select district to filter wards</li>\r\n                <li>• Use precise coordinates for mapping</li>\r\n                <li>• Keep descriptions concise and informative</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .village-form-container {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 0 1rem;\r\n    }\r\n\r\n    .card {\r\n      border: none;\r\n      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n    }\r\n\r\n    .card-header {\r\n      background-color: #f8f9fa;\r\n      border-bottom: 1px solid #dee2e6;\r\n    }\r\n\r\n    .form-label {\r\n      font-weight: 500;\r\n      color: #495057;\r\n    }\r\n\r\n    .text-danger {\r\n      color: #dc3545 !important;\r\n    }\r\n\r\n    .btn {\r\n      font-weight: 500;\r\n    }\r\n\r\n    .spinner-border-sm {\r\n      width: 1rem;\r\n      height: 1rem;\r\n    }\r\n  `]\r\n})\r\nexport class VillageFormComponent implements OnInit {\r\n  villageForm: FormGroup;\r\n  isEditMode = false;\r\n  isLoading = false;\r\n  villageId: string | null = null;\r\n  \r\n  regions: Region[] = [];\r\n  districts: District[] = [];\r\n  wards: Ward[] = [];\r\n  filteredDistricts: District[] = [];\r\n  filteredWards: Ward[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private villageService: VillageService,\r\n    private wardService: WardService,\r\n    private districtService: DistrictService,\r\n    private regionService: RegionService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.villageForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.maxLength(100)]],\r\n      headquarters: ['', [Validators.required, Validators.maxLength(100)]],\r\n      regionId: [null, [Validators.required]],\r\n      districtId: [null, [Validators.required]],\r\n      wardId: [null, [Validators.required]],\r\n      population: [0, [Validators.min(0)]],\r\n      areaSqKm: [0, [Validators.min(0)]],\r\n      latitude: [0, [Validators.min(-90), Validators.max(90)]],\r\n      longitude: [0, [Validators.min(-180), Validators.max(180)]],\r\n      executiveOfficer: ['', [Validators.maxLength(100)]],\r\n      description: ['', [Validators.maxLength(500)]],\r\n      isActive: [true]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadRegions();\r\n    this.loadDistricts();\r\n    this.loadWards();\r\n    \r\n    // Check if we're in edit mode\r\n    this.villageId = this.route.snapshot.paramMap.get('uid');\r\n    if (this.villageId) {\r\n      this.isEditMode = true;\r\n      this.loadVillage(this.villageId);\r\n    }\r\n  }\r\n\r\n  loadRegions() {\r\n    this.regionService.getAllRegions(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.regions = response.data || [];\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading regions:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadDistricts() {\r\n    console.log('Loading districts...');\r\n    this.districtService.getAllDistricts(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.districts = response.data || [];\r\n        this.filteredDistricts = this.districts;\r\n        console.log('Loaded districts:', this.districts);\r\n        console.log('Sample district structure:', this.districts[0]);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading districts:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadWards() {\r\n    console.log('Loading wards...');\r\n    this.wardService.getAllWards(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.wards = response.data || [];\r\n        this.filteredWards = this.wards;\r\n        console.log('Loaded wards:', this.wards);\r\n        console.log('Sample ward structure:', this.wards[0]);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading wards:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadVillage(uid: string) {\r\n    this.isLoading = true;\r\n    console.log('Loading village with UID:', uid);\r\n    this.villageService.getVillageByUid(uid).subscribe({\r\n      next: (response) => {\r\n        this.isLoading = false;\r\n        console.log('Village API Response:', response);\r\n        if (response.status) {\r\n          const village = response.data;\r\n          console.log('Village data:', village);\r\n          this.villageForm.patchValue({\r\n            name: village.name,\r\n            headquarters: village.headquarters,\r\n            regionId: village.regionId,\r\n            districtId: village.districtId,\r\n            wardId: village.wardId,\r\n            population: village.population,\r\n            areaSqKm: village.areaSqKm,\r\n            latitude: village.latitude,\r\n            longitude: village.longitude,\r\n            executiveOfficer: village.executiveOfficer,\r\n            description: village.description,\r\n            isActive: village.isActive\r\n          });\r\n          \r\n          // Filter districts and wards based on selected values\r\n          this.onRegionChange();\r\n          this.onDistrictChange();\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.isLoading = false;\r\n        console.error('Error loading village:', error);\r\n        console.error('Error status:', error.status);\r\n        console.error('Error details:', error.error);\r\n        alert(`Error loading village: ${error.error?.message || error.message || 'Unknown error'}`);\r\n        this.goBack();\r\n      }\r\n    });\r\n  }\r\n\r\n  onRegionChange() {\r\n    const selectedRegionId = this.villageForm.get('regionId')?.value;\r\n    console.log('Region changed to:', selectedRegionId);\r\n    \r\n    if (selectedRegionId) {\r\n      // Find the selected region to get its UID\r\n      const selectedRegion = this.regions.find(r => r.id === Number(selectedRegionId));\r\n      console.log('Selected region:', selectedRegion);\r\n      \r\n      if (selectedRegion) {\r\n        // Load districts for this specific region using the API\r\n        this.districtService.getDistrictsByRegionUid(selectedRegion.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredDistricts = response.data || [];\r\n            console.log('Loaded districts for region', selectedRegion.name, ':', this.filteredDistricts);\r\n            \r\n            // Reset district and ward selections if current selections are not in filtered lists\r\n            const currentDistrictId = this.villageForm.get('districtId')?.value;\r\n            if (currentDistrictId && !this.filteredDistricts.find(d => d.id === currentDistrictId)) {\r\n              this.villageForm.patchValue({ districtId: null, wardId: null });\r\n            }\r\n            \r\n            // Update wards based on new district selection\r\n            this.onDistrictChange();\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading districts for region:', error);\r\n            this.filteredDistricts = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // No region selected, show all districts\r\n      this.filteredDistricts = this.districts;\r\n      console.log('No region selected, showing all districts:', this.filteredDistricts);\r\n    }\r\n  }\r\n\r\n  onDistrictChange() {\r\n    const selectedDistrictId = this.villageForm.get('districtId')?.value;\r\n    console.log('District changed to:', selectedDistrictId);\r\n    \r\n    if (selectedDistrictId) {\r\n      // Find the selected district to get its UID\r\n      const selectedDistrict = this.filteredDistricts.find(d => d.id === Number(selectedDistrictId));\r\n      console.log('Selected district:', selectedDistrict);\r\n      \r\n      if (selectedDistrict) {\r\n        // Load wards for this specific district using the API\r\n        this.wardService.getWardsByDistrictUid(selectedDistrict.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredWards = response.data || [];\r\n            console.log('Loaded wards for district', selectedDistrict.name, ':', this.filteredWards);\r\n            \r\n            // Reset ward selection if current selection is not in filtered list\r\n            const currentWardId = this.villageForm.get('wardId')?.value;\r\n            if (currentWardId && !this.filteredWards.find(w => w.id === currentWardId)) {\r\n              this.villageForm.patchValue({ wardId: null });\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading wards for district:', error);\r\n            this.filteredWards = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // No district selected, show all wards\r\n      this.filteredWards = this.wards;\r\n      console.log('No district selected, showing all wards:', this.filteredWards);\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.villageForm.valid) {\r\n      this.isLoading = true;\r\n      const formData = this.villageForm.value;\r\n      \r\n      if (this.isEditMode && this.villageId) {\r\n        // Update existing village\r\n        const updateRequest: UpdateVillageRequest = {\r\n          name: formData.name,\r\n          headquarters: formData.headquarters,\r\n          wardId: formData.wardId,\r\n          population: formData.population,\r\n          areaSqKm: formData.areaSqKm,\r\n          latitude: formData.latitude,\r\n          longitude: formData.longitude,\r\n          executiveOfficer: formData.executiveOfficer,\r\n          description: formData.description,\r\n          isActive: formData.isActive\r\n        };\r\n\r\n        this.villageService.updateVillage(this.villageId, updateRequest).subscribe({\r\n          next: (response) => {\r\n            this.isLoading = false;\r\n            if (response.status) {\r\n              alert('Village updated successfully!');\r\n              this.goBack();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            this.isLoading = false;\r\n            console.error('Error updating village:', error);\r\n            alert(`Error updating village: ${error.error?.message || error.message || 'Unknown error'}`);\r\n          }\r\n        });\r\n      } else {\r\n        // Create new village\r\n        const createRequest: CreateVillageRequest = {\r\n          name: formData.name,\r\n          headquarters: formData.headquarters,\r\n          wardId: formData.wardId,\r\n          population: formData.population,\r\n          areaSqKm: formData.areaSqKm,\r\n          latitude: formData.latitude,\r\n          longitude: formData.longitude,\r\n          executiveOfficer: formData.executiveOfficer,\r\n          description: formData.description,\r\n          isActive: formData.isActive\r\n        };\r\n\r\n        this.villageService.createVillage(createRequest).subscribe({\r\n          next: (response) => {\r\n            this.isLoading = false;\r\n            if (response.status) {\r\n              alert('Village created successfully!');\r\n              this.goBack();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            this.isLoading = false;\r\n            console.error('Error creating village:', error);\r\n            alert(`Error creating village: ${error.error?.message || error.message || 'Unknown error'}`);\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // Mark all fields as touched to show validation errors\r\n      Object.keys(this.villageForm.controls).forEach(key => {\r\n        this.villageForm.get(key)?.markAsTouched();\r\n      });\r\n    }\r\n  }\r\n\r\n  goBack() {\r\n    this.router.navigate(['/villages']);\r\n  }\r\n}\r\n"],"names":["CommonModule","RouterModule","Validators","ReactiveFormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","region_r1","id","ɵɵadvance","ɵɵtextInterpolate","name","district_r2","ward_r3","ɵɵelement","VillageFormComponent","constructor","fb","villageService","wardService","districtService","regionService","route","router","isEditMode","isLoading","villageId","regions","districts","wards","filteredDistricts","filteredWards","villageForm","group","required","maxLength","headquarters","regionId","districtId","wardId","population","min","areaSqKm","latitude","max","longitude","executiveOfficer","description","isActive","ngOnInit","loadRegions","loadDistricts","loadWards","snapshot","paramMap","get","loadVillage","getAllRegions","subscribe","next","response","data","error","console","log","getAllDistricts","getAllWards","uid","getVillageByUid","status","village","patchValue","onRegionChange","onDistrictChange","alert","message","goBack","selectedRegionId","value","selectedRegion","find","r","Number","getDistrictsByRegionUid","currentDistrictId","d","selectedDistrictId","selectedDistrict","getWardsByDistrictUid","currentWardId","w","onSubmit","valid","formData","updateRequest","updateVillage","createRequest","createVillage","Object","keys","controls","forEach","key","markAsTouched","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","VillageService","i3","WardService","i4","DistrictService","i5","RegionService","i6","ActivatedRoute","Router","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","VillageFormComponent_Template","rf","ctx","ɵɵlistener","VillageFormComponent_Template_button_click_7_listener","VillageFormComponent_Template_form_ngSubmit_18_listener","ɵɵtemplate","VillageFormComponent_div_26_Template","VillageFormComponent_div_27_Template","VillageFormComponent_div_34_Template","VillageFormComponent_div_35_Template","VillageFormComponent_Template_select_change_41_listener","VillageFormComponent_option_44_Template","VillageFormComponent_div_45_Template","VillageFormComponent_Template_select_change_51_listener","VillageFormComponent_option_54_Template","VillageFormComponent_div_55_Template","VillageFormComponent_option_64_Template","VillageFormComponent_div_65_Template","VillageFormComponent_div_70_Template","VillageFormComponent_div_75_Template","VillageFormComponent_div_80_Template","VillageFormComponent_div_85_Template","VillageFormComponent_div_90_Template","VillageFormComponent_div_103_Template","VillageFormComponent_span_108_Template","VillageFormComponent_i_109_Template","VillageFormComponent_Template_button_click_111_listener","ɵɵclassProp","tmp_3_0","invalid","touched","tmp_4_0","hasError","tmp_5_0","tmp_6_0","tmp_7_0","tmp_8_0","tmp_9_0","tmp_11_0","tmp_12_0","tmp_14_0","tmp_15_0","tmp_17_0","tmp_18_0","tmp_19_0","tmp_20_0","tmp_21_0","tmp_22_0","tmp_23_0","tmp_24_0","tmp_25_0","tmp_26_0","tmp_27_0","tmp_30_0","tmp_31_0","ɵɵtextInterpolate1","i7","NgForOf","NgIf","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","NumberValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","MinValidator","FormGroupDirective","FormControlName","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}