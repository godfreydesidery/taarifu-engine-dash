{"version":3,"file":"src_app_features_auth_login_login_component_ts.js","mappings":";;;;;;;;;;;;;;;;;;;;AAC+C;AAC0C;AAIP;;;;;;;;;IA+BlEI,4DAAA,cAAsF;IACpFA,oDAAA,6BACF;IAAAA,0DAAA,EAAM;;;;;IAqBNA,4DAAA,cAAsF;IACpFA,oDAAA,6BACF;IAAAA,0DAAA,EAAM;;;;;IAQRA,uDAAA,eAA2F;;;AA0CnG,MAAOK,cAAc;EAKzBC,YACUC,EAAe,EACfC,WAAwB,EACxBC,MAAc,EACdC,YAA0B;IAH1B,KAAAH,EAAE,GAAFA,EAAE;IACF,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,YAAY,GAAZA,YAAY;IAPtB,KAAAC,YAAY,GAAG,IAAI;IACnB,KAAAC,SAAS,GAAG,KAAK;IAQf,IAAI,CAACC,SAAS,GAAG,IAAI,CAACN,EAAE,CAACO,KAAK,CAAC;MAC7BC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAAClB,sDAAU,CAACmB,QAAQ,CAAC,CAAC;MACrCC,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACpB,sDAAU,CAACmB,QAAQ,CAAC;KACrC,CAAC;IAEF;IACAE,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;IAC/D,IAAI,CAACX,WAAW,CAACY,MAAM,EAAE;EAC3B;EAEAC,QAAQA,CAAA;IACN,IAAI,IAAI,CAACR,SAAS,CAACS,KAAK,EAAE;MACxB,IAAI,CAACV,SAAS,GAAG,IAAI;MACrB,MAAMW,WAAW,GAAG;QAClBC,eAAe,EAAE,IAAI,CAACX,SAAS,CAACY,KAAK,CAACV,QAAQ;QAC9CE,QAAQ,EAAE,IAAI,CAACJ,SAAS,CAACY,KAAK,CAACR,QAAQ;QACvCS,UAAU,EAAE;OACb;MAED,IAAI,CAAClB,WAAW,CAACmB,KAAK,CAACJ,WAAW,CAAC,CAACK,SAAS,CAAC;QAC5CC,IAAI,EAAGC,QAAQ,IAAI;UACjB,IAAI,CAAClB,SAAS,GAAG,KAAK;UACtB,IAAIkB,QAAQ,CAACC,MAAM,EAAE;YACnB,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;UACtC;QACF,CAAC;QACDC,KAAK,EAAGA,KAAK,IAAI;UACf,IAAI,CAACrB,SAAS,GAAG,KAAK;UACtBM,OAAO,CAACe,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;UAEpC;UACA,IAAI,CAACvB,YAAY,CAACuB,KAAK,CACrB,cAAc,EACdA,KAAK,CAACA,KAAK,EAAEC,OAAO,IAAI,8CAA8C,CACvE;QACH;OACD,CAAC;IACJ;EACF;;;uCAjDW7B,cAAc,EAAAL,+DAAA,CAAAoC,uDAAA,GAAApC,+DAAA,CAAAsC,oEAAA,GAAAtC,+DAAA,CAAAwC,mDAAA,GAAAxC,+DAAA,CAAA0C,sEAAA;IAAA;EAAA;;;YAAdrC,cAAc;MAAAuC,SAAA;MAAAC,UAAA;MAAAC,QAAA,GAAA9C,iEAAA;MAAAgD,KAAA;MAAAC,IAAA;MAAAC,MAAA;MAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UA5FjBrD,4DAHN,aAA6B,aACE,aACU,YACP;UAAAA,oDAAA,2BAAoB;UAAAA,0DAAA,EAAK;UACrDA,4DAAA,eAA0B;UAAAA,oDAAA,4BAAqB;UACjDA,0DADiD,EAAQ,EACnD;UAGJA,4DADF,aAAuB,cACiC;UAAxBA,wDAAA,sBAAAwD,iDAAA;YAAA,OAAYF,GAAA,CAAAjC,QAAA,EAAU;UAAA,EAAC;UAEjDrB,4DADF,aAAkB,gBACyB;UAAAA,oDAAA,gBAAQ;UAAAA,0DAAA,EAAQ;UAEvDA,4DADF,cAAyB,gBACQ;UAAAA,uDAAA,aAA4B;UAAAA,0DAAA,EAAO;UAClEA,uDAAA,iBAMgG;UAChGA,wDAAA,KAAA0D,8BAAA,kBAAsF;UAI1F1D,0DADE,EAAM,EACF;UAGJA,4DADF,cAAkB,iBACyB;UAAAA,oDAAA,gBAAQ;UAAAA,0DAAA,EAAQ;UAEvDA,4DADF,cAAyB,gBACQ;UAAAA,uDAAA,aAA0B;UAAAA,0DAAA,EAAO;UAChEA,uDAAA,iBAMgG;UAChGA,4DAAA,kBAGyC;UAAvCA,wDAAA,mBAAA2D,iDAAA;YAAA,OAAAL,GAAA,CAAA3C,YAAA,IAAA2C,GAAA,CAAA3C,YAAA;UAAA,EAAsC;UACtCX,uDAAA,aAAqF;UACvFA,0DAAA,EAAS;UACTA,wDAAA,KAAA4D,8BAAA,kBAAsF;UAI1F5D,0DADE,EAAM,EACF;UAENA,4DAAA,kBAG8C;UAC5CA,wDAAA,KAAA6D,+BAAA,mBAAoF;UACpF7D,oDAAA,IACF;UAGNA,0DAHM,EAAS,EACJ,EACH,EACF;UAGNA,uDAAA,iBAAuB;UACzBA,0DAAA,EAAM;;;;;;;UAtDMA,uDAAA,GAAuB;UAAvBA,wDAAA,cAAAsD,GAAA,CAAAzC,SAAA,CAAuB;UAWrBb,uDAAA,GAA6F;UAA7FA,yDAAA,iBAAAiE,OAAA,GAAAX,GAAA,CAAAzC,SAAA,CAAAqD,GAAA,+BAAAD,OAAA,CAAAE,OAAA,OAAAF,OAAA,GAAAX,GAAA,CAAAzC,SAAA,CAAAqD,GAAA,+BAAAD,OAAA,CAAAG,OAAA,EAA6F;UAChEpE,uDAAA,EAAqD;UAArDA,wDAAA,UAAAqE,OAAA,GAAAf,GAAA,CAAAzC,SAAA,CAAAqD,GAAA,+BAAAG,OAAA,CAAAC,QAAA,aAAqD;UAgBlFtE,uDAAA,GAA6F;UAA7FA,yDAAA,iBAAAuE,OAAA,GAAAjB,GAAA,CAAAzC,SAAA,CAAAqD,GAAA,+BAAAK,OAAA,CAAAJ,OAAA,OAAAI,OAAA,GAAAjB,GAAA,CAAAzC,SAAA,CAAAqD,GAAA,+BAAAK,OAAA,CAAAH,OAAA,EAA6F;UAL7FpE,wDAAA,SAAAsD,GAAA,CAAA3C,YAAA,uBAA2C;UAU7BX,uDAAA,GAA8B;UAACA,yDAA/B,YAAAsD,GAAA,CAAA3C,YAAA,CAA8B,iBAAA2C,GAAA,CAAA3C,YAAA,CAAoC;UAEnDX,uDAAA,EAAqD;UAArDA,wDAAA,UAAAwE,OAAA,GAAAlB,GAAA,CAAAzC,SAAA,CAAAqD,GAAA,+BAAAM,OAAA,CAAAF,QAAA,aAAqD;UAStFtE,uDAAA,EAA2C;UAA3CA,wDAAA,aAAAsD,GAAA,CAAAzC,SAAA,CAAAsD,OAAA,IAAAb,GAAA,CAAA1C,SAAA,CAA2C;UACpCZ,uDAAA,EAAe;UAAfA,wDAAA,SAAAsD,GAAA,CAAA1C,SAAA,CAAe;UACtBZ,uDAAA,EACF;UADEA,gEAAA,MAAAsD,GAAA,CAAA1C,SAAA,kCACF;;;qBA5DRhB,yDAAY,EAAA8E,iDAAA,EACZ5E,+DAAmB,EAAAsC,4DAAA,EAAAA,gEAAA,EAAAA,2DAAA,EAAAA,gEAAA,EAAAA,8DAAA,EAAAA,2DAAA,EACnBrC,oFAAc;MAAAmF,MAAA;IAAA;EAAA","sources":["./src/app/features/auth/login/login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\nimport { ToastService } from '../../../core/services/toast.service';\r\nimport { ToastComponent } from '../../../shared/components/toast/toast.component';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    ToastComponent\r\n  ],\r\n  template: `\r\n    <div class=\"login-container\">\r\n      <div class=\"card login-card\">\r\n        <div class=\"card-header text-center\">\r\n          <h4 class=\"card-title mb-1\">Taarifu Engine Login</h4>\r\n          <small class=\"text-muted\">Administration Portal</small>\r\n        </div>\r\n        \r\n        <div class=\"card-body\">\r\n          <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n            <div class=\"mb-3\">\r\n              <label for=\"username\" class=\"form-label\">Username</label>\r\n              <div class=\"input-group\">\r\n                <span class=\"input-group-text\"><i class=\"bi bi-person\"></i></span>\r\n                <input \r\n                  type=\"text\" \r\n                  class=\"form-control\" \r\n                  id=\"username\"\r\n                  formControlName=\"username\" \r\n                  autocomplete=\"username\"\r\n                  [class.is-invalid]=\"loginForm.get('username')?.invalid && loginForm.get('username')?.touched\">\r\n                <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('username')?.hasError('required')\">\r\n                  Username is required\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"mb-3\">\r\n              <label for=\"password\" class=\"form-label\">Password</label>\r\n              <div class=\"input-group\">\r\n                <span class=\"input-group-text\"><i class=\"bi bi-lock\"></i></span>\r\n                <input \r\n                  [type]=\"hidePassword ? 'password' : 'text'\" \r\n                  class=\"form-control\" \r\n                  id=\"password\"\r\n                  formControlName=\"password\" \r\n                  autocomplete=\"current-password\"\r\n                  [class.is-invalid]=\"loginForm.get('password')?.invalid && loginForm.get('password')?.touched\">\r\n                <button \r\n                  class=\"btn btn-outline-secondary\" \r\n                  type=\"button\" \r\n                  (click)=\"hidePassword = !hidePassword\">\r\n                  <i class=\"bi\" [class.bi-eye]=\"!hidePassword\" [class.bi-eye-slash]=\"hidePassword\"></i>\r\n                </button>\r\n                <div class=\"invalid-feedback\" *ngIf=\"loginForm.get('password')?.hasError('required')\">\r\n                  Password is required\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n            <button \r\n              type=\"submit\" \r\n              class=\"btn btn-primary w-100\" \r\n              [disabled]=\"loginForm.invalid || isLoading\">\r\n              <span *ngIf=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\r\n              {{ isLoading ? 'Logging in...' : 'Login' }}\r\n            </button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n      \r\n      <!-- Toast Notifications -->\r\n      <app-toast></app-toast>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .login-container {\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      min-height: 100vh;\r\n      background-color: #e9ecef;\r\n      padding: 1rem;\r\n    }\r\n\r\n    .login-card {\r\n      width: 100%;\r\n      max-width: 400px;\r\n      box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);\r\n      border: none;\r\n      border-radius: 1rem;\r\n    }\r\n\r\n    .card-header {\r\n      background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);\r\n      color: white;\r\n      border-radius: 1rem 1rem 0 0 !important;\r\n      border: none;\r\n    }\r\n\r\n    .card-title {\r\n      color: white;\r\n      font-weight: 600;\r\n    }\r\n  `]\r\n})\r\nexport class LoginComponent {\r\n  loginForm: FormGroup;\r\n  hidePassword = true;\r\n  isLoading = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private toastService: ToastService\r\n  ) {\r\n    this.loginForm = this.fb.group({\r\n      username: ['', [Validators.required]],\r\n      password: ['', [Validators.required]]\r\n    });\r\n    \r\n    // Clear any existing invalid tokens on login page load\r\n    console.log('Login page loaded - clearing any existing tokens');\r\n    this.authService.logout();\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.loginForm.valid) {\r\n      this.isLoading = true;\r\n      const credentials = {\r\n        usernameOrEmail: this.loginForm.value.username,\r\n        password: this.loginForm.value.password,\r\n        rememberMe: false\r\n      };\r\n      \r\n      this.authService.login(credentials).subscribe({\r\n        next: (response) => {\r\n          this.isLoading = false;\r\n          if (response.status) {\r\n            this.router.navigate(['/dashboard']);\r\n          }\r\n        },\r\n        error: (error) => {\r\n          this.isLoading = false;\r\n          console.error('Login error:', error);\r\n          \r\n          // Show error toast notification\r\n          this.toastService.error(\r\n            'Login Failed',\r\n            error.error?.message || 'Please check your credentials and try again.'\r\n          );\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n"],"names":["CommonModule","Validators","ReactiveFormsModule","ToastComponent","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","LoginComponent","constructor","fb","authService","router","toastService","hidePassword","isLoading","loginForm","group","username","required","password","console","log","logout","onSubmit","valid","credentials","usernameOrEmail","value","rememberMe","login","subscribe","next","response","status","navigate","error","message","ɵɵdirectiveInject","i1","FormBuilder","i2","AuthService","i3","Router","i4","ToastService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","LoginComponent_Template","rf","ctx","ɵɵlistener","LoginComponent_Template_form_ngSubmit_8_listener","ɵɵtemplate","LoginComponent_div_16_Template","LoginComponent_Template_button_click_24_listener","LoginComponent_div_26_Template","LoginComponent_span_28_Template","ɵɵadvance","ɵɵproperty","ɵɵclassProp","tmp_1_0","get","invalid","touched","tmp_2_0","hasError","tmp_3_0","tmp_7_0","ɵɵtextInterpolate1","i5","NgIf","ɵNgNoValidate","DefaultValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}