{"version":3,"file":"src_app_features_admin-users_admin-user-form_admin-user-form_component_ts.js","mappings":"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","sources":["./src/app/core/services/toast.service.ts","./src/app/features/admin-users/admin-user-form/admin-user-form.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface Toast {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  message: string;\r\n  duration?: number;\r\n  dismissible?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n  private toastsSubject = new BehaviorSubject<Toast[]>([]);\r\n  public toasts$ = this.toastsSubject.asObservable();\r\n\r\n  private showToast(type: Toast['type'], title: string, message: string, duration: number = 3000, dismissible: boolean = true): void {\r\n    const toast: Toast = {\r\n      id: this.generateId(),\r\n      type,\r\n      title,\r\n      message,\r\n      duration,\r\n      dismissible\r\n    };\r\n\r\n    const currentToasts = this.toastsSubject.value;\r\n    this.toastsSubject.next([...currentToasts, toast]);\r\n\r\n    // Auto remove toast after duration\r\n    if (duration > 0) {\r\n      setTimeout(() => {\r\n        this.removeToast(toast.id);\r\n      }, duration);\r\n    }\r\n  }\r\n\r\n  success(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('success', title, message, duration, dismissible);\r\n  }\r\n\r\n  error(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('error', title, message, duration, dismissible);\r\n  }\r\n\r\n  warning(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('warning', title, message, duration, dismissible);\r\n  }\r\n\r\n  info(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('info', title, message, duration, dismissible);\r\n  }\r\n\r\n  removeToast(id: string): void {\r\n    const currentToasts = this.toastsSubject.value;\r\n    this.toastsSubject.next(currentToasts.filter(toast => toast.id !== id));\r\n  }\r\n\r\n  clearAll(): void {\r\n    this.toastsSubject.next([]);\r\n  }\r\n\r\n  private generateId(): string {\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Router, ActivatedRoute } from '@angular/router';\r\nimport { FormsModule, ReactiveFormsModule, FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { AdminUserResponse, CreateAdminUserRequest, UpdateAdminUserRequest } from '../../../core/models/admin-user.model';\r\nimport { AdminUserService } from '../../../core/services/admin-user.service';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\nimport { ToastService } from '../../../core/services/toast.service';\r\n\r\n@Component({\r\n  selector: 'app-admin-user-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    FormsModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  template: `\r\n    <div class=\"container-fluid\">\r\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <div>\r\n          <h1 class=\"h3 mb-1\">{{ isEditMode ? 'Edit Admin User' : 'Create Admin User' }}</h1>\r\n          <p class=\"text-muted\">{{ isEditMode ? 'Update admin user information' : 'Create a new system administrator account' }}</p>\r\n        </div>\r\n        <a routerLink=\"/admin-users\" class=\"btn btn-outline-secondary\">\r\n          <i class=\"bi bi-arrow-left me-1\"></i>\r\n          Back to Admin Users\r\n        </a>\r\n      </div>\r\n\r\n      <div class=\"row justify-content-center\">\r\n        <div class=\"col-lg-8\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-person-gear me-2\"></i>\r\n                {{ isEditMode ? 'Edit Admin User' : 'Create Admin User' }}\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <form [formGroup]=\"adminUserForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"username\" class=\"form-label\">Username <span class=\"text-danger\">*</span></label>\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        id=\"username\"\r\n                        formControlName=\"username\"\r\n                        [class.is-invalid]=\"adminUserForm.get('username')?.invalid && adminUserForm.get('username')?.touched\"\r\n                        placeholder=\"Enter username\">\r\n                      <div *ngIf=\"adminUserForm.get('username')?.invalid && adminUserForm.get('username')?.touched\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"adminUserForm.get('username')?.errors?.['required']\">Username is required</div>\r\n                        <div *ngIf=\"adminUserForm.get('username')?.errors?.['minlength']\">Username must be at least 3 characters</div>\r\n                        <div *ngIf=\"adminUserForm.get('username')?.errors?.['maxlength']\">Username must not exceed 50 characters</div>\r\n                        <div *ngIf=\"adminUserForm.get('username')?.errors?.['pattern']\">Username can only contain letters, numbers, and underscores</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"email\" class=\"form-label\">Email Address <span class=\"text-danger\">*</span></label>\r\n                      <input \r\n                        type=\"email\" \r\n                        class=\"form-control\" \r\n                        id=\"email\"\r\n                        formControlName=\"email\"\r\n                        [class.is-invalid]=\"adminUserForm.get('email')?.invalid && adminUserForm.get('email')?.touched\"\r\n                        placeholder=\"Enter email address\">\r\n                      <div *ngIf=\"adminUserForm.get('email')?.invalid && adminUserForm.get('email')?.touched\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"adminUserForm.get('email')?.errors?.['required']\">Email is required</div>\r\n                        <div *ngIf=\"adminUserForm.get('email')?.errors?.['email']\">Please enter a valid email address</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Password fields only shown in edit mode -->\r\n                <div class=\"row\" *ngIf=\"isEditMode\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"password\" class=\"form-label\">\r\n                        New Password\r\n                        <small class=\"text-muted\">(Leave blank to keep current password)</small>\r\n                      </label>\r\n                      <input \r\n                        type=\"password\" \r\n                        class=\"form-control\" \r\n                        id=\"password\"\r\n                        formControlName=\"password\"\r\n                        [class.is-invalid]=\"adminUserForm.get('password')?.invalid && adminUserForm.get('password')?.touched\"\r\n                        placeholder=\"Enter new password\">\r\n                      <div *ngIf=\"adminUserForm.get('password')?.invalid && adminUserForm.get('password')?.touched\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"adminUserForm.get('password')?.errors?.['minlength']\">Password must be at least 12 characters</div>\r\n                        <div *ngIf=\"adminUserForm.get('password')?.errors?.['pattern']\">Password must contain uppercase, lowercase, numbers, and special characters</div>\r\n                      </div>\r\n                      <div class=\"form-text\">\r\n                        Leave password field empty to keep the current password unchanged.\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"confirmPassword\" class=\"form-label\">Confirm New Password</label>\r\n                      <input \r\n                        type=\"password\" \r\n                        class=\"form-control\" \r\n                        id=\"confirmPassword\"\r\n                        formControlName=\"confirmPassword\"\r\n                        [class.is-invalid]=\"adminUserForm.get('confirmPassword')?.invalid && adminUserForm.get('confirmPassword')?.touched\"\r\n                        placeholder=\"Confirm new password\">\r\n                      <div *ngIf=\"adminUserForm.get('confirmPassword')?.invalid && adminUserForm.get('confirmPassword')?.touched\" class=\"invalid-feedback\">\r\n                        <div *ngIf=\"adminUserForm.get('confirmPassword')?.errors?.['mismatch']\">Passwords do not match</div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Info message for create mode -->\r\n                <div class=\"row\" *ngIf=\"!isEditMode\">\r\n                  <div class=\"col-12\">\r\n                    <div class=\"alert alert-info\">\r\n                      <i class=\"bi bi-info-circle me-2\"></i>\r\n                      <strong>Password Information:</strong> A secure password will be automatically generated for the new admin user and sent to their email address.\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"status\" class=\"form-label\">Status</label>\r\n                      <select class=\"form-select\" id=\"status\" formControlName=\"status\">\r\n                        <option value=\"ACTIVE\">Active</option>\r\n                        <option value=\"INACTIVE\">Inactive</option>\r\n                        <option value=\"SUSPENDED\">Suspended</option>\r\n                      </select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Admin User Info (Edit Mode Only) -->\r\n                <div *ngIf=\"isEditMode && currentAdminUser\" class=\"row\">\r\n                  <div class=\"col-12\">\r\n                    <hr>\r\n                    <h6 class=\"text-muted mb-3\">Account Information</h6>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-md-4\">\r\n                        <div class=\"mb-3\">\r\n                          <label class=\"form-label\">User Type</label>\r\n                          <input type=\"text\" class=\"form-control\" [value]=\"currentAdminUser.userType\" readonly>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-4\">\r\n                        <div class=\"mb-3\">\r\n                          <label class=\"form-label\">Password Strength</label>\r\n                          <input type=\"text\" class=\"form-control\" [value]=\"currentAdminUser.passwordStrength\" readonly>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-4\">\r\n                        <div class=\"mb-3\">\r\n                          <label class=\"form-label\">Last Login</label>\r\n                          <input type=\"text\" class=\"form-control\" \r\n                                 [value]=\"currentAdminUser.lastLoginAt ? (currentAdminUser.lastLoginAt | date:'short') : 'Never'\" readonly>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                      <div class=\"col-md-6\">\r\n                        <div class=\"mb-3\">\r\n                          <label class=\"form-label\">Created At</label>\r\n                          <input type=\"text\" class=\"form-control\" [value]=\"currentAdminUser.createdAt | date:'short'\" readonly>\r\n                        </div>\r\n                      </div>\r\n                      <div class=\"col-md-6\">\r\n                        <div class=\"mb-3\">\r\n                          <label class=\"form-label\">Updated At</label>\r\n                          <input type=\"text\" class=\"form-control\" [value]=\"currentAdminUser.updatedAt | date:'short'\" readonly>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"d-flex justify-content-end gap-2\">\r\n                  <a routerLink=\"/admin-users\" class=\"btn btn-outline-secondary\">Cancel</a>\r\n                  <button type=\"submit\" class=\"btn btn-primary\" [disabled]=\"adminUserForm.invalid || isSubmitting\">\r\n                    <span *ngIf=\"isSubmitting\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\r\n                    <i *ngIf=\"!isSubmitting\" class=\"bi\" [class.bi-check-circle]=\"!isEditMode\" [class.bi-pencil]=\"isEditMode\" me-1></i>\r\n                    {{ isSubmitting ? 'Saving...' : (isEditMode ? 'Update Admin User' : 'Create Admin User') }}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .container-fluid {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 0 1rem;\r\n    }\r\n\r\n    .form-label {\r\n      font-weight: 600;\r\n      color: #495057;\r\n    }\r\n\r\n    .form-control:focus,\r\n    .form-select:focus {\r\n      border-color: #007bff;\r\n      box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);\r\n    }\r\n\r\n    .btn-primary {\r\n      background-color: #007bff;\r\n      border-color: #007bff;\r\n    }\r\n\r\n    .btn-primary:hover {\r\n      background-color: #0056b3;\r\n      border-color: #004085;\r\n    }\r\n\r\n    .text-danger {\r\n      color: #dc3545 !important;\r\n    }\r\n\r\n    .text-muted {\r\n      color: #6c757d !important;\r\n    }\r\n\r\n    /* Mobile Responsive Styles */\r\n    @media (max-width: 768px) {\r\n      .container-fluid {\r\n        padding: 0 0.5rem;\r\n      }\r\n\r\n      .card-body {\r\n        padding: 1rem;\r\n      }\r\n\r\n      .d-flex.justify-content-end.gap-2 {\r\n        flex-direction: column;\r\n        gap: 0.5rem !important;\r\n      }\r\n\r\n      .d-flex.justify-content-end.gap-2 .btn {\r\n        width: 100%;\r\n      }\r\n    }\r\n  `]\r\n})\r\nexport class AdminUserFormComponent implements OnInit {\r\n  adminUserForm: FormGroup;\r\n  isEditMode = false;\r\n  isSubmitting = false;\r\n  currentAdminUser: AdminUserResponse | null = null;\r\n  adminUserUid: string | null = null;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private adminUserService: AdminUserService,\r\n    private authService: AuthService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private toastService: ToastService\r\n  ) {\r\n    this.adminUserForm = this.createForm();\r\n  }\r\n\r\n  ngOnInit() {\r\n    console.log('AdminUserFormComponent initialized');\r\n    \r\n    // Check if we're in edit mode\r\n    this.adminUserUid = this.route.snapshot.paramMap.get('uid');\r\n    this.isEditMode = !!this.adminUserUid;\r\n\r\n    if (this.isEditMode) {\r\n      // For edit mode, set up password validation\r\n      this.adminUserForm.get('password')?.setValidators([\r\n        Validators.minLength(12),\r\n        this.strongPasswordValidator\r\n      ]);\r\n      this.adminUserForm.get('confirmPassword')?.setValidators([\r\n        this.passwordMatchValidator\r\n      ]);\r\n      this.adminUserForm.get('password')?.updateValueAndValidity();\r\n      this.adminUserForm.get('confirmPassword')?.updateValueAndValidity();\r\n      \r\n      this.loadAdminUser();\r\n    } else {\r\n      // For create mode, no password fields are needed - password will be auto-generated\r\n      // Remove password and confirmPassword from form for create mode\r\n      this.adminUserForm.removeControl('password');\r\n      this.adminUserForm.removeControl('confirmPassword');\r\n    }\r\n  }\r\n\r\n  private createForm(): FormGroup {\r\n    return this.fb.group({\r\n      username: ['', [\r\n        Validators.required,\r\n        Validators.minLength(3),\r\n        Validators.maxLength(50),\r\n        Validators.pattern(/^[a-zA-Z0-9_]+$/)\r\n      ]],\r\n      email: ['', [\r\n        Validators.required,\r\n        Validators.email\r\n      ]],\r\n      password: ['', [\r\n        // Password validators will be set conditionally in ngOnInit\r\n      ]],\r\n      confirmPassword: ['', [\r\n        // Confirm password validators will be set conditionally in ngOnInit\r\n      ]],\r\n      status: ['ACTIVE']\r\n    });\r\n  }\r\n\r\n  private strongPasswordValidator(control: any) {\r\n    if (!control.value) return null;\r\n    \r\n    const password = control.value;\r\n    const hasUpperCase = /[A-Z]/.test(password);\r\n    const hasLowerCase = /[a-z]/.test(password);\r\n    const hasNumbers = /\\d/.test(password);\r\n    const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\r\n    \r\n    if (hasUpperCase && hasLowerCase && hasNumbers && hasSpecialChar) {\r\n      return null;\r\n    } else {\r\n      return { pattern: true };\r\n    }\r\n  }\r\n\r\n  private passwordMatchValidator(control: any) {\r\n    if (!control.value) return null;\r\n    \r\n    const password = control.parent?.get('password')?.value;\r\n    const confirmPassword = control.value;\r\n    \r\n    if (password === confirmPassword) {\r\n      return null;\r\n    } else {\r\n      return { mismatch: true };\r\n    }\r\n  }\r\n\r\n  loadAdminUser() {\r\n    if (!this.adminUserUid) return;\r\n\r\n    this.adminUserService.getAdminUserByUid(this.adminUserUid).subscribe({\r\n      next: (response) => {\r\n        if (response.status) {\r\n          this.currentAdminUser = response.data;\r\n          this.populateForm();\r\n        }\r\n      },\r\n      error: (error) => {\r\n        console.error('Error loading admin user:', error);\r\n        this.toastService.error('Error Loading Admin User', 'Failed to load admin user details');\r\n        this.router.navigate(['/admin-users']);\r\n      }\r\n    });\r\n  }\r\n\r\n  populateForm() {\r\n    if (!this.currentAdminUser) return;\r\n\r\n    this.adminUserForm.patchValue({\r\n      username: this.currentAdminUser.username,\r\n      email: this.currentAdminUser.email,\r\n      status: this.currentAdminUser.status\r\n      // Password fields are left empty for edit mode\r\n    });\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.adminUserForm.invalid) {\r\n      this.markFormGroupTouched();\r\n      return;\r\n    }\r\n\r\n    this.isSubmitting = true;\r\n\r\n    if (this.isEditMode) {\r\n      this.updateAdminUser();\r\n    } else {\r\n      this.createAdminUser();\r\n    }\r\n  }\r\n\r\n  private createAdminUser() {\r\n    const formValue = this.adminUserForm.value;\r\n    const createRequest: CreateAdminUserRequest = {\r\n      username: formValue.username,\r\n      email: formValue.email,\r\n      status: formValue.status\r\n    };\r\n\r\n    this.adminUserService.createAdminUser(createRequest).subscribe({\r\n      next: (response) => {\r\n        this.isSubmitting = false;\r\n        if (response.status) {\r\n          this.toastService.success('Admin User Created', `Admin user ${formValue.username} has been created successfully. A secure password has been generated and sent to their email address.`);\r\n          this.router.navigate(['/admin-users']);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.isSubmitting = false;\r\n        console.error('Error creating admin user:', error);\r\n        this.toastService.error('Error Creating Admin User', error.error?.message || 'Failed to create admin user');\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateAdminUser() {\r\n    if (!this.adminUserUid) return;\r\n\r\n    const formValue = this.adminUserForm.value;\r\n    const updateRequest: UpdateAdminUserRequest = {\r\n      username: formValue.username,\r\n      email: formValue.email,\r\n      status: formValue.status\r\n    };\r\n\r\n    // Only include password if it's provided\r\n    if (formValue.password && formValue.password.trim() !== '') {\r\n      updateRequest.password = formValue.password;\r\n    }\r\n\r\n    this.adminUserService.updateAdminUser(this.adminUserUid, updateRequest).subscribe({\r\n      next: (response) => {\r\n        this.isSubmitting = false;\r\n        if (response.status) {\r\n          this.toastService.success('Admin User Updated', `Admin user ${formValue.username} has been updated successfully`);\r\n          this.router.navigate(['/admin-users']);\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.isSubmitting = false;\r\n        console.error('Error updating admin user:', error);\r\n        this.toastService.error('Error Updating Admin User', error.error?.message || 'Failed to update admin user');\r\n      }\r\n    });\r\n  }\r\n\r\n  private markFormGroupTouched() {\r\n    Object.keys(this.adminUserForm.controls).forEach(key => {\r\n      const control = this.adminUserForm.get(key);\r\n      control?.markAsTouched();\r\n    });\r\n  }\r\n}\r\n"],"names":["BehaviorSubject","ToastService","constructor","toastsSubject","toasts$","asObservable","showToast","type","title","message","duration","dismissible","toast","id","generateId","currentToasts","value","next","setTimeout","removeToast","success","error","warning","info","filter","clearAll","Math","random","toString","substr","factory","ɵfac","providedIn","CommonModule","RouterModule","FormsModule","ReactiveFormsModule","Validators","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵtemplate","AdminUserFormComponent_div_27_div_1_Template","AdminUserFormComponent_div_27_div_2_Template","AdminUserFormComponent_div_27_div_3_Template","AdminUserFormComponent_div_27_div_4_Template","ɵɵadvance","ɵɵproperty","tmp_1_0","ctx_r0","adminUserForm","get","errors","tmp_2_0","tmp_3_0","tmp_4_0","AdminUserFormComponent_div_35_div_1_Template","AdminUserFormComponent_div_35_div_2_Template","AdminUserFormComponent_div_36_div_8_div_1_Template","AdminUserFormComponent_div_36_div_8_div_2_Template","AdminUserFormComponent_div_36_div_16_div_1_Template","ɵɵelement","AdminUserFormComponent_div_36_div_8_Template","AdminUserFormComponent_div_36_div_16_Template","ɵɵclassProp","invalid","touched","currentAdminUser","userType","passwordStrength","lastLoginAt","ɵɵpipeBind2","createdAt","updatedAt","isEditMode","AdminUserFormComponent","fb","adminUserService","authService","router","route","toastService","isSubmitting","adminUserUid","createForm","ngOnInit","console","log","snapshot","paramMap","setValidators","minLength","strongPasswordValidator","passwordMatchValidator","updateValueAndValidity","loadAdminUser","removeControl","group","username","required","maxLength","pattern","email","password","confirmPassword","status","control","hasUpperCase","test","hasLowerCase","hasNumbers","hasSpecialChar","parent","mismatch","getAdminUserByUid","subscribe","response","data","populateForm","navigate","patchValue","onSubmit","markFormGroupTouched","updateAdminUser","createAdminUser","formValue","createRequest","updateRequest","trim","Object","keys","controls","forEach","key","markAsTouched","ɵɵdirectiveInject","i1","FormBuilder","i2","AdminUserService","i3","AuthService","i4","Router","ActivatedRoute","i5","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","AdminUserFormComponent_Template","rf","ctx","ɵɵlistener","AdminUserFormComponent_Template_form_ngSubmit_18_listener","AdminUserFormComponent_div_27_Template","AdminUserFormComponent_div_35_Template","AdminUserFormComponent_div_36_Template","AdminUserFormComponent_div_37_Template","AdminUserFormComponent_div_50_Template","AdminUserFormComponent_span_55_Template","AdminUserFormComponent_i_56_Template","ɵɵtextInterpolate","ɵɵtextInterpolate1","tmp_5_0","tmp_6_0","tmp_7_0","i6","NgIf","DatePipe","RouterLink","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","FormGroupDirective","FormControlName","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}