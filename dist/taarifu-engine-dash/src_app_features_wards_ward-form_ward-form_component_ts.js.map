{"version":3,"file":"src_app_features_wards_ward-form_ward-form_component_ts.js","mappings":"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","sources":["./src/app/features/wards/ward-form/ward-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, ActivatedRoute, Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { WardService } from '../../../core/services/ward.service';\r\nimport { DistrictService } from '../../../core/services/district.service';\r\nimport { RegionService } from '../../../core/services/region.service';\r\nimport { Ward, CreateWardRequest, UpdateWardRequest } from '../../../core/models/ward.model';\r\nimport { District } from '../../../core/models/district.model';\r\nimport { Region } from '../../../core/models/region.model';\r\n\r\n@Component({\r\n  selector: 'app-ward-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  template: `\r\n    <div class=\"ward-form-container\">\r\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <div>\r\n          <h1 class=\"h3 mb-1\">{{ isEditMode ? 'Edit Ward' : 'Create New Ward' }}</h1>\r\n          <p class=\"text-muted\">{{ isEditMode ? 'Update ward information' : 'Add a new ward to the system' }}</p>\r\n        </div>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"goBack()\">\r\n          <i class=\"bi bi-arrow-left me-1\"></i>\r\n          Back to Wards\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-8\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-house me-2\"></i>\r\n                Ward Information\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <form [formGroup]=\"wardForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"row g-3\">\r\n                  <!-- Basic Information -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"name\" class=\"form-label\">Ward Name <span class=\"text-danger\">*</span></label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"name\"\r\n                      formControlName=\"name\"\r\n                      placeholder=\"Enter ward name\"\r\n                      [class.is-invalid]=\"wardForm.get('name')?.invalid && wardForm.get('name')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('name')?.hasError('required')\">\r\n                      Ward name is required\r\n                    </div>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('name')?.hasError('maxlength')\">\r\n                      Ward name must not exceed 100 characters\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"headquarters\" class=\"form-label\">Headquarters <span class=\"text-danger\">*</span></label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"headquarters\"\r\n                      formControlName=\"headquarters\"\r\n                      placeholder=\"Enter headquarters\"\r\n                      [class.is-invalid]=\"wardForm.get('headquarters')?.invalid && wardForm.get('headquarters')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('headquarters')?.hasError('required')\">\r\n                      Headquarters is required\r\n                    </div>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('headquarters')?.hasError('maxlength')\">\r\n                      Headquarters must not exceed 100 characters\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Location Information -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"regionId\" class=\"form-label\">Region <span class=\"text-danger\">*</span></label>\r\n                    <select \r\n                      class=\"form-select\" \r\n                      id=\"regionId\"\r\n                      formControlName=\"regionId\"\r\n                      (change)=\"onRegionChange()\"\r\n                      [class.is-invalid]=\"wardForm.get('regionId')?.invalid && wardForm.get('regionId')?.touched\">\r\n                      <option value=\"\">Select a region</option>\r\n                      <option *ngFor=\"let region of regions\" [value]=\"region.id\">{{ region.name }}</option>\r\n                    </select>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('regionId')?.hasError('required')\">\r\n                      Region is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"districtId\" class=\"form-label\">District <span class=\"text-danger\">*</span></label>\r\n                    <select \r\n                      class=\"form-select\" \r\n                      id=\"districtId\"\r\n                      formControlName=\"districtId\"\r\n                      [class.is-invalid]=\"wardForm.get('districtId')?.invalid && wardForm.get('districtId')?.touched\">\r\n                      <option value=\"\">Select a district</option>\r\n                      <option *ngFor=\"let district of filteredDistricts\" [value]=\"district.id\">{{ district.name }}</option>\r\n                    </select>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('districtId')?.hasError('required')\">\r\n                      District is required\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Population and Area -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"population\" class=\"form-label\">Population</label>\r\n                    <input \r\n                      type=\"number\" \r\n                      class=\"form-control\" \r\n                      id=\"population\"\r\n                      formControlName=\"population\"\r\n                      placeholder=\"Enter population\"\r\n                      min=\"0\"\r\n                      [class.is-invalid]=\"wardForm.get('population')?.invalid && wardForm.get('population')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('population')?.hasError('min')\">\r\n                      Population must be a positive number\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"areaSqKm\" class=\"form-label\">Area (km²)</label>\r\n                    <input \r\n                      type=\"number\" \r\n                      class=\"form-control\" \r\n                      id=\"areaSqKm\"\r\n                      formControlName=\"areaSqKm\"\r\n                      placeholder=\"Enter area in square kilometers\"\r\n                      min=\"0\"\r\n                      step=\"0.1\"\r\n                      [class.is-invalid]=\"wardForm.get('areaSqKm')?.invalid && wardForm.get('areaSqKm')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('areaSqKm')?.hasError('min')\">\r\n                      Area must be a positive number\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Coordinates -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"latitude\" class=\"form-label\">Latitude</label>\r\n                    <input \r\n                      type=\"number\" \r\n                      class=\"form-control\" \r\n                      id=\"latitude\"\r\n                      formControlName=\"latitude\"\r\n                      placeholder=\"Enter latitude\"\r\n                      step=\"0.000001\"\r\n                      [class.is-invalid]=\"wardForm.get('latitude')?.invalid && wardForm.get('latitude')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('latitude')?.hasError('min') || wardForm.get('latitude')?.hasError('max')\">\r\n                      Latitude must be between -90 and 90\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"longitude\" class=\"form-label\">Longitude</label>\r\n                    <input \r\n                      type=\"number\" \r\n                      class=\"form-control\" \r\n                      id=\"longitude\"\r\n                      formControlName=\"longitude\"\r\n                      placeholder=\"Enter longitude\"\r\n                      step=\"0.000001\"\r\n                      [class.is-invalid]=\"wardForm.get('longitude')?.invalid && wardForm.get('longitude')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('longitude')?.hasError('min') || wardForm.get('longitude')?.hasError('max')\">\r\n                      Longitude must be between -180 and 180\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Executive Officer -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"executiveOfficer\" class=\"form-label\">Executive Officer</label>\r\n                    <input \r\n                      type=\"text\" \r\n                      class=\"form-control\" \r\n                      id=\"executiveOfficer\"\r\n                      formControlName=\"executiveOfficer\"\r\n                      placeholder=\"Enter executive officer name\"\r\n                      [class.is-invalid]=\"wardForm.get('executiveOfficer')?.invalid && wardForm.get('executiveOfficer')?.touched\">\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('executiveOfficer')?.hasError('maxlength')\">\r\n                      Executive officer name must not exceed 100 characters\r\n                    </div>\r\n                  </div>\r\n\r\n                  <!-- Status -->\r\n                  <div class=\"col-md-6\">\r\n                    <label for=\"isActive\" class=\"form-label\">Status</label>\r\n                    <select \r\n                      class=\"form-select\" \r\n                      id=\"isActive\"\r\n                      formControlName=\"isActive\">\r\n                      <option [value]=\"true\">Active</option>\r\n                      <option [value]=\"false\">Inactive</option>\r\n                    </select>\r\n                  </div>\r\n\r\n                  <!-- Description -->\r\n                  <div class=\"col-12\">\r\n                    <label for=\"description\" class=\"form-label\">Description</label>\r\n                    <textarea \r\n                      class=\"form-control\" \r\n                      id=\"description\"\r\n                      formControlName=\"description\"\r\n                      rows=\"3\"\r\n                      placeholder=\"Enter ward description\"\r\n                      [class.is-invalid]=\"wardForm.get('description')?.invalid && wardForm.get('description')?.touched\"></textarea>\r\n                    <div class=\"invalid-feedback\" *ngIf=\"wardForm.get('description')?.hasError('maxlength')\">\r\n                      Description must not exceed 500 characters\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <!-- Form Actions -->\r\n                <div class=\"row mt-4\">\r\n                  <div class=\"col-12\">\r\n                    <div class=\"d-flex gap-2\">\r\n                      <button \r\n                        type=\"submit\" \r\n                        class=\"btn btn-primary\"\r\n                        [disabled]=\"wardForm.invalid || isLoading\">\r\n                        <span *ngIf=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\r\n                        <i *ngIf=\"!isLoading\" class=\"bi bi-check-circle me-1\"></i>\r\n                        {{ isEditMode ? 'Update Ward' : 'Create Ward' }}\r\n                      </button>\r\n                      <button \r\n                        type=\"button\" \r\n                        class=\"btn btn-outline-secondary\"\r\n                        (click)=\"goBack()\">\r\n                        <i class=\"bi bi-x-circle me-1\"></i>\r\n                        Cancel\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Help Panel -->\r\n        <div class=\"col-lg-4\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h6 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-info-circle me-2\"></i>\r\n                Help & Guidelines\r\n              </h6>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <h6>Required Fields</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Ward Name</li>\r\n                <li>• Headquarters</li>\r\n                <li>• Region</li>\r\n                <li>• District</li>\r\n              </ul>\r\n\r\n              <h6 class=\"mt-3\">Optional Fields</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Population</li>\r\n                <li>• Area (km²)</li>\r\n                <li>• Coordinates</li>\r\n                <li>• Executive Officer</li>\r\n                <li>• Description</li>\r\n              </ul>\r\n\r\n              <h6 class=\"mt-3\">Tips</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Select region first to filter districts</li>\r\n                <li>• Use precise coordinates for mapping</li>\r\n                <li>• Keep descriptions concise and informative</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .ward-form-container {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 0 1rem;\r\n    }\r\n\r\n    .card {\r\n      border: none;\r\n      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n    }\r\n\r\n    .card-header {\r\n      background-color: #f8f9fa;\r\n      border-bottom: 1px solid #dee2e6;\r\n    }\r\n\r\n    .form-label {\r\n      font-weight: 500;\r\n      color: #495057;\r\n    }\r\n\r\n    .text-danger {\r\n      color: #dc3545 !important;\r\n    }\r\n\r\n    .btn {\r\n      font-weight: 500;\r\n    }\r\n\r\n    .spinner-border-sm {\r\n      width: 1rem;\r\n      height: 1rem;\r\n    }\r\n  `]\r\n})\r\nexport class WardFormComponent implements OnInit {\r\n  wardForm: FormGroup;\r\n  isEditMode = false;\r\n  isLoading = false;\r\n  wardId: string | null = null;\r\n  \r\n  regions: Region[] = [];\r\n  districts: District[] = [];\r\n  filteredDistricts: District[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private wardService: WardService,\r\n    private districtService: DistrictService,\r\n    private regionService: RegionService,\r\n    private route: ActivatedRoute,\r\n    private router: Router\r\n  ) {\r\n    this.wardForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.maxLength(100)]],\r\n      headquarters: ['', [Validators.required, Validators.maxLength(100)]],\r\n      regionId: [null, [Validators.required]],\r\n      districtId: [null, [Validators.required]],\r\n      population: [0, [Validators.min(0)]],\r\n      areaSqKm: [0, [Validators.min(0)]],\r\n      latitude: [0, [Validators.min(-90), Validators.max(90)]],\r\n      longitude: [0, [Validators.min(-180), Validators.max(180)]],\r\n      executiveOfficer: ['', [Validators.maxLength(100)]],\r\n      description: ['', [Validators.maxLength(500)]],\r\n      isActive: [true]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadRegions();\r\n    this.loadDistricts();\r\n    \r\n    // Check if we're in edit mode\r\n    this.wardId = this.route.snapshot.paramMap.get('uid');\r\n    if (this.wardId) {\r\n      this.isEditMode = true;\r\n      this.loadWard(this.wardId);\r\n    }\r\n  }\r\n\r\n  loadRegions() {\r\n    this.regionService.getAllRegions(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.regions = response.data || [];\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading regions:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadDistricts() {\r\n    console.log('Loading districts...');\r\n    this.districtService.getAllDistricts(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.districts = response.data || [];\r\n        this.filteredDistricts = this.districts;\r\n        console.log('Loaded districts:', this.districts);\r\n        console.log('Sample district structure:', this.districts[0]);\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading districts:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadWard(uid: string) {\r\n    this.isLoading = true;\r\n    console.log('Loading ward with UID:', uid);\r\n    this.wardService.getWardByUid(uid).subscribe({\r\n      next: (response) => {\r\n        this.isLoading = false;\r\n        console.log('Ward API Response:', response);\r\n        if (response.status) {\r\n          const ward = response.data;\r\n          console.log('Ward data:', ward);\r\n          this.wardForm.patchValue({\r\n            name: ward.name,\r\n            headquarters: ward.headquarters,\r\n            regionId: ward.regionId,\r\n            districtId: ward.districtId,\r\n            population: ward.population,\r\n            areaSqKm: ward.areaSqKm,\r\n            latitude: ward.latitude,\r\n            longitude: ward.longitude,\r\n            executiveOfficer: ward.executiveOfficer,\r\n            description: ward.description,\r\n            isActive: ward.isActive\r\n          });\r\n          \r\n          // Filter districts based on selected region\r\n          this.onRegionChange();\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.isLoading = false;\r\n        console.error('Error loading ward:', error);\r\n        console.error('Error status:', error.status);\r\n        console.error('Error details:', error.error);\r\n        alert(`Error loading ward: ${error.error?.message || error.message || 'Unknown error'}`);\r\n        this.goBack();\r\n      }\r\n    });\r\n  }\r\n\r\n  onRegionChange() {\r\n    const selectedRegionId = this.wardForm.get('regionId')?.value;\r\n    console.log('Region changed to:', selectedRegionId);\r\n    \r\n    if (selectedRegionId) {\r\n      // Find the selected region to get its UID\r\n      const selectedRegion = this.regions.find(r => r.id === Number(selectedRegionId));\r\n      console.log('Selected region:', selectedRegion);\r\n      \r\n      if (selectedRegion) {\r\n        // Load districts for this specific region using the API\r\n        this.districtService.getDistrictsByRegionUid(selectedRegion.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredDistricts = response.data || [];\r\n            console.log('Loaded districts for region', selectedRegion.name, ':', this.filteredDistricts);\r\n            \r\n            // Reset district selection if current selection is not in filtered list\r\n            const currentDistrictId = this.wardForm.get('districtId')?.value;\r\n            if (currentDistrictId && !this.filteredDistricts.find(d => d.id === currentDistrictId)) {\r\n              this.wardForm.patchValue({ districtId: null });\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading districts for region:', error);\r\n            this.filteredDistricts = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // No region selected, show all districts\r\n      this.filteredDistricts = this.districts;\r\n      console.log('No region selected, showing all districts:', this.filteredDistricts);\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.wardForm.valid) {\r\n      this.isLoading = true;\r\n      const formData = this.wardForm.value;\r\n      \r\n      if (this.isEditMode && this.wardId) {\r\n        // Update existing ward\r\n        const updateRequest: UpdateWardRequest = {\r\n          name: formData.name,\r\n          headquarters: formData.headquarters,\r\n          districtId: formData.districtId,\r\n          population: formData.population,\r\n          areaSqKm: formData.areaSqKm,\r\n          latitude: formData.latitude,\r\n          longitude: formData.longitude,\r\n          executiveOfficer: formData.executiveOfficer,\r\n          description: formData.description,\r\n          isActive: formData.isActive\r\n        };\r\n\r\n        this.wardService.updateWard(this.wardId, updateRequest).subscribe({\r\n          next: (response) => {\r\n            this.isLoading = false;\r\n            if (response.status) {\r\n              alert('Ward updated successfully!');\r\n              this.goBack();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            this.isLoading = false;\r\n            console.error('Error updating ward:', error);\r\n            alert(`Error updating ward: ${error.error?.message || error.message || 'Unknown error'}`);\r\n          }\r\n        });\r\n      } else {\r\n        // Create new ward\r\n        const createRequest: CreateWardRequest = {\r\n          name: formData.name,\r\n          headquarters: formData.headquarters,\r\n          districtId: formData.districtId,\r\n          population: formData.population,\r\n          areaSqKm: formData.areaSqKm,\r\n          latitude: formData.latitude,\r\n          longitude: formData.longitude,\r\n          executiveOfficer: formData.executiveOfficer,\r\n          description: formData.description,\r\n          isActive: formData.isActive\r\n        };\r\n\r\n        this.wardService.createWard(createRequest).subscribe({\r\n          next: (response) => {\r\n            this.isLoading = false;\r\n            if (response.status) {\r\n              alert('Ward created successfully!');\r\n              this.goBack();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            this.isLoading = false;\r\n            console.error('Error creating ward:', error);\r\n            alert(`Error creating ward: ${error.error?.message || error.message || 'Unknown error'}`);\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      // Mark all fields as touched to show validation errors\r\n      Object.keys(this.wardForm.controls).forEach(key => {\r\n        this.wardForm.get(key)?.markAsTouched();\r\n      });\r\n    }\r\n  }\r\n\r\n  goBack() {\r\n    this.router.navigate(['/wards']);\r\n  }\r\n}\r\n"],"names":["CommonModule","RouterModule","Validators","ReactiveFormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","region_r1","id","ɵɵadvance","ɵɵtextInterpolate","name","district_r2","ɵɵelement","WardFormComponent","constructor","fb","wardService","districtService","regionService","route","router","isEditMode","isLoading","wardId","regions","districts","filteredDistricts","wardForm","group","required","maxLength","headquarters","regionId","districtId","population","min","areaSqKm","latitude","max","longitude","executiveOfficer","description","isActive","ngOnInit","loadRegions","loadDistricts","snapshot","paramMap","get","loadWard","getAllRegions","subscribe","next","response","data","error","console","log","getAllDistricts","uid","getWardByUid","status","ward","patchValue","onRegionChange","alert","message","goBack","selectedRegionId","value","selectedRegion","find","r","Number","getDistrictsByRegionUid","currentDistrictId","d","onSubmit","valid","formData","updateRequest","updateWard","createRequest","createWard","Object","keys","controls","forEach","key","markAsTouched","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","WardService","i3","DistrictService","i4","RegionService","i5","ActivatedRoute","Router","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","WardFormComponent_Template","rf","ctx","ɵɵlistener","WardFormComponent_Template_button_click_7_listener","WardFormComponent_Template_form_ngSubmit_18_listener","ɵɵtemplate","WardFormComponent_div_26_Template","WardFormComponent_div_27_Template","WardFormComponent_div_34_Template","WardFormComponent_div_35_Template","WardFormComponent_Template_select_change_41_listener","WardFormComponent_option_44_Template","WardFormComponent_div_45_Template","WardFormComponent_option_54_Template","WardFormComponent_div_55_Template","WardFormComponent_div_60_Template","WardFormComponent_div_65_Template","WardFormComponent_div_70_Template","WardFormComponent_div_75_Template","WardFormComponent_div_80_Template","WardFormComponent_div_93_Template","WardFormComponent_span_98_Template","WardFormComponent_i_99_Template","WardFormComponent_Template_button_click_101_listener","ɵɵclassProp","tmp_3_0","invalid","touched","tmp_4_0","hasError","tmp_5_0","tmp_6_0","tmp_7_0","tmp_8_0","tmp_9_0","tmp_11_0","tmp_12_0","tmp_14_0","tmp_15_0","tmp_16_0","tmp_17_0","tmp_18_0","tmp_19_0","tmp_20_0","tmp_21_0","tmp_22_0","tmp_23_0","tmp_24_0","tmp_27_0","tmp_28_0","ɵɵtextInterpolate1","i6","NgForOf","NgIf","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","NumberValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","MinValidator","FormGroupDirective","FormControlName","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}