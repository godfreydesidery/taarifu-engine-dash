{"version":3,"file":"src_app_features_hamlets_hamlet-form_hamlet-form_component_ts.js","mappings":"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","sources":["./src/app/core/services/toast.service.ts","./src/app/features/hamlets/hamlet-form/hamlet-form.component.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject } from 'rxjs';\r\n\r\nexport interface Toast {\r\n  id: string;\r\n  type: 'success' | 'error' | 'warning' | 'info';\r\n  title: string;\r\n  message: string;\r\n  duration?: number;\r\n  dismissible?: boolean;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ToastService {\r\n  private toastsSubject = new BehaviorSubject<Toast[]>([]);\r\n  public toasts$ = this.toastsSubject.asObservable();\r\n\r\n  private showToast(type: Toast['type'], title: string, message: string, duration: number = 3000, dismissible: boolean = true): void {\r\n    const toast: Toast = {\r\n      id: this.generateId(),\r\n      type,\r\n      title,\r\n      message,\r\n      duration,\r\n      dismissible\r\n    };\r\n\r\n    const currentToasts = this.toastsSubject.value;\r\n    this.toastsSubject.next([...currentToasts, toast]);\r\n\r\n    // Auto remove toast after duration\r\n    if (duration > 0) {\r\n      setTimeout(() => {\r\n        this.removeToast(toast.id);\r\n      }, duration);\r\n    }\r\n  }\r\n\r\n  success(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('success', title, message, duration, dismissible);\r\n  }\r\n\r\n  error(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('error', title, message, duration, dismissible);\r\n  }\r\n\r\n  warning(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('warning', title, message, duration, dismissible);\r\n  }\r\n\r\n  info(title: string, message: string, duration?: number, dismissible?: boolean): void {\r\n    this.showToast('info', title, message, duration, dismissible);\r\n  }\r\n\r\n  removeToast(id: string): void {\r\n    const currentToasts = this.toastsSubject.value;\r\n    this.toastsSubject.next(currentToasts.filter(toast => toast.id !== id));\r\n  }\r\n\r\n  clearAll(): void {\r\n    this.toastsSubject.next([]);\r\n  }\r\n\r\n  private generateId(): string {\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { HamletService } from '../../../core/services/hamlet.service';\r\nimport { RegionService } from '../../../core/services/region.service';\r\nimport { DistrictService } from '../../../core/services/district.service';\r\nimport { WardService } from '../../../core/services/ward.service';\r\nimport { VillageService } from '../../../core/services/village.service';\r\nimport { ToastService } from '../../../core/services/toast.service';\r\nimport { Region } from '../../../core/models/region.model';\r\nimport { District } from '../../../core/models/district.model';\r\nimport { Ward } from '../../../core/models/ward.model';\r\nimport { Village } from '../../../core/models/village.model';\r\nimport { CreateHamletRequest, UpdateHamletRequest } from '../../../core/models/hamlet.model';\r\n\r\n@Component({\r\n  selector: 'app-hamlet-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  template: `\r\n    <div class=\"container-fluid\">\r\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <div>\r\n          <h1 class=\"h3 mb-1\">{{ isEditMode ? 'Edit Hamlet' : 'Create Hamlet' }}</h1>\r\n          <p class=\"text-muted\">{{ isEditMode ? 'Update hamlet information' : 'Add a new hamlet to the system' }}</p>\r\n        </div>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"goBack()\">\r\n          <i class=\"bi bi-arrow-left me-1\"></i>\r\n          Back\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-8\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-house-door-fill me-2\"></i>\r\n                Hamlet Information\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <form [formGroup]=\"hamletForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"name\" class=\"form-label\">Hamlet Name <span class=\"text-danger\">*</span></label>\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        id=\"name\"\r\n                        formControlName=\"name\"\r\n                        [class.is-invalid]=\"hamletForm.get('name')?.invalid && hamletForm.get('name')?.touched\"\r\n                        placeholder=\"Enter hamlet name\">\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('name')?.hasError('required')\">\r\n                        Hamlet name is required\r\n                      </div>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('name')?.hasError('maxlength')\">\r\n                        Hamlet name must not exceed 100 characters\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"regionId\" class=\"form-label\">Region <span class=\"text-danger\">*</span></label>\r\n                      <select \r\n                        class=\"form-select\" \r\n                        id=\"regionId\"\r\n                        formControlName=\"regionId\"\r\n                        [class.is-invalid]=\"hamletForm.get('regionId')?.invalid && hamletForm.get('regionId')?.touched\"\r\n                        (change)=\"onRegionChange()\">\r\n                        <option value=\"\">Select a region</option>\r\n                        <option *ngFor=\"let region of regions\" [value]=\"region.id\">{{ region.name }}</option>\r\n                      </select>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('regionId')?.hasError('required')\">\r\n                        Region is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"districtId\" class=\"form-label\">District <span class=\"text-danger\">*</span></label>\r\n                      <select \r\n                        class=\"form-select\" \r\n                        id=\"districtId\"\r\n                        formControlName=\"districtId\"\r\n                        [class.is-invalid]=\"hamletForm.get('districtId')?.invalid && hamletForm.get('districtId')?.touched\"\r\n                        (change)=\"onDistrictChange()\">\r\n                        <option value=\"\">Select a district</option>\r\n                        <option *ngFor=\"let district of filteredDistricts\" [value]=\"district.id\">{{ district.name }}</option>\r\n                      </select>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('districtId')?.hasError('required')\">\r\n                        District is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"wardId\" class=\"form-label\">Ward <span class=\"text-danger\">*</span></label>\r\n                      <select \r\n                        class=\"form-select\" \r\n                        id=\"wardId\"\r\n                        formControlName=\"wardId\"\r\n                        [class.is-invalid]=\"hamletForm.get('wardId')?.invalid && hamletForm.get('wardId')?.touched\"\r\n                        (change)=\"onWardChange()\">\r\n                        <option value=\"\">Select a ward</option>\r\n                        <option *ngFor=\"let ward of filteredWards\" [value]=\"ward.id\">{{ ward.name }}</option>\r\n                      </select>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('wardId')?.hasError('required')\">\r\n                        Ward is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"villageId\" class=\"form-label\">Village <span class=\"text-danger\">*</span></label>\r\n                      <select \r\n                        class=\"form-select\" \r\n                        id=\"villageId\"\r\n                        formControlName=\"villageId\"\r\n                        [class.is-invalid]=\"hamletForm.get('villageId')?.invalid && hamletForm.get('villageId')?.touched\">\r\n                        <option value=\"\">Select a village</option>\r\n                        <option *ngFor=\"let village of filteredVillages\" [value]=\"village.id\">{{ village.name }}</option>\r\n                      </select>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('villageId')?.hasError('required')\">\r\n                        Village is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"headquarters\" class=\"form-label\">Headquarters <span class=\"text-danger\">*</span></label>\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        id=\"headquarters\"\r\n                        formControlName=\"headquarters\"\r\n                        [class.is-invalid]=\"hamletForm.get('headquarters')?.invalid && hamletForm.get('headquarters')?.touched\"\r\n                        placeholder=\"Enter headquarters\">\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('headquarters')?.hasError('required')\">\r\n                        Headquarters is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"population\" class=\"form-label\">Population</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-control\" \r\n                        id=\"population\"\r\n                        formControlName=\"population\"\r\n                        min=\"0\"\r\n                        placeholder=\"Enter population\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"areaSqKm\" class=\"form-label\">Area (km²)</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-control\" \r\n                        id=\"areaSqKm\"\r\n                        formControlName=\"areaSqKm\"\r\n                        min=\"0\"\r\n                        step=\"0.01\"\r\n                        placeholder=\"Enter area in square kilometers\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"latitude\" class=\"form-label\">Latitude</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-control\" \r\n                        id=\"latitude\"\r\n                        formControlName=\"latitude\"\r\n                        step=\"0.000001\"\r\n                        placeholder=\"Enter latitude\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"longitude\" class=\"form-label\">Longitude</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-control\" \r\n                        id=\"longitude\"\r\n                        formControlName=\"longitude\"\r\n                        step=\"0.000001\"\r\n                        placeholder=\"Enter longitude\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"executiveOfficer\" class=\"form-label\">Executive Officer</label>\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        id=\"executiveOfficer\"\r\n                        formControlName=\"executiveOfficer\"\r\n                        placeholder=\"Enter executive officer name\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label class=\"form-label\">Status</label>\r\n                      <div class=\"form-check form-switch\">\r\n                        <input \r\n                          class=\"form-check-input\" \r\n                          type=\"checkbox\" \r\n                          id=\"isActive\"\r\n                          formControlName=\"isActive\">\r\n                        <label class=\"form-check-label\" for=\"isActive\">\r\n                          Active\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                  <label for=\"description\" class=\"form-label\">Description</label>\r\n                  <textarea \r\n                    class=\"form-control\" \r\n                    id=\"description\"\r\n                    formControlName=\"description\"\r\n                    rows=\"3\"\r\n                    placeholder=\"Enter hamlet description\"></textarea>\r\n                </div>\r\n\r\n                <div class=\"d-flex justify-content-end gap-2\">\r\n                  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"goBack()\">\r\n                    Cancel\r\n                  </button>\r\n                  <button \r\n                    type=\"submit\" \r\n                    class=\"btn btn-primary\" \r\n                    [disabled]=\"hamletForm.invalid || isLoading\">\r\n                    <span *ngIf=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\r\n                    {{ isLoading ? 'Saving...' : (isEditMode ? 'Update Hamlet' : 'Create Hamlet') }}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Help Panel -->\r\n        <div class=\"col-lg-4\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h6 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-info-circle me-2\"></i>\r\n                Help & Guidelines\r\n              </h6>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <h6>Required Fields</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Hamlet Name</li>\r\n                <li>• Region</li>\r\n                <li>• District</li>\r\n                <li>• Ward</li>\r\n                <li>• Village</li>\r\n                <li>• Headquarters</li>\r\n              </ul>\r\n\r\n              <h6 class=\"mt-3\">Optional Fields</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Population</li>\r\n                <li>• Area (km²)</li>\r\n                <li>• Coordinates (Latitude/Longitude)</li>\r\n                <li>• Executive Officer</li>\r\n                <li>• Description</li>\r\n              </ul>\r\n\r\n              <h6 class=\"mt-3\">Tips</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Select location hierarchy in order</li>\r\n                <li>• Use official hamlet names</li>\r\n                <li>• Headquarters should be the main settlement</li>\r\n                <li>• Use precise coordinates for mapping</li>\r\n                <li>• Population should be current estimates</li>\r\n                <li>• Keep descriptions concise and informative</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .container-fluid {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 0 1rem;\r\n    }\r\n\r\n    .card {\r\n      border: none;\r\n      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n    }\r\n\r\n    .card-header {\r\n      background-color: #f8f9fa;\r\n      border-bottom: 1px solid #dee2e6;\r\n    }\r\n\r\n    .form-label {\r\n      font-weight: 500;\r\n      color: #495057;\r\n    }\r\n\r\n    .text-danger {\r\n      color: #dc3545 !important;\r\n    }\r\n  `]\r\n})\r\nexport class HamletFormComponent implements OnInit {\r\n  hamletForm: FormGroup;\r\n  isEditMode = false;\r\n  hamletId: string | null = null;\r\n  isLoading = false;\r\n  regions: Region[] = [];\r\n  districts: District[] = [];\r\n  wards: Ward[] = [];\r\n  villages: Village[] = [];\r\n  filteredDistricts: District[] = [];\r\n  filteredWards: Ward[] = [];\r\n  filteredVillages: Village[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private hamletService: HamletService,\r\n    private regionService: RegionService,\r\n    private districtService: DistrictService,\r\n    private wardService: WardService,\r\n    private villageService: VillageService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private toastService: ToastService\r\n  ) {\r\n    this.hamletForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.maxLength(100)]],\r\n      regionId: [null, [Validators.required]],\r\n      districtId: [null, [Validators.required]],\r\n      wardId: [null, [Validators.required]],\r\n      villageId: [null, [Validators.required]],\r\n      headquarters: ['', [Validators.required, Validators.maxLength(100)]],\r\n      population: [null, [Validators.min(0)]],\r\n      areaSqKm: [null, [Validators.min(0)]],\r\n      latitude: [null],\r\n      longitude: [null],\r\n      executiveOfficer: ['', [Validators.maxLength(100)]],\r\n      description: ['', [Validators.maxLength(500)]],\r\n      isActive: [true]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadRegions();\r\n    this.loadDistricts();\r\n    this.loadWards();\r\n    this.loadVillages();\r\n    \r\n    this.route.paramMap.subscribe(params => {\r\n      this.hamletId = params.get('uid');\r\n      if (this.hamletId) {\r\n        this.isEditMode = true;\r\n        this.loadHamlet(this.hamletId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadRegions() {\r\n    this.regionService.getAllRegions(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.regions = response.data || [];\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading regions:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadDistricts() {\r\n    this.districtService.getAllDistricts(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.districts = response.data || [];\r\n        this.filteredDistricts = this.districts;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading districts:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadWards() {\r\n    this.wardService.getAllWards(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.wards = response.data || [];\r\n        this.filteredWards = this.wards;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading wards:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadVillages() {\r\n    this.villageService.getAllVillages(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.villages = response.data || [];\r\n        this.filteredVillages = this.villages;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading villages:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadHamlet(uid: string) {\r\n    this.isLoading = true;\r\n    this.hamletService.getHamletByUid(uid).subscribe({\r\n      next: (response) => {\r\n        this.isLoading = false;\r\n        if (response.status) {\r\n          const hamlet = response.data;\r\n          this.hamletForm.patchValue({\r\n            name: hamlet.name,\r\n            regionId: hamlet.regionId,\r\n            districtId: hamlet.districtId,\r\n            wardId: hamlet.wardId,\r\n            villageId: hamlet.villageId,\r\n            headquarters: hamlet.headquarters,\r\n            population: hamlet.population,\r\n            areaSqKm: hamlet.areaSqKm,\r\n            latitude: hamlet.latitude,\r\n            longitude: hamlet.longitude,\r\n            executiveOfficer: hamlet.executiveOfficer,\r\n            description: hamlet.description,\r\n            isActive: hamlet.isActive\r\n          });\r\n          \r\n          // Filter cascading dropdowns based on selected values\r\n          this.onRegionChange();\r\n          this.onDistrictChange();\r\n          this.onWardChange();\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.isLoading = false;\r\n        console.error('Error loading hamlet:', error);\r\n        this.toastService.error('Error Loading Hamlet', error.error?.message || error.message || 'Unknown error');\r\n        this.goBack();\r\n      }\r\n    });\r\n  }\r\n\r\n  onRegionChange() {\r\n    const selectedRegionId = this.hamletForm.get('regionId')?.value;\r\n    \r\n    if (selectedRegionId) {\r\n      const selectedRegion = this.regions.find(r => r.id === Number(selectedRegionId));\r\n      \r\n      if (selectedRegion) {\r\n        this.districtService.getDistrictsByRegionUid(selectedRegion.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredDistricts = response.data || [];\r\n            \r\n            // Reset district selection if current selection is not in filtered list\r\n            const currentDistrictId = this.hamletForm.get('districtId')?.value;\r\n            if (currentDistrictId && !this.filteredDistricts.find(d => d.id === currentDistrictId)) {\r\n              this.hamletForm.patchValue({ districtId: null });\r\n              this.onDistrictChange();\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading districts for region:', error);\r\n            this.filteredDistricts = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.filteredDistricts = this.districts;\r\n      this.hamletForm.patchValue({ districtId: null });\r\n      this.onDistrictChange();\r\n    }\r\n  }\r\n\r\n  onDistrictChange() {\r\n    const selectedDistrictId = this.hamletForm.get('districtId')?.value;\r\n    \r\n    if (selectedDistrictId) {\r\n      const selectedDistrict = this.districts.find(d => d.id === Number(selectedDistrictId));\r\n      \r\n      if (selectedDistrict) {\r\n        this.wardService.getWardsByDistrictUid(selectedDistrict.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredWards = response.data || [];\r\n            \r\n            // Reset ward selection if current selection is not in filtered list\r\n            const currentWardId = this.hamletForm.get('wardId')?.value;\r\n            if (currentWardId && !this.filteredWards.find(w => w.id === currentWardId)) {\r\n              this.hamletForm.patchValue({ wardId: null });\r\n              this.onWardChange();\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading wards for district:', error);\r\n            this.filteredWards = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.filteredWards = this.wards;\r\n      this.hamletForm.patchValue({ wardId: null });\r\n      this.onWardChange();\r\n    }\r\n  }\r\n\r\n  onWardChange() {\r\n    const selectedWardId = this.hamletForm.get('wardId')?.value;\r\n    \r\n    if (selectedWardId) {\r\n      const selectedWard = this.wards.find(w => w.id === Number(selectedWardId));\r\n      \r\n      if (selectedWard) {\r\n        this.villageService.getVillagesByWardUid(selectedWard.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredVillages = response.data || [];\r\n            \r\n            // Reset village selection if current selection is not in filtered list\r\n            const currentVillageId = this.hamletForm.get('villageId')?.value;\r\n            if (currentVillageId && !this.filteredVillages.find(v => v.id === currentVillageId)) {\r\n              this.hamletForm.patchValue({ villageId: null });\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading villages for ward:', error);\r\n            this.filteredVillages = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.filteredVillages = this.villages;\r\n      this.hamletForm.patchValue({ villageId: null });\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.hamletForm.valid) {\r\n      this.isLoading = true;\r\n      const formData = this.hamletForm.value;\r\n\r\n      if (this.isEditMode && this.hamletId) {\r\n        const updateRequest: UpdateHamletRequest = {\r\n          name: formData.name,\r\n          villageId: formData.villageId,\r\n          headquarters: formData.headquarters,\r\n          population: formData.population,\r\n          areaSqKm: formData.areaSqKm,\r\n          latitude: formData.latitude,\r\n          longitude: formData.longitude,\r\n          executiveOfficer: formData.executiveOfficer,\r\n          description: formData.description,\r\n          isActive: formData.isActive\r\n        };\r\n\r\n        this.hamletService.updateHamlet(this.hamletId, updateRequest).subscribe({\r\n          next: (response) => {\r\n            this.isLoading = false;\r\n            if (response.status) {\r\n              this.toastService.success('Hamlet Updated', 'Hamlet updated successfully!');\r\n              this.goBack();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            this.isLoading = false;\r\n            console.error('Error updating hamlet:', error);\r\n            this.toastService.error('Error Updating Hamlet', error.error?.message || error.message || 'Unknown error');\r\n          }\r\n        });\r\n      } else {\r\n        const createRequest: CreateHamletRequest = {\r\n          name: formData.name,\r\n          villageId: formData.villageId,\r\n          headquarters: formData.headquarters,\r\n          population: formData.population,\r\n          areaSqKm: formData.areaSqKm,\r\n          latitude: formData.latitude,\r\n          longitude: formData.longitude,\r\n          executiveOfficer: formData.executiveOfficer,\r\n          description: formData.description,\r\n          isActive: formData.isActive\r\n        };\r\n\r\n        this.hamletService.createHamlet(createRequest).subscribe({\r\n          next: (response) => {\r\n            this.isLoading = false;\r\n            if (response.status) {\r\n              this.toastService.success('Hamlet Created', 'Hamlet created successfully!');\r\n              this.goBack();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            this.isLoading = false;\r\n            console.error('Error creating hamlet:', error);\r\n            this.toastService.error('Error Creating Hamlet', error.error?.message || error.message || 'Unknown error');\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  goBack() {\r\n    this.router.navigate(['/hamlets']);\r\n  }\r\n}\r\n"],"names":["BehaviorSubject","ToastService","constructor","toastsSubject","toasts$","asObservable","showToast","type","title","message","duration","dismissible","toast","id","generateId","currentToasts","value","next","setTimeout","removeToast","success","error","warning","info","filter","clearAll","Math","random","toString","substr","factory","ɵfac","providedIn","CommonModule","Validators","ReactiveFormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","region_r1","ɵɵadvance","ɵɵtextInterpolate","name","district_r2","ward_r3","village_r4","ɵɵelement","HamletFormComponent","fb","hamletService","regionService","districtService","wardService","villageService","router","route","toastService","isEditMode","hamletId","isLoading","regions","districts","wards","villages","filteredDistricts","filteredWards","filteredVillages","hamletForm","group","required","maxLength","regionId","districtId","wardId","villageId","headquarters","population","min","areaSqKm","latitude","longitude","executiveOfficer","description","isActive","ngOnInit","loadRegions","loadDistricts","loadWards","loadVillages","paramMap","subscribe","params","get","loadHamlet","getAllRegions","response","data","console","getAllDistricts","getAllWards","getAllVillages","uid","getHamletByUid","status","hamlet","patchValue","onRegionChange","onDistrictChange","onWardChange","goBack","selectedRegionId","selectedRegion","find","r","Number","getDistrictsByRegionUid","currentDistrictId","d","selectedDistrictId","selectedDistrict","getWardsByDistrictUid","currentWardId","w","selectedWardId","selectedWard","getVillagesByWardUid","currentVillageId","v","onSubmit","valid","formData","updateRequest","updateHamlet","createRequest","createHamlet","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","HamletService","i3","RegionService","i4","DistrictService","i5","WardService","i6","VillageService","i7","Router","ActivatedRoute","i8","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","HamletFormComponent_Template","rf","ctx","ɵɵlistener","HamletFormComponent_Template_button_click_7_listener","HamletFormComponent_Template_form_ngSubmit_18_listener","ɵɵtemplate","HamletFormComponent_div_27_Template","HamletFormComponent_div_28_Template","HamletFormComponent_Template_select_change_35_listener","HamletFormComponent_option_38_Template","HamletFormComponent_div_39_Template","HamletFormComponent_Template_select_change_47_listener","HamletFormComponent_option_50_Template","HamletFormComponent_div_51_Template","HamletFormComponent_Template_select_change_58_listener","HamletFormComponent_option_61_Template","HamletFormComponent_div_62_Template","HamletFormComponent_option_73_Template","HamletFormComponent_div_74_Template","HamletFormComponent_div_82_Template","HamletFormComponent_Template_button_click_124_listener","HamletFormComponent_span_127_Template","ɵɵclassProp","tmp_3_0","invalid","touched","tmp_4_0","hasError","tmp_5_0","tmp_6_0","tmp_8_0","tmp_9_0","tmp_11_0","tmp_12_0","tmp_14_0","tmp_15_0","tmp_17_0","tmp_18_0","tmp_19_0","ɵɵtextInterpolate1","i9","NgForOf","NgIf","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","NumberValueAccessor","CheckboxControlValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","MinValidator","FormGroupDirective","FormControlName","styles"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}