{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;AAC8D;;;AA2BxD,MAAOC,gBAAgB;EAG3BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,2BAA2B;EAEf;EAEvC;EACAC,eAAeA,CAACC,OAA+B;IAC7C,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAA0B,GAAG,IAAI,CAACH,OAAO,6BAA6B,EAAEE,OAAO,CAAC;EACvG;EAEA;EACAE,eAAeA,CAACC,GAAW,EAAEH,OAA+B;IAC1D,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAA0B,GAAG,IAAI,CAACN,OAAO,mCAAmCK,GAAG,EAAE,EAAEH,OAAO,CAAC;EACjH;EAEA;EACAK,iBAAiBA,CAACF,GAAW;IAC3B,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,mCAAmCK,GAAG,EAAE,CAAC;EACrG;EAEA;EACAI,sBAAsBA,CAACC,QAAgB;IACrC,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,wCAAwCU,QAAQ,EAAE,CAAC;EAC/G;EAEA;EACAC,mBAAmBA,CAACC,KAAa;IAC/B,OAAO,IAAI,CAACb,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,qCAAqCY,KAAK,EAAE,CAAC;EACzG;EAEA;EACAC,gBAAgBA,CACdC,IAAA,GAAe,CAAC,EAChBC,IAAA,GAAe,EAAE,EACjBC,MAAA,GAAiB,WAAW,EAC5BC,OAAA,GAAkB,MAAM;IAExB,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,6BAA6B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACvG;EAEA;EACAG,iBAAiBA,CAAChB,GAAW;IAC3B,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAA0B,GAAG,IAAI,CAACN,OAAO,mCAAmCK,GAAG,WAAW,EAAE,EAAE,CAAC;EACrH;EAEA;EACAiB,mBAAmBA,CAACjB,GAAW;IAC7B,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAA0B,GAAG,IAAI,CAACN,OAAO,mCAAmCK,GAAG,aAAa,EAAE,EAAE,CAAC;EACvH;EAEA;EACAkB,gBAAgBA,CAAClB,GAAW;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAA0B,GAAG,IAAI,CAACN,OAAO,mCAAmCK,GAAG,UAAU,EAAE,EAAE,CAAC;EACpH;EAEA;EACAmB,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACzB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,mCAAmC,CAAC;EAClG;EAEA;EACAyB,mBAAmBA,CAACf,QAAgB;IAClC,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAkC,GAAG,IAAI,CAACR,OAAO,8CAA8CU,QAAQ,EAAE,CAAC;EAChI;EAEA;EACAgB,gBAAgBA,CAACd,KAAa;IAC5B,OAAO,IAAI,CAACb,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,2CAA2CY,KAAK,EAAE,CAAC;EACvH;EAEA;EACAe,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAAC5B,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,mCAAmC,CAAC;EAClG;EAEA;EACA4B,gBAAgBA,CACdC,KAAa,EACbf,IAAA,GAAe,CAAC,EAChBC,IAAA,GAAe,EAAE,EACjBC,MAAA,GAAiB,WAAW,EAC5BC,OAAA,GAAkB,MAAM;IAExB,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,GAAG,EAAEU,KAAK,CAAC,CACfV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,oCAAoC,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC9G;EAEA;EACAY,qBAAqBA,CACnBC,MAA2C,EAC3CjB,IAAA,GAAe,CAAC,EAChBC,IAAA,GAAe,EAAE,EACjBC,MAAA,GAAiB,WAAW,EAC5BC,OAAA,GAAkB,MAAM;IAExB,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,sCAAsC+B,MAAM,EAAE,EAAE;MAAEb;IAAM,CAAE,CAAC;EACxH;EAEA;EACAc,sBAAsBA,CAAC3B,GAAW,EAAEH,OAAA,GAAkD,EAAE;IACtF;IACA,MAAM+B,WAAW,GAAG/B,OAAO,CAAC+B,WAAW,IAAI,IAAI,CAACC,sBAAsB,EAAE;IAExE,MAAMC,YAAY,GAAkC;MAClDF,WAAW;MACXG,qBAAqB,EAAElC,OAAO,CAACkC,qBAAqB,IAAI,IAAI;MAC5DC,qBAAqB,EAAEnC,OAAO,CAACmC,qBAAqB,IAAI,IAAI;MAC5DC,MAAM,EAAEpC,OAAO,CAACoC;KACjB;IAED,OAAO,IAAI,CAACvC,IAAI,CAACO,GAAG,CAAiC,GAAG,IAAI,CAACN,OAAO,mCAAmCK,GAAG,iBAAiB,EAAE8B,YAAY,CAAC;EAC5I;EAEA;EACAI,uBAAuBA,CAAClC,GAAW,EAAEH,OAAuC;IAC1E,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAkC,GAAG,IAAI,CAACN,OAAO,mCAAmCK,GAAG,kBAAkB,EAAEH,OAAO,CAAC;EACzI;EAEA;EACAsC,kBAAkBA,CAACnC,GAAW,EAAEH,OAAA,GAAkD,EAAE;IAClF;IACA,MAAM+B,WAAW,GAAG/B,OAAO,CAAC+B,WAAW,IAAI,IAAI,CAACC,sBAAsB,EAAE;IAExE,MAAMC,YAAY,GAAkC;MAClDF,WAAW;MACXG,qBAAqB,EAAElC,OAAO,CAACkC,qBAAqB,IAAI,IAAI;MAC5DC,qBAAqB,EAAEnC,OAAO,CAACmC,qBAAqB,IAAI,IAAI;MAC5DC,MAAM,EAAEpC,OAAO,CAACoC;KACjB;IAED,OAAO,IAAI,CAACvC,IAAI,CAACO,GAAG,CAAiC,GAAG,IAAI,CAACN,OAAO,mCAAmCK,GAAG,uBAAuB,EAAE8B,YAAY,CAAC;EAClJ;EAEA;;;EAGQD,sBAAsBA,CAAA;IAC5B,MAAMO,SAAS,GAAG,4BAA4B;IAC9C,MAAMC,SAAS,GAAG,4BAA4B;IAC9C,MAAMC,OAAO,GAAG,YAAY;IAC5B,MAAMC,OAAO,GAAG,4BAA4B;IAE5C;IACA,IAAIC,QAAQ,GAAG,EAAE;IACjBA,QAAQ,IAAIJ,SAAS,CAACK,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGP,SAAS,CAACQ,MAAM,CAAC,CAAC;IACnEJ,QAAQ,IAAIH,SAAS,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGN,SAAS,CAACO,MAAM,CAAC,CAAC;IACnEJ,QAAQ,IAAIF,OAAO,CAACG,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGL,OAAO,CAACM,MAAM,CAAC,CAAC;IAC/DJ,QAAQ,IAAID,OAAO,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,OAAO,CAACK,MAAM,CAAC,CAAC;IAE/D;IACA,MAAMC,QAAQ,GAAGT,SAAS,GAAGC,SAAS,GAAGC,OAAO,GAAGC,OAAO;IAC1D,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,EAAE,EAAEA,CAAC,EAAE,EAAE;MAC3BN,QAAQ,IAAIK,QAAQ,CAACJ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGE,QAAQ,CAACD,MAAM,CAAC,CAAC;IACnE;IAEA;IACA,OAAOJ,QAAQ,CAACO,KAAK,CAAC,EAAE,CAAC,CAACC,IAAI,CAAC,MAAMP,IAAI,CAACE,MAAM,EAAE,GAAG,GAAG,CAAC,CAACM,IAAI,CAAC,EAAE,CAAC;EACpE;;;uCA/KWzD,gBAAgB,EAAA0D,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAhB5D,gBAAgB;MAAA8D,OAAA,EAAhB9D,gBAAgB,CAAA+D,IAAA;MAAAC,UAAA,EAFf;IAAM;EAAA;;;;;;;;;;;;;;;;;ACzB0C;;;AAYxD,MAAOC,WAAW;EAGtBhE,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC+D,WAAWA,CAACjD,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC/F,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,QAAQ,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC/E;EAEA8C,YAAYA,CAAC3D,GAAW;IACtB,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAoB,GAAG,IAAI,CAACR,OAAO,cAAcK,GAAG,EAAE,CAAC;EAC7E;EAEA4D,aAAaA,CAACC,IAAY;IACxB,OAAO,IAAI,CAACnE,IAAI,CAACS,GAAG,CAAoB,GAAG,IAAI,CAACR,OAAO,eAAekE,IAAI,EAAE,CAAC;EAC/E;EAEAC,cAAcA,CAACC,QAAkB,EAAEtD,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACtH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,eAAeoE,QAAQ,EAAE,EAAE;MAAElD;IAAM,CAAE,CAAC;EAChG;EAEAmD,WAAWA,CAACC,UAAkB,EAAExD,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,YAAY,EAAEmD,UAAU,CAAC,CAC7BnD,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,eAAe,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACtF;EAEAqD,iBAAiBA,CAACH,QAAkB,EAAEE,UAAkB,EAAExD,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC7I,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,YAAY,EAAEmD,UAAU,CAAC,CAC7BnD,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,eAAeoE,QAAQ,SAAS,EAAE;MAAElD;IAAM,CAAE,CAAC;EACvG;EAEAsD,YAAYA,CAAA;IACV,OAAO,IAAI,CAACzE,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,cAAc,CAAC;EAC7E;EAEAyE,kBAAkBA,CAACL,QAAkB,EAAEM,MAAc;IACnD,OAAO,IAAI,CAAC3E,IAAI,CAACS,GAAG,CAAoB,GAAG,IAAI,CAACR,OAAO,eAAeoE,QAAQ,SAASM,MAAM,EAAE,CAAC;EAClG;;;uCAzDWZ,WAAW,EAAAP,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAXK,WAAW;MAAAH,OAAA,EAAXG,WAAW,CAAAF,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;;;;;;;;;;;;;;;;ACV0C;;;AAaxD,MAAOc,mBAAmB;EAG9B7E,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC4E,oBAAoBA,CAAC9D,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACxG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA6B,GAAG,IAAI,CAACR,OAAO,iBAAiB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAChG;EAEA2D,oBAAoBA,CAAChD,KAAa,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACvH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,GAAG,EAAEU,KAAK,CAAC,CACfV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA6B,GAAG,IAAI,CAACR,OAAO,wBAAwB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACvG;EAEA4D,oBAAoBA,CAACzE,GAAW;IAC9B,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAA4B,GAAG,IAAI,CAACR,OAAO,uBAAuBK,GAAG,EAAE,CAAC;EAC9F;EAEA0E,kBAAkBA,CAAC7E,OAAkC;IACnD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAA4B,GAAG,IAAI,CAACH,OAAO,iBAAiB,EAAEE,OAAO,CAAC;EAC7F;EAEA8E,kBAAkBA,CAAC3E,GAAW,EAAEH,OAAkC;IAChE,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAA4B,GAAG,IAAI,CAACN,OAAO,uBAAuBK,GAAG,EAAE,EAAEH,OAAO,CAAC;EACvG;EAEA+E,kBAAkBA,CAAC5E,GAAW;IAC5B,OAAO,IAAI,CAACN,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,uBAAuBK,GAAG,EAAE,CAAC;EACzF;EAEA8E,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACpF,IAAI,CAACS,GAAG,CAAiC,GAAG,IAAI,CAACR,OAAO,uBAAuB,CAAC;EAC9F;EAEAoF,4BAA4BA,CAACC,SAAiB,EAAEvE,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnI,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA6B,GAAG,IAAI,CAACR,OAAO,8BAA8BqF,SAAS,EAAE,EAAE;MAAEnE;IAAM,CAAE,CAAC;EACxH;EAEAoE,8BAA8BA,CAACC,WAAmB,EAAEzE,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACvI,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA6B,GAAG,IAAI,CAACR,OAAO,gCAAgCuF,WAAW,EAAE,EAAE;MAAErE;IAAM,CAAE,CAAC;EAC5H;EAEAsE,uBAAuBA,CAAC1E,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC3G,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA6B,GAAG,IAAI,CAACR,OAAO,wBAAwB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACvG;EAEAuE,yBAAyBA,CAACC,QAAiB,EAAE5E,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAChI,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA6B,GAAG,IAAI,CAACR,OAAO,0BAA0B0F,QAAQ,EAAE,EAAE;MAAExE;IAAM,CAAE,CAAC;EACnH;EAEAyE,wBAAwBA,CAACtF,GAAW;IAClC,OAAO,IAAI,CAACN,IAAI,CAAC6F,KAAK,CAA4B,GAAG,IAAI,CAAC5F,OAAO,uBAAuBK,GAAG,gBAAgB,EAAE,EAAE,CAAC;EAClH;;;uCAlFWsE,mBAAmB,EAAApB,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAnBkB,mBAAmB;MAAAhB,OAAA,EAAnBgB,mBAAmB,CAAAf,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAOgC,eAAe;EAG1B/F,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,2BAA2B;EAEf;EAEvC8F,cAAcA,CAAC5F,OAA8B;IAC3C,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAwB,GAAG,IAAI,CAACH,OAAO,qBAAqB,EAAEE,OAAO,CAAC;EAC7F;EAEA6F,cAAcA,CAAC1F,GAAW,EAAEH,OAA8B;IACxD,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAwB,GAAG,IAAI,CAACN,OAAO,2BAA2BK,GAAG,EAAE,EAAEH,OAAO,CAAC;EACvG;EAEA8F,gBAAgBA,CAAC3F,GAAW;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,2BAA2BK,GAAG,EAAE,CAAC;EAC9F;EAEA4F,iBAAiBA,CAAC/B,IAAY;IAC5B,OAAO,IAAI,CAACnE,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,4BAA4BkE,IAAI,EAAE,CAAC;EAChG;EAEAgC,eAAeA,CAACpF,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,qBAAqB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAChG;EAEAiF,kBAAkBA,CAACrF,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACtG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,4BAA4B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACvG;EAEAkF,eAAeA,CAACvE,KAAa,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,GAAG,EAAEU,KAAK,CAAC,CACfV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,4BAA4B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACvG;EAEAmF,oBAAoBA,CAACX,QAAiB,EAAE5E,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC3H,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,8BAA8B0F,QAAQ,EAAE,EAAE;MAAExE;IAAM,CAAE,CAAC;EACnH;EAEAoF,uBAAuBA,CAACjB,SAAiB,EAAEvE,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,kCAAkCqF,SAAS,EAAE,EAAE;MAAEnE;IAAM,CAAE,CAAC;EACxH;EAEAqF,oBAAoBA,CAAClG,GAAW;IAC9B,OAAO,IAAI,CAACN,IAAI,CAAC6F,KAAK,CAAwB,GAAG,IAAI,CAAC5F,OAAO,2BAA2BK,GAAG,gBAAgB,EAAE,EAAE,CAAC;EAClH;EAEAmG,cAAcA,CAACnG,GAAW;IACxB,OAAO,IAAI,CAACN,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,2BAA2BK,GAAG,EAAE,CAAC;EAC7F;EAEAoG,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAC1G,IAAI,CAACS,GAAG,CAA6B,GAAG,IAAI,CAACR,OAAO,2BAA2B,CAAC;EAC9F;;;uCAlFW6F,eAAe,EAAAtC,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAfoC,eAAe;MAAAlC,OAAA,EAAfkC,eAAe,CAAAjC,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAO6C,aAAa;EAGxB5G,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC2G,aAAaA,CAAC7F,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACjG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,UAAU,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACnF;EAEA0F,aAAaA,CAAC/E,KAAa,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAChH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,GAAG,EAAEU,KAAK,CAAC,CACfV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,iBAAiB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC1F;EAEA2F,cAAcA,CAACxG,GAAW;IACxB,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAsB,GAAG,IAAI,CAACR,OAAO,gBAAgBK,GAAG,EAAE,CAAC;EACjF;EAEAyG,YAAYA,CAAC5G,OAA4B;IACvC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,OAAO,UAAU,EAAEE,OAAO,CAAC;EAChF;EAEA6G,YAAYA,CAAC1G,GAAW,EAAEH,OAA4B;IACpD,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAsB,GAAG,IAAI,CAACN,OAAO,gBAAgBK,GAAG,EAAE,EAAEH,OAAO,CAAC;EAC1F;EAEA8G,YAAYA,CAAC3G,GAAW;IACtB,OAAO,IAAI,CAACN,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,gBAAgBK,GAAG,EAAE,CAAC;EAClF;EAEA4G,cAAcA,CAAA;IACZ,OAAO,IAAI,CAAClH,IAAI,CAACS,GAAG,CAA2B,GAAG,IAAI,CAACR,OAAO,gBAAgB,CAAC;EACjF;EAEAkH,sBAAsBA,CAACC,UAAkB,EAAErG,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,wBAAwBmH,UAAU,EAAE,EAAE;MAAEjG;IAAM,CAAE,CAAC;EAC7G;EAEAkG,gBAAgBA,CAACtG,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACpG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,iBAAiB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC1F;EAEAmG,kBAAkBA,CAAC3B,QAAiB,EAAE5E,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACzH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,mBAAmB0F,QAAQ,EAAE,EAAE;MAAExE;IAAM,CAAE,CAAC;EACtG;EAEAoG,kBAAkBA,CAACjH,GAAW;IAC5B,OAAO,IAAI,CAACN,IAAI,CAAC6F,KAAK,CAAsB,GAAG,IAAI,CAAC5F,OAAO,gBAAgBK,GAAG,gBAAgB,EAAE,EAAE,CAAC;EACrG;;;uCAzEWqG,aAAa,EAAAnD,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAbiD,aAAa;MAAA/C,OAAA,EAAb+C,aAAa,CAAA9C,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAO0D,iBAAiB;EAG5BzH,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvCwH,iBAAiBA,CAAC1G,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,WAAW,EAAEC,OAAA,GAAkB,MAAM;IAC3G,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA2B,GAAG,IAAI,CAACR,OAAO,cAAc,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC3F;EAEAuG,iBAAiBA,CAACC,EAAU;IAC1B,OAAO,IAAI,CAAC3H,IAAI,CAACS,GAAG,CAA0B,GAAG,IAAI,CAACR,OAAO,gBAAgB0H,EAAE,EAAE,CAAC;EACpF;EAEAC,kBAAkBA,CAACtH,GAAW;IAC5B,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAA0B,GAAG,IAAI,CAACR,OAAO,oBAAoBK,GAAG,EAAE,CAAC;EACzF;EAEAuH,mBAAmBA,CAAC1D,IAAY;IAC9B,OAAO,IAAI,CAACnE,IAAI,CAACS,GAAG,CAA0B,GAAG,IAAI,CAACR,OAAO,qBAAqBkE,IAAI,EAAE,CAAC;EAC3F;EAEA2D,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAAC9H,IAAI,CAACS,GAAG,CAA0B,GAAG,IAAI,CAACR,OAAO,sBAAsB,CAAC;EACtF;EAEA8H,oBAAoBA,CAAChH,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,WAAW,EAAEC,OAAA,GAAkB,MAAM;IAC9G,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA2B,GAAG,IAAI,CAACR,OAAO,qBAAqB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAClG;EAEA6G,iBAAiBA,CAACzD,UAAkB,EAAExD,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,WAAW,EAAEC,OAAA,GAAkB,MAAM;IAC/H,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,YAAY,EAAEmD,UAAU,CAAC,CAC7BnD,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA2B,GAAG,IAAI,CAACR,OAAO,qBAAqB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAClG;EAEA8G,gBAAgBA,CAAC9H,OAAgC;IAC/C,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAA0B,GAAG,IAAI,CAACH,OAAO,cAAc,EAAEE,OAAO,CAAC;EACxF;EAEA+H,gBAAgBA,CAACP,EAAU,EAAExH,OAAgC;IAC3D,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAA0B,GAAG,IAAI,CAACN,OAAO,gBAAgB0H,EAAE,EAAE,EAAExH,OAAO,CAAC;EAC7F;EAEAgI,qBAAqBA,CAAC7H,GAAW,EAAEH,OAAgC;IACjE,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAA0B,GAAG,IAAI,CAACN,OAAO,oBAAoBK,GAAG,EAAE,EAAEH,OAAO,CAAC;EAClG;EAEAiI,oBAAoBA,CAACT,EAAU;IAC7B,OAAO,IAAI,CAAC3H,IAAI,CAACO,GAAG,CAA0B,GAAG,IAAI,CAACN,OAAO,gBAAgB0H,EAAE,cAAc,EAAE,EAAE,CAAC;EACpG;EAEAU,yBAAyBA,CAAC/H,GAAW;IACnC,OAAO,IAAI,CAACN,IAAI,CAACO,GAAG,CAA0B,GAAG,IAAI,CAACN,OAAO,oBAAoBK,GAAG,cAAc,EAAE,EAAE,CAAC;EACzG;EAEAgI,gBAAgBA,CAACX,EAAU;IACzB,OAAO,IAAI,CAAC3H,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,gBAAgB0H,EAAE,EAAE,CAAC;EACjF;EAEAY,qBAAqBA,CAACjI,GAAW;IAC/B,OAAO,IAAI,CAACN,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,oBAAoBK,GAAG,EAAE,CAAC;EACtF;EAEAkI,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACxI,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,oBAAoB,CAAC;EACzF;;;uCA/EWuH,iBAAiB,EAAAhE,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAjB8D,iBAAiB;MAAA5D,OAAA,EAAjB4D,iBAAiB,CAAA3D,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAO2E,qBAAqB;EAGhC1I,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvCyI,sBAAsBA,CAAC3H,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC1G,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,oBAAoB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACrG;EAEAwH,qBAAqBA,CAAChB,EAAU;IAC9B,OAAO,IAAI,CAAC3H,IAAI,CAACS,GAAG,CAA8B,GAAG,IAAI,CAACR,OAAO,sBAAsB0H,EAAE,EAAE,CAAC;EAC9F;EAEAiB,sBAAsBA,CAACtI,GAAW;IAChC,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAA8B,GAAG,IAAI,CAACR,OAAO,0BAA0BK,GAAG,EAAE,CAAC;EACnG;EAEAuI,uBAAuBA,CAAC1E,IAAY;IAClC,OAAO,IAAI,CAACnE,IAAI,CAACS,GAAG,CAA8B,GAAG,IAAI,CAACR,OAAO,2BAA2BkE,IAAI,EAAE,CAAC;EACrG;EAEA2E,uBAAuBA,CAACC,IAAY;IAClC,OAAO,IAAI,CAAC/I,IAAI,CAACS,GAAG,CAA8B,GAAG,IAAI,CAACR,OAAO,2BAA2B8I,IAAI,EAAE,CAAC;EACrG;EAEAC,+BAA+BA,CAACC,YAAoB;IAClD,OAAO,IAAI,CAACjJ,IAAI,CAACS,GAAG,CAA8B,GAAG,IAAI,CAACR,OAAO,mCAAmCgJ,YAAY,EAAE,CAAC;EACrH;EAEAC,yBAAyBA,CAACnI,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC7G,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,2BAA2B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC5G;EAEAgI,6BAA6BA,CAACpI,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACjH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,+BAA+B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAChH;EAEAiI,8BAA8BA,CAACrI,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,gCAAgC,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACjH;EAEAkI,sBAAsBA,CAAC9E,UAAkB,EAAExD,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,GAAG,EAAEmD,UAAU,CAAC,CACpBnD,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,2BAA2B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC5G;EAEAmI,iCAAiCA,CAACC,IAAY,EAAExI,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnI,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,oCAAoCsJ,IAAI,EAAE,EAAE;MAAEpI;IAAM,CAAE,CAAC;EAC3H;EAEAqI,6BAA6BA,CAACC,QAAgB,EAAE1I,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnI,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,UAAU,EAAEqI,QAAQ,CAAC,CACzBrI,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAA+B,GAAG,IAAI,CAACR,OAAO,6BAA6B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC9G;EAEAuI,oBAAoBA,CAACvJ,OAAoC;IACvD,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAA8B,GAAG,IAAI,CAACH,OAAO,oBAAoB,EAAEE,OAAO,CAAC;EAClG;EAEAwJ,oBAAoBA,CAAChC,EAAU,EAAExH,OAAoC;IACnE,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAA8B,GAAG,IAAI,CAACN,OAAO,sBAAsB0H,EAAE,EAAE,EAAExH,OAAO,CAAC;EACvG;EAEAyJ,yBAAyBA,CAACtJ,GAAW,EAAEH,OAAoC;IACzE,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAA8B,GAAG,IAAI,CAACN,OAAO,0BAA0BK,GAAG,EAAE,EAAEH,OAAO,CAAC;EAC5G;EAEA0J,oBAAoBA,CAAClC,EAAU;IAC7B,OAAO,IAAI,CAAC3H,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,sBAAsB0H,EAAE,EAAE,CAAC;EACvF;EAEAmC,yBAAyBA,CAACxJ,GAAW;IACnC,OAAO,IAAI,CAACN,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,0BAA0BK,GAAG,EAAE,CAAC;EAC5F;EAEAyJ,sBAAsBA,CAACpC,EAAU;IAC/B,OAAO,IAAI,CAAC3H,IAAI,CAAC6F,KAAK,CAA8B,GAAG,IAAI,CAAC5F,OAAO,sBAAsB0H,EAAE,WAAW,EAAE,EAAE,CAAC;EAC7G;EAEAqC,wBAAwBA,CAACrC,EAAU;IACjC,OAAO,IAAI,CAAC3H,IAAI,CAAC6F,KAAK,CAA8B,GAAG,IAAI,CAAC5F,OAAO,sBAAsB0H,EAAE,aAAa,EAAE,EAAE,CAAC;EAC/G;EAEAsC,sBAAsBA,CAACtC,EAAU;IAC/B,OAAO,IAAI,CAAC3H,IAAI,CAAC6F,KAAK,CAA8B,GAAG,IAAI,CAAC5F,OAAO,sBAAsB0H,EAAE,WAAW,EAAE,EAAE,CAAC;EAC7G;EAEAuC,wBAAwBA,CAACvC,EAAU;IACjC,OAAO,IAAI,CAAC3H,IAAI,CAAC6F,KAAK,CAA8B,GAAG,IAAI,CAAC5F,OAAO,sBAAsB0H,EAAE,aAAa,EAAE,EAAE,CAAC;EAC/G;EAEAwC,sBAAsBA,CAAA;IACpB,OAAO,IAAI,CAACnK,IAAI,CAACS,GAAG,CAAmC,GAAG,IAAI,CAACR,OAAO,0BAA0B,CAAC;EACnG;;;uCAhIWwI,qBAAqB,EAAAjF,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAArB+E,qBAAqB;MAAA7E,OAAA,EAArB6E,qBAAqB,CAAA5E,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAOsG,aAAa;EAGxBrK,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,2BAA2B;EAEf;EAEvCoK,YAAYA,CAAClK,OAA4B;IACvC,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAsB,GAAG,IAAI,CAACH,OAAO,mBAAmB,EAAEE,OAAO,CAAC;EACzF;EAEAmK,YAAYA,CAAChK,GAAW,EAAEH,OAA4B;IACpD,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAsB,GAAG,IAAI,CAACN,OAAO,yBAAyBK,GAAG,EAAE,EAAEH,OAAO,CAAC;EACnG;EAEAoK,cAAcA,CAACjK,GAAW;IACxB,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAsB,GAAG,IAAI,CAACR,OAAO,yBAAyBK,GAAG,EAAE,CAAC;EAC1F;EAEAkK,eAAeA,CAACrG,IAAY;IAC1B,OAAO,IAAI,CAACnE,IAAI,CAACS,GAAG,CAAsB,GAAG,IAAI,CAACR,OAAO,0BAA0BkE,IAAI,EAAE,CAAC;EAC5F;EAEAsG,aAAaA,CAAC1J,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACjG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,mBAAmB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC5F;EAEAuJ,gBAAgBA,CAAC3J,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACpG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,0BAA0B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACnG;EAEAwJ,aAAaA,CAAC7I,KAAa,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAChH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,GAAG,EAAEU,KAAK,CAAC,CACfV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,0BAA0B,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACnG;EAEAyJ,kBAAkBA,CAACjF,QAAiB,EAAE5E,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACzH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,4BAA4B0F,QAAQ,EAAE,EAAE;MAAExE;IAAM,CAAE,CAAC;EAC/G;EAEA0J,kBAAkBA,CAACvK,GAAW;IAC5B,OAAO,IAAI,CAACN,IAAI,CAAC6F,KAAK,CAAsB,GAAG,IAAI,CAAC5F,OAAO,yBAAyBK,GAAG,gBAAgB,EAAE,EAAE,CAAC;EAC9G;EAEAwK,YAAYA,CAACxK,GAAW;IACtB,OAAO,IAAI,CAACN,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,yBAAyBK,GAAG,EAAE,CAAC;EAC3F;EAEAyK,cAAcA,CAAA;IACZ,OAAO,IAAI,CAAC/K,IAAI,CAACS,GAAG,CAA2B,GAAG,IAAI,CAACR,OAAO,yBAAyB,CAAC;EAC1F;;;uCAxEWmK,aAAa,EAAA5G,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAb0G,aAAa;MAAAxG,OAAA,EAAbwG,aAAa,CAAAvG,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAQxD,MAAOkH,cAAc;EAGzBjL,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC;EACAgL,cAAcA,CAAClK,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,WAAW,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACrF;EAEA;EACA+J,cAAcA,CAACpJ,KAAa,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACjH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,GAAG,EAAEU,KAAK,CAAC,CACfV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,kBAAkB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC5F;EAEA;EACAgK,eAAeA,CAAC7K,GAAW;IACzB,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAuB,GAAG,IAAI,CAACR,OAAO,iBAAiBK,GAAG,EAAE,CAAC;EACnF;EAEA;EACA8K,aAAaA,CAACC,OAA6B;IACzC,OAAO,IAAI,CAACrL,IAAI,CAACI,IAAI,CAAuB,GAAG,IAAI,CAACH,OAAO,WAAW,EAAEoL,OAAO,CAAC;EAClF;EAEA;EACAC,aAAaA,CAAChL,GAAW,EAAE+K,OAA6B;IACtD,OAAO,IAAI,CAACrL,IAAI,CAACO,GAAG,CAAuB,GAAG,IAAI,CAACN,OAAO,iBAAiBK,GAAG,EAAE,EAAE+K,OAAO,CAAC;EAC5F;EAEA;EACAE,aAAaA,CAACjL,GAAW;IACvB,OAAO,IAAI,CAACN,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,iBAAiBK,GAAG,EAAE,CAAC;EACnF;EAEA;EACAkL,eAAeA,CAAA;IACb,OAAO,IAAI,CAACxL,IAAI,CAACS,GAAG,CAA4B,GAAG,IAAI,CAACR,OAAO,iBAAiB,CAAC;EACnF;EAEA;EACAwL,oBAAoBA,CAACC,OAAe,EAAE3K,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACzH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,sBAAsByL,OAAO,EAAE,EAAE;MAAEvK;IAAM,CAAE,CAAC;EACzG;EAEA;EACAwK,iBAAiBA,CAAC5K,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACrG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,kBAAkB,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC5F;EAEA;EACAyK,mBAAmBA,CAACjG,QAAiB,EAAE5E,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC1H,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,oBAAoB0F,QAAQ,EAAE,EAAE;MAAExE;IAAM,CAAE,CAAC;EACxG;EAEA;EACA0K,mBAAmBA,CAACvL,GAAW;IAC7B,OAAO,IAAI,CAACN,IAAI,CAAC6F,KAAK,CAAuB,GAAG,IAAI,CAAC5F,OAAO,iBAAiBK,GAAG,gBAAgB,EAAE,EAAE,CAAC;EACvG;;;uCAzFW0K,cAAc,EAAAxH,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAdsH,cAAc;MAAApH,OAAA,EAAdoH,cAAc,CAAAnH,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;;;;;;;;;;;;;;;;ACN0C;;;AAQxD,MAAOgI,WAAW;EAGtB/L,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC;EACA8L,WAAWA,CAAChL,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC/F,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,QAAQ,EAAE;MAAEkB;IAAM,CAAE,CAAC;EAC/E;EAEA;EACA6K,WAAWA,CAAClK,KAAa,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9G,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,GAAG,EAAEU,KAAK,CAAC,CACfV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,eAAe,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACtF;EAEA;EACA8K,YAAYA,CAAC3L,GAAW;IACtB,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAoB,GAAG,IAAI,CAACR,OAAO,cAAcK,GAAG,EAAE,CAAC;EAC7E;EAEA;EACA4L,UAAUA,CAACC,IAAuB;IAChC,OAAO,IAAI,CAACnM,IAAI,CAACI,IAAI,CAAoB,GAAG,IAAI,CAACH,OAAO,QAAQ,EAAEkM,IAAI,CAAC;EACzE;EAEA;EACAC,UAAUA,CAAC9L,GAAW,EAAE6L,IAAuB;IAC7C,OAAO,IAAI,CAACnM,IAAI,CAACO,GAAG,CAAoB,GAAG,IAAI,CAACN,OAAO,cAAcK,GAAG,EAAE,EAAE6L,IAAI,CAAC;EACnF;EAEA;EACAE,UAAUA,CAAC/L,GAAW;IACpB,OAAO,IAAI,CAACN,IAAI,CAACmF,MAAM,CAAoB,GAAG,IAAI,CAAClF,OAAO,cAAcK,GAAG,EAAE,CAAC;EAChF;EAEA;EACAgM,YAAYA,CAAA;IACV,OAAO,IAAI,CAACtM,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,cAAc,CAAC;EAC7E;EAEA;EACAsM,qBAAqBA,CAAC/G,WAAmB,EAAEzE,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,uBAAuBuF,WAAW,EAAE,EAAE;MAAErE;IAAM,CAAE,CAAC;EAC3G;EAEA;EACAqL,cAAcA,CAACzL,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClG,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,eAAe,EAAE;MAAEkB;IAAM,CAAE,CAAC;EACtF;EAEA;EACAsL,gBAAgBA,CAAC9G,QAAiB,EAAE5E,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACvH,MAAMC,MAAM,GAAG,IAAItB,4DAAU,EAAE,CAC5BuB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAClB,IAAI,CAACS,GAAG,CAAqB,GAAG,IAAI,CAACR,OAAO,iBAAiB0F,QAAQ,EAAE,EAAE;MAAExE;IAAM,CAAE,CAAC;EAClG;EAEA;EACAuL,gBAAgBA,CAACpM,GAAW;IAC1B,OAAO,IAAI,CAACN,IAAI,CAAC6F,KAAK,CAAoB,GAAG,IAAI,CAAC5F,OAAO,cAAcK,GAAG,gBAAgB,EAAE,EAAE,CAAC;EACjG;;;uCAzFWwL,WAAW,EAAAtI,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAXoI,WAAW;MAAAlI,OAAA,EAAXkI,WAAW,CAAAjI,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","sources":["./src/app/core/services/admin-user.service.ts","./src/app/core/services/area.service.ts","./src/app/core/services/constituency.service.ts","./src/app/core/services/district.service.ts","./src/app/core/services/hamlet.service.ts","./src/app/core/services/parliament.service.ts","./src/app/core/services/political-party.service.ts","./src/app/core/services/region.service.ts","./src/app/core/services/village.service.ts","./src/app/core/services/ward.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  AdminUser,\r\n  CreateAdminUserRequest,\r\n  UpdateAdminUserRequest,\r\n  ResetAdminUserPasswordRequest,\r\n  ChangeAdminUserPasswordRequest,\r\n  AdminUserResponse,\r\n  AdminUserStats,\r\n  UsernameAvailabilityResponse,\r\n  EmailAvailabilityResponse,\r\n  CreateAdminUserResponse,\r\n  UpdateAdminUserResponse,\r\n  GetAdminUserResponse,\r\n  AdminUserListResponse,\r\n  AdminUserStatsResponse,\r\n  AdminUserCountResponse,\r\n  UsernameAvailabilityApiResponse,\r\n  EmailAvailabilityApiResponse,\r\n  ResetAdminUserPasswordResponse,\r\n  ChangeAdminUserPasswordResponse\r\n} from '../models/admin-user.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AdminUserService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Create Admin User\r\n  createAdminUser(request: CreateAdminUserRequest): Observable<CreateAdminUserResponse> {\r\n    return this.http.post<CreateAdminUserResponse>(`${this.API_URL}/admin/v1/users/admin-users`, request);\r\n  }\r\n\r\n  // Update Admin User by UID\r\n  updateAdminUser(uid: string, request: UpdateAdminUserRequest): Observable<UpdateAdminUserResponse> {\r\n    return this.http.put<UpdateAdminUserResponse>(`${this.API_URL}/admin/v1/users/admin-users/uid/${uid}`, request);\r\n  }\r\n\r\n  // Get Admin User by UID\r\n  getAdminUserByUid(uid: string): Observable<GetAdminUserResponse> {\r\n    return this.http.get<GetAdminUserResponse>(`${this.API_URL}/admin/v1/users/admin-users/uid/${uid}`);\r\n  }\r\n\r\n  // Get Admin User by Username\r\n  getAdminUserByUsername(username: string): Observable<GetAdminUserResponse> {\r\n    return this.http.get<GetAdminUserResponse>(`${this.API_URL}/admin/v1/users/admin-users/username/${username}`);\r\n  }\r\n\r\n  // Get Admin User by Email\r\n  getAdminUserByEmail(email: string): Observable<GetAdminUserResponse> {\r\n    return this.http.get<GetAdminUserResponse>(`${this.API_URL}/admin/v1/users/admin-users/email/${email}`);\r\n  }\r\n\r\n  // Get All Admin Users with Pagination\r\n  getAllAdminUsers(\r\n    page: number = 0, \r\n    size: number = 10, \r\n    sortBy: string = 'createdAt', \r\n    sortDir: string = 'desc'\r\n  ): Observable<AdminUserListResponse> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<AdminUserListResponse>(`${this.API_URL}/admin/v1/users/admin-users`, { params });\r\n  }\r\n\r\n  // Activate Admin User\r\n  activateAdminUser(uid: string): Observable<UpdateAdminUserResponse> {\r\n    return this.http.put<UpdateAdminUserResponse>(`${this.API_URL}/admin/v1/users/admin-users/uid/${uid}/activate`, {});\r\n  }\r\n\r\n  // Deactivate Admin User\r\n  deactivateAdminUser(uid: string): Observable<UpdateAdminUserResponse> {\r\n    return this.http.put<UpdateAdminUserResponse>(`${this.API_URL}/admin/v1/users/admin-users/uid/${uid}/deactivate`, {});\r\n  }\r\n\r\n  // Suspend Admin User\r\n  suspendAdminUser(uid: string): Observable<UpdateAdminUserResponse> {\r\n    return this.http.put<UpdateAdminUserResponse>(`${this.API_URL}/admin/v1/users/admin-users/uid/${uid}/suspend`, {});\r\n  }\r\n\r\n  // Get Admin User Count\r\n  getAdminUserCount(): Observable<AdminUserCountResponse> {\r\n    return this.http.get<AdminUserCountResponse>(`${this.API_URL}/admin/v1/users/admin-users/count`);\r\n  }\r\n\r\n  // Check Username Availability\r\n  isUsernameAvailable(username: string): Observable<UsernameAvailabilityApiResponse> {\r\n    return this.http.get<UsernameAvailabilityApiResponse>(`${this.API_URL}/admin/v1/users/admin-users/check-username/${username}`);\r\n  }\r\n\r\n  // Check Email Availability\r\n  isEmailAvailable(email: string): Observable<EmailAvailabilityApiResponse> {\r\n    return this.http.get<EmailAvailabilityApiResponse>(`${this.API_URL}/admin/v1/users/admin-users/check-email/${email}`);\r\n  }\r\n\r\n  // Get Admin User Stats (if available)\r\n  getAdminUserStats(): Observable<AdminUserStatsResponse> {\r\n    return this.http.get<AdminUserStatsResponse>(`${this.API_URL}/admin/v1/users/admin-users/stats`);\r\n  }\r\n\r\n  // Search Admin Users (if available)\r\n  searchAdminUsers(\r\n    query: string,\r\n    page: number = 0, \r\n    size: number = 10, \r\n    sortBy: string = 'createdAt', \r\n    sortDir: string = 'desc'\r\n  ): Observable<AdminUserListResponse> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<AdminUserListResponse>(`${this.API_URL}/admin/v1/users/admin-users/search`, { params });\r\n  }\r\n\r\n  // Get Admin Users by Status\r\n  getAdminUsersByStatus(\r\n    status: 'ACTIVE' | 'INACTIVE' | 'SUSPENDED',\r\n    page: number = 0, \r\n    size: number = 10, \r\n    sortBy: string = 'createdAt', \r\n    sortDir: string = 'desc'\r\n  ): Observable<AdminUserListResponse> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<AdminUserListResponse>(`${this.API_URL}/admin/v1/users/admin-users/status/${status}`, { params });\r\n  }\r\n\r\n  // Reset Admin User Password (generates new password and sends via email)\r\n  resetAdminUserPassword(uid: string, request: Partial<ResetAdminUserPasswordRequest> = {}): Observable<ResetAdminUserPasswordResponse> {\r\n    // Generate a secure password if not provided\r\n    const newPassword = request.newPassword || this.generateSecurePassword();\r\n    \r\n    const resetRequest: ResetAdminUserPasswordRequest = {\r\n      newPassword,\r\n      requirePasswordChange: request.requirePasswordChange ?? true,\r\n      sendEmailNotification: request.sendEmailNotification ?? true,\r\n      reason: request.reason\r\n    };\r\n    \r\n    return this.http.put<ResetAdminUserPasswordResponse>(`${this.API_URL}/admin/v1/users/admin-users/uid/${uid}/reset-password`, resetRequest);\r\n  }\r\n\r\n  // Change Admin User Password (requires current password verification)\r\n  changeAdminUserPassword(uid: string, request: ChangeAdminUserPasswordRequest): Observable<ChangeAdminUserPasswordResponse> {\r\n    return this.http.put<ChangeAdminUserPasswordResponse>(`${this.API_URL}/admin/v1/users/admin-users/uid/${uid}/change-password`, request);\r\n  }\r\n\r\n  // Force Password Reset (admin can force a user to reset their password)\r\n  forcePasswordReset(uid: string, request: Partial<ResetAdminUserPasswordRequest> = {}): Observable<ResetAdminUserPasswordResponse> {\r\n    // Generate a secure password if not provided\r\n    const newPassword = request.newPassword || this.generateSecurePassword();\r\n    \r\n    const resetRequest: ResetAdminUserPasswordRequest = {\r\n      newPassword,\r\n      requirePasswordChange: request.requirePasswordChange ?? true,\r\n      sendEmailNotification: request.sendEmailNotification ?? true,\r\n      reason: request.reason\r\n    };\r\n    \r\n    return this.http.put<ResetAdminUserPasswordResponse>(`${this.API_URL}/admin/v1/users/admin-users/uid/${uid}/force-password-reset`, resetRequest);\r\n  }\r\n\r\n  /**\r\n   * Generate a secure password with required complexity\r\n   */\r\n  private generateSecurePassword(): string {\r\n    const lowercase = 'abcdefghijklmnopqrstuvwxyz';\r\n    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n    const numbers = '0123456789';\r\n    const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\r\n    \r\n    // Ensure at least one character from each category\r\n    let password = '';\r\n    password += lowercase[Math.floor(Math.random() * lowercase.length)];\r\n    password += uppercase[Math.floor(Math.random() * uppercase.length)];\r\n    password += numbers[Math.floor(Math.random() * numbers.length)];\r\n    password += symbols[Math.floor(Math.random() * symbols.length)];\r\n    \r\n    // Fill remaining length (minimum 12 characters)\r\n    const allChars = lowercase + uppercase + numbers + symbols;\r\n    for (let i = 4; i < 12; i++) {\r\n      password += allChars[Math.floor(Math.random() * allChars.length)];\r\n    }\r\n    \r\n    // Shuffle the password\r\n    return password.split('').sort(() => Math.random() - 0.5).join('');\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Area, \r\n  AreaType, \r\n  AreaStats \r\n} from '../models/area.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AreaService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllAreas(page: number = 0, size: number = 20, sortBy: string = 'code', sortDir: string = 'asc'): Observable<PageResponse<Area>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Area>>(`${this.API_URL}/areas`, { params });\r\n  }\r\n\r\n  getAreaByUid(uid: string): Observable<ApiResponse<Area>> {\r\n    return this.http.get<ApiResponse<Area>>(`${this.API_URL}/areas/uid/${uid}`);\r\n  }\r\n\r\n  getAreaByCode(code: string): Observable<ApiResponse<Area>> {\r\n    return this.http.get<ApiResponse<Area>>(`${this.API_URL}/areas/code/${code}`);\r\n  }\r\n\r\n  getAreasByType(areaType: AreaType, page: number = 0, size: number = 20, sortBy: string = 'code', sortDir: string = 'asc'): Observable<PageResponse<Area>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Area>>(`${this.API_URL}/areas/type/${areaType}`, { params });\r\n  }\r\n\r\n  searchAreas(searchTerm: string, page: number = 0, size: number = 20, sortBy: string = 'code', sortDir: string = 'asc'): Observable<PageResponse<Area>> {\r\n    const params = new HttpParams()\r\n      .set('searchTerm', searchTerm)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Area>>(`${this.API_URL}/areas/search`, { params });\r\n  }\r\n\r\n  searchAreasByType(areaType: AreaType, searchTerm: string, page: number = 0, size: number = 20, sortBy: string = 'code', sortDir: string = 'asc'): Observable<PageResponse<Area>> {\r\n    const params = new HttpParams()\r\n      .set('searchTerm', searchTerm)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Area>>(`${this.API_URL}/areas/type/${areaType}/search`, { params });\r\n  }\r\n\r\n  getAreaStats(): Observable<ApiResponse<AreaStats>> {\r\n    return this.http.get<ApiResponse<AreaStats>>(`${this.API_URL}/areas/stats`);\r\n  }\r\n\r\n  getAreaByTypeAndId(areaType: AreaType, areaId: number): Observable<ApiResponse<Area>> {\r\n    return this.http.get<ApiResponse<Area>>(`${this.API_URL}/areas/type/${areaType}/area/${areaId}`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Constituency, \r\n  CreateConstituencyRequest, \r\n  UpdateConstituencyRequest, \r\n  ConstituencyStats \r\n} from '../models/constituency.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConstituencyService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllConstituencies(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies`, { params });\r\n  }\r\n\r\n  searchConstituencies(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/search`, { params });\r\n  }\r\n\r\n  getConstituencyByUid(uid: string): Observable<ApiResponse<Constituency>> {\r\n    return this.http.get<ApiResponse<Constituency>>(`${this.API_URL}/constituencies/uid/${uid}`);\r\n  }\r\n\r\n  createConstituency(request: CreateConstituencyRequest): Observable<ApiResponse<Constituency>> {\r\n    return this.http.post<ApiResponse<Constituency>>(`${this.API_URL}/constituencies`, request);\r\n  }\r\n\r\n  updateConstituency(uid: string, request: UpdateConstituencyRequest): Observable<ApiResponse<Constituency>> {\r\n    return this.http.put<ApiResponse<Constituency>>(`${this.API_URL}/constituencies/uid/${uid}`, request);\r\n  }\r\n\r\n  deleteConstituency(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/constituencies/uid/${uid}`);\r\n  }\r\n\r\n  getConstituencyStats(): Observable<ApiResponse<ConstituencyStats>> {\r\n    return this.http.get<ApiResponse<ConstituencyStats>>(`${this.API_URL}/constituencies/stats`);\r\n  }\r\n\r\n  getConstituenciesByRegionUid(regionUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/region/uid/${regionUid}`, { params });\r\n  }\r\n\r\n  getConstituenciesByDistrictUid(districtUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/district/uid/${districtUid}`, { params });\r\n  }\r\n\r\n  getActiveConstituencies(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/active`, { params });\r\n  }\r\n\r\n  getConstituenciesByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/status/${isActive}`, { params });\r\n  }\r\n\r\n  toggleConstituencyStatus(uid: string): Observable<ApiResponse<Constituency>> {\r\n    return this.http.patch<ApiResponse<Constituency>>(`${this.API_URL}/constituencies/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  District, \r\n  CreateDistrictRequest, \r\n  UpdateDistrictRequest, \r\n  DistrictStats \r\n} from '../models/district.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DistrictService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createDistrict(request: CreateDistrictRequest): Observable<ApiResponse<District>> {\r\n    return this.http.post<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts`, request);\r\n  }\r\n\r\n  updateDistrict(uid: string, request: UpdateDistrictRequest): Observable<ApiResponse<District>> {\r\n    return this.http.put<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`, request);\r\n  }\r\n\r\n  getDistrictByUid(uid: string): Observable<ApiResponse<District>> {\r\n    return this.http.get<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`);\r\n  }\r\n\r\n  getDistrictByCode(code: string): Observable<ApiResponse<District>> {\r\n    return this.http.get<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/code/${code}`);\r\n  }\r\n\r\n  getAllDistricts(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts`, { params });\r\n  }\r\n\r\n  getActiveDistricts(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/active`, { params });\r\n  }\r\n\r\n  searchDistricts(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/search`, { params });\r\n  }\r\n\r\n  getDistrictsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/status/${isActive}`, { params });\r\n  }\r\n\r\n  getDistrictsByRegionUid(regionUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/region/uid/${regionUid}`, { params });\r\n  }\r\n\r\n  toggleDistrictStatus(uid: string): Observable<ApiResponse<District>> {\r\n    return this.http.patch<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}/toggle-status`, {});\r\n  }\r\n\r\n  deleteDistrict(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`);\r\n  }\r\n\r\n  getDistrictStats(): Observable<ApiResponse<DistrictStats>> {\r\n    return this.http.get<ApiResponse<DistrictStats>>(`${this.API_URL}/admin/v1/districts/stats`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Hamlet, \r\n  CreateHamletRequest, \r\n  UpdateHamletRequest, \r\n  HamletStats \r\n} from '../models/hamlet.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HamletService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllHamlets(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets`, { params });\r\n  }\r\n\r\n  searchHamlets(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/search`, { params });\r\n  }\r\n\r\n  getHamletByUid(uid: string): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.get<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}`);\r\n  }\r\n\r\n  createHamlet(request: CreateHamletRequest): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.post<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets`, request);\r\n  }\r\n\r\n  updateHamlet(uid: string, request: UpdateHamletRequest): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.put<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}`, request);\r\n  }\r\n\r\n  deleteHamlet(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/hamlets/uid/${uid}`);\r\n  }\r\n\r\n  getHamletStats(): Observable<ApiResponse<HamletStats>> {\r\n    return this.http.get<ApiResponse<HamletStats>>(`${this.API_URL}/hamlets/stats`);\r\n  }\r\n\r\n  getHamletsByVillageUid(villageUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/village/uid/${villageUid}`, { params });\r\n  }\r\n\r\n  getActiveHamlets(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/active`, { params });\r\n  }\r\n\r\n  getHamletsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/status/${isActive}`, { params });\r\n  }\r\n\r\n  toggleHamletStatus(uid: string): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.patch<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Parliament, \r\n  CreateParliamentRequest, \r\n  UpdateParliamentRequest, \r\n  ParliamentStats \r\n} from '../models/parliament.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ParliamentService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllParliaments(page: number = 0, size: number = 20, sortBy: string = 'startDate', sortDir: string = 'desc'): Observable<PageResponse<Parliament>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Parliament>>(`${this.API_URL}/parliaments`, { params });\r\n  }\r\n\r\n  getParliamentById(id: number): Observable<ApiResponse<Parliament>> {\r\n    return this.http.get<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/${id}`);\r\n  }\r\n\r\n  getParliamentByUid(uid: string): Observable<ApiResponse<Parliament>> {\r\n    return this.http.get<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/uid/${uid}`);\r\n  }\r\n\r\n  getParliamentByCode(code: string): Observable<ApiResponse<Parliament>> {\r\n    return this.http.get<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/code/${code}`);\r\n  }\r\n\r\n  getCurrentParliament(): Observable<ApiResponse<Parliament>> {\r\n    return this.http.get<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/current`);\r\n  }\r\n\r\n  getActiveParliaments(page: number = 0, size: number = 20, sortBy: string = 'startDate', sortDir: string = 'desc'): Observable<PageResponse<Parliament>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Parliament>>(`${this.API_URL}/parliaments/active`, { params });\r\n  }\r\n\r\n  searchParliaments(searchTerm: string, page: number = 0, size: number = 20, sortBy: string = 'startDate', sortDir: string = 'desc'): Observable<PageResponse<Parliament>> {\r\n    const params = new HttpParams()\r\n      .set('searchTerm', searchTerm)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Parliament>>(`${this.API_URL}/parliaments/search`, { params });\r\n  }\r\n\r\n  createParliament(request: CreateParliamentRequest): Observable<ApiResponse<Parliament>> {\r\n    return this.http.post<ApiResponse<Parliament>>(`${this.API_URL}/parliaments`, request);\r\n  }\r\n\r\n  updateParliament(id: number, request: UpdateParliamentRequest): Observable<ApiResponse<Parliament>> {\r\n    return this.http.put<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/${id}`, request);\r\n  }\r\n\r\n  updateParliamentByUid(uid: string, request: UpdateParliamentRequest): Observable<ApiResponse<Parliament>> {\r\n    return this.http.put<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/uid/${uid}`, request);\r\n  }\r\n\r\n  setCurrentParliament(id: number): Observable<ApiResponse<Parliament>> {\r\n    return this.http.put<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/${id}/set-current`, {});\r\n  }\r\n\r\n  setCurrentParliamentByUid(uid: string): Observable<ApiResponse<Parliament>> {\r\n    return this.http.put<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/uid/${uid}/set-current`, {});\r\n  }\r\n\r\n  deleteParliament(id: number): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/parliaments/${id}`);\r\n  }\r\n\r\n  deleteParliamentByUid(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/parliaments/uid/${uid}`);\r\n  }\r\n\r\n  getParliamentStats(): Observable<ApiResponse<ParliamentStats>> {\r\n    return this.http.get<ApiResponse<ParliamentStats>>(`${this.API_URL}/parliaments/stats`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  PoliticalParty, \r\n  CreatePoliticalPartyRequest, \r\n  UpdatePoliticalPartyRequest, \r\n  PoliticalPartyStats \r\n} from '../models/political-party.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PoliticalPartyService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllPoliticalParties(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties`, { params });\r\n  }\r\n\r\n  getPoliticalPartyById(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}`);\r\n  }\r\n\r\n  getPoliticalPartyByUid(uid: string): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/uid/${uid}`);\r\n  }\r\n\r\n  getPoliticalPartyByCode(code: string): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/code/${code}`);\r\n  }\r\n\r\n  getPoliticalPartyByName(name: string): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/name/${name}`);\r\n  }\r\n\r\n  getPoliticalPartyByAbbreviation(abbreviation: string): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/abbreviation/${abbreviation}`);\r\n  }\r\n\r\n  getActivePoliticalParties(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/active`, { params });\r\n  }\r\n\r\n  getRegisteredPoliticalParties(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/registered`, { params });\r\n  }\r\n\r\n  getOperationalPoliticalParties(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/operational`, { params });\r\n  }\r\n\r\n  searchPoliticalParties(searchTerm: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('q', searchTerm)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/search`, { params });\r\n  }\r\n\r\n  getPoliticalPartiesByFoundingYear(year: number, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/founding-year/${year}`, { params });\r\n  }\r\n\r\n  getPoliticalPartiesByIdeology(ideology: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('ideology', ideology)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/ideology`, { params });\r\n  }\r\n\r\n  createPoliticalParty(request: CreatePoliticalPartyRequest): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.post<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties`, request);\r\n  }\r\n\r\n  updatePoliticalParty(id: number, request: UpdatePoliticalPartyRequest): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.put<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}`, request);\r\n  }\r\n\r\n  updatePoliticalPartyByUid(uid: string, request: UpdatePoliticalPartyRequest): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.put<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/uid/${uid}`, request);\r\n  }\r\n\r\n  deletePoliticalParty(id: number): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/political-parties/${id}`);\r\n  }\r\n\r\n  deletePoliticalPartyByUid(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/political-parties/uid/${uid}`);\r\n  }\r\n\r\n  activatePoliticalParty(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.patch<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}/activate`, {});\r\n  }\r\n\r\n  deactivatePoliticalParty(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.patch<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}/deactivate`, {});\r\n  }\r\n\r\n  registerPoliticalParty(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.patch<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}/register`, {});\r\n  }\r\n\r\n  deregisterPoliticalParty(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.patch<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}/deregister`, {});\r\n  }\r\n\r\n  getPoliticalPartyStats(): Observable<ApiResponse<PoliticalPartyStats>> {\r\n    return this.http.get<ApiResponse<PoliticalPartyStats>>(`${this.API_URL}/political-parties/stats`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Region, \r\n  CreateRegionRequest, \r\n  UpdateRegionRequest, \r\n  RegionStats \r\n} from '../models/region.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegionService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createRegion(request: CreateRegionRequest): Observable<ApiResponse<Region>> {\r\n    return this.http.post<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions`, request);\r\n  }\r\n\r\n  updateRegion(uid: string, request: UpdateRegionRequest): Observable<ApiResponse<Region>> {\r\n    return this.http.put<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`, request);\r\n  }\r\n\r\n  getRegionByUid(uid: string): Observable<ApiResponse<Region>> {\r\n    return this.http.get<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`);\r\n  }\r\n\r\n  getRegionByCode(code: string): Observable<ApiResponse<Region>> {\r\n    return this.http.get<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/code/${code}`);\r\n  }\r\n\r\n  getAllRegions(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions`, { params });\r\n  }\r\n\r\n  getActiveRegions(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/active`, { params });\r\n  }\r\n\r\n  searchRegions(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/search`, { params });\r\n  }\r\n\r\n  getRegionsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/status/${isActive}`, { params });\r\n  }\r\n\r\n  toggleRegionStatus(uid: string): Observable<ApiResponse<Region>> {\r\n    return this.http.patch<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}/toggle-status`, {});\r\n  }\r\n\r\n  deleteRegion(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`);\r\n  }\r\n\r\n  getRegionStats(): Observable<ApiResponse<RegionStats>> {\r\n    return this.http.get<ApiResponse<RegionStats>>(`${this.API_URL}/admin/v1/regions/stats`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Village, CreateVillageRequest, UpdateVillageRequest, VillageStats, VillageSearchParams } from '../models/village.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VillageService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all villages with pagination\r\n  getAllVillages(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages`, { params });\r\n  }\r\n\r\n  // Search villages\r\n  searchVillages(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/search`, { params });\r\n  }\r\n\r\n  // Get village by UID\r\n  getVillageByUid(uid: string): Observable<ApiResponse<Village>> {\r\n    return this.http.get<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}`);\r\n  }\r\n\r\n  // Create new village\r\n  createVillage(village: CreateVillageRequest): Observable<ApiResponse<Village>> {\r\n    return this.http.post<ApiResponse<Village>>(`${this.API_URL}/villages`, village);\r\n  }\r\n\r\n  // Update village by UID\r\n  updateVillage(uid: string, village: UpdateVillageRequest): Observable<ApiResponse<Village>> {\r\n    return this.http.put<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}`, village);\r\n  }\r\n\r\n  // Delete village by UID\r\n  deleteVillage(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/villages/uid/${uid}`);\r\n  }\r\n\r\n  // Get village statistics\r\n  getVillageStats(): Observable<ApiResponse<VillageStats>> {\r\n    return this.http.get<ApiResponse<VillageStats>>(`${this.API_URL}/villages/stats`);\r\n  }\r\n\r\n  // Get villages by ward UID\r\n  getVillagesByWardUid(wardUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/ward/uid/${wardUid}`, { params });\r\n  }\r\n\r\n  // Get active villages\r\n  getActiveVillages(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/active`, { params });\r\n  }\r\n\r\n  // Get villages by status\r\n  getVillagesByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/status/${isActive}`, { params });\r\n  }\r\n\r\n  // Toggle village status\r\n  toggleVillageStatus(uid: string): Observable<ApiResponse<Village>> {\r\n    return this.http.patch<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Ward, CreateWardRequest, UpdateWardRequest, WardStats, WardSearchParams } from '../models/ward.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WardService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all wards with pagination\r\n  getAllWards(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards`, { params });\r\n  }\r\n\r\n  // Search wards\r\n  searchWards(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/search`, { params });\r\n  }\r\n\r\n  // Get ward by UID\r\n  getWardByUid(uid: string): Observable<ApiResponse<Ward>> {\r\n    return this.http.get<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}`);\r\n  }\r\n\r\n  // Create new ward\r\n  createWard(ward: CreateWardRequest): Observable<ApiResponse<Ward>> {\r\n    return this.http.post<ApiResponse<Ward>>(`${this.API_URL}/wards`, ward);\r\n  }\r\n\r\n  // Update ward by UID\r\n  updateWard(uid: string, ward: UpdateWardRequest): Observable<ApiResponse<Ward>> {\r\n    return this.http.put<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}`, ward);\r\n  }\r\n\r\n  // Delete ward by UID\r\n  deleteWard(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/wards/uid/${uid}`);\r\n  }\r\n\r\n  // Get ward statistics\r\n  getWardStats(): Observable<ApiResponse<WardStats>> {\r\n    return this.http.get<ApiResponse<WardStats>>(`${this.API_URL}/wards/stats`);\r\n  }\r\n\r\n  // Get wards by district UID\r\n  getWardsByDistrictUid(districtUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/district/uid/${districtUid}`, { params });\r\n  }\r\n\r\n  // Get active wards\r\n  getActiveWards(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/active`, { params });\r\n  }\r\n\r\n  // Get wards by status\r\n  getWardsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/status/${isActive}`, { params });\r\n  }\r\n\r\n  // Toggle ward status\r\n  toggleWardStatus(uid: string): Observable<ApiResponse<Ward>> {\r\n    return this.http.patch<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n"],"names":["HttpParams","AdminUserService","constructor","http","API_URL","createAdminUser","request","post","updateAdminUser","uid","put","getAdminUserByUid","get","getAdminUserByUsername","username","getAdminUserByEmail","email","getAllAdminUsers","page","size","sortBy","sortDir","params","set","toString","activateAdminUser","deactivateAdminUser","suspendAdminUser","getAdminUserCount","isUsernameAvailable","isEmailAvailable","getAdminUserStats","searchAdminUsers","query","getAdminUsersByStatus","status","resetAdminUserPassword","newPassword","generateSecurePassword","resetRequest","requirePasswordChange","sendEmailNotification","reason","changeAdminUserPassword","forcePasswordReset","lowercase","uppercase","numbers","symbols","password","Math","floor","random","length","allChars","i","split","sort","join","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","AreaService","getAllAreas","getAreaByUid","getAreaByCode","code","getAreasByType","areaType","searchAreas","searchTerm","searchAreasByType","getAreaStats","getAreaByTypeAndId","areaId","ConstituencyService","getAllConstituencies","searchConstituencies","getConstituencyByUid","createConstituency","updateConstituency","deleteConstituency","delete","getConstituencyStats","getConstituenciesByRegionUid","regionUid","getConstituenciesByDistrictUid","districtUid","getActiveConstituencies","getConstituenciesByStatus","isActive","toggleConstituencyStatus","patch","DistrictService","createDistrict","updateDistrict","getDistrictByUid","getDistrictByCode","getAllDistricts","getActiveDistricts","searchDistricts","getDistrictsByStatus","getDistrictsByRegionUid","toggleDistrictStatus","deleteDistrict","getDistrictStats","HamletService","getAllHamlets","searchHamlets","getHamletByUid","createHamlet","updateHamlet","deleteHamlet","getHamletStats","getHamletsByVillageUid","villageUid","getActiveHamlets","getHamletsByStatus","toggleHamletStatus","ParliamentService","getAllParliaments","getParliamentById","id","getParliamentByUid","getParliamentByCode","getCurrentParliament","getActiveParliaments","searchParliaments","createParliament","updateParliament","updateParliamentByUid","setCurrentParliament","setCurrentParliamentByUid","deleteParliament","deleteParliamentByUid","getParliamentStats","PoliticalPartyService","getAllPoliticalParties","getPoliticalPartyById","getPoliticalPartyByUid","getPoliticalPartyByCode","getPoliticalPartyByName","name","getPoliticalPartyByAbbreviation","abbreviation","getActivePoliticalParties","getRegisteredPoliticalParties","getOperationalPoliticalParties","searchPoliticalParties","getPoliticalPartiesByFoundingYear","year","getPoliticalPartiesByIdeology","ideology","createPoliticalParty","updatePoliticalParty","updatePoliticalPartyByUid","deletePoliticalParty","deletePoliticalPartyByUid","activatePoliticalParty","deactivatePoliticalParty","registerPoliticalParty","deregisterPoliticalParty","getPoliticalPartyStats","RegionService","createRegion","updateRegion","getRegionByUid","getRegionByCode","getAllRegions","getActiveRegions","searchRegions","getRegionsByStatus","toggleRegionStatus","deleteRegion","getRegionStats","VillageService","getAllVillages","searchVillages","getVillageByUid","createVillage","village","updateVillage","deleteVillage","getVillageStats","getVillagesByWardUid","wardUid","getActiveVillages","getVillagesByStatus","toggleVillageStatus","WardService","getAllWards","searchWards","getWardByUid","createWard","ward","updateWard","deleteWard","getWardStats","getWardsByDistrictUid","getActiveWards","getWardsByStatus","toggleWardStatus"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}