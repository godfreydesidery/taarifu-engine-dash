{"version":3,"file":"common.js","mappings":";;;;;;;;;;;;;;;AAC8D;;;AAYxD,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvCC,WAAWA,CAACC,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC/F,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,QAAQ,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC/E;EAEAI,YAAYA,CAACC,GAAW;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAoB,GAAG,IAAI,CAACT,OAAO,cAAcW,GAAG,EAAE,CAAC;EAC7E;EAEAC,aAAaA,CAACC,IAAY;IACxB,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAAoB,GAAG,IAAI,CAACT,OAAO,eAAea,IAAI,EAAE,CAAC;EAC/E;EAEAC,cAAcA,CAACC,QAAkB,EAAEb,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACtH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,eAAee,QAAQ,EAAE,EAAE;MAAET;IAAM,CAAE,CAAC;EAChG;EAEAU,WAAWA,CAACC,UAAkB,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,YAAY,EAAEU,UAAU,CAAC,CAC7BV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,eAAe,EAAE;MAAEM;IAAM,CAAE,CAAC;EACtF;EAEAY,iBAAiBA,CAACH,QAAkB,EAAEE,UAAkB,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC7I,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,YAAY,EAAEU,UAAU,CAAC,CAC7BV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,eAAee,QAAQ,SAAS,EAAE;MAAET;IAAM,CAAE,CAAC;EACvG;EAEAa,YAAYA,CAAA;IACV,OAAO,IAAI,CAACpB,IAAI,CAACU,GAAG,CAAyB,GAAG,IAAI,CAACT,OAAO,cAAc,CAAC;EAC7E;EAEAoB,kBAAkBA,CAACL,QAAkB,EAAEM,MAAc;IACnD,OAAO,IAAI,CAACtB,IAAI,CAACU,GAAG,CAAoB,GAAG,IAAI,CAACT,OAAO,eAAee,QAAQ,SAASM,MAAM,EAAE,CAAC;EAClG;;;uCAzDWxB,WAAW,EAAAyB,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAX3B,WAAW;MAAA6B,OAAA,EAAX7B,WAAW,CAAA8B,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA;;;;;;;;;;;;;;;;;ACV0C;;;AAaxD,MAAOC,mBAAmB;EAG9B/B,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC8B,oBAAoBA,CAAC5B,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACxG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA6B,GAAG,IAAI,CAACT,OAAO,iBAAiB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAChG;EAEAyB,oBAAoBA,CAACC,KAAa,EAAE9B,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACvH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,GAAG,EAAEyB,KAAK,CAAC,CACfzB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA6B,GAAG,IAAI,CAACT,OAAO,wBAAwB,EAAE;MAAEM;IAAM,CAAE,CAAC;EACvG;EAEA2B,oBAAoBA,CAACtB,GAAW;IAC9B,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAA4B,GAAG,IAAI,CAACT,OAAO,uBAAuBW,GAAG,EAAE,CAAC;EAC9F;EAEAuB,kBAAkBA,CAACC,OAAkC;IACnD,OAAO,IAAI,CAACpC,IAAI,CAACqC,IAAI,CAA4B,GAAG,IAAI,CAACpC,OAAO,iBAAiB,EAAEmC,OAAO,CAAC;EAC7F;EAEAE,kBAAkBA,CAAC1B,GAAW,EAAEwB,OAAkC;IAChE,OAAO,IAAI,CAACpC,IAAI,CAACuC,GAAG,CAA4B,GAAG,IAAI,CAACtC,OAAO,uBAAuBW,GAAG,EAAE,EAAEwB,OAAO,CAAC;EACvG;EAEAI,kBAAkBA,CAAC5B,GAAW;IAC5B,OAAO,IAAI,CAACZ,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,uBAAuBW,GAAG,EAAE,CAAC;EACzF;EAEA8B,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAAC1C,IAAI,CAACU,GAAG,CAAiC,GAAG,IAAI,CAACT,OAAO,uBAAuB,CAAC;EAC9F;EAEA0C,4BAA4BA,CAACC,SAAiB,EAAEzC,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnI,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA6B,GAAG,IAAI,CAACT,OAAO,8BAA8B2C,SAAS,EAAE,EAAE;MAAErC;IAAM,CAAE,CAAC;EACxH;EAEAsC,8BAA8BA,CAACC,WAAmB,EAAE3C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACvI,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA6B,GAAG,IAAI,CAACT,OAAO,gCAAgC6C,WAAW,EAAE,EAAE;MAAEvC;IAAM,CAAE,CAAC;EAC5H;EAEAwC,uBAAuBA,CAAC5C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC3G,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA6B,GAAG,IAAI,CAACT,OAAO,wBAAwB,EAAE;MAAEM;IAAM,CAAE,CAAC;EACvG;EAEAyC,yBAAyBA,CAACC,QAAiB,EAAE9C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAChI,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA6B,GAAG,IAAI,CAACT,OAAO,0BAA0BgD,QAAQ,EAAE,EAAE;MAAE1C;IAAM,CAAE,CAAC;EACnH;EAEA2C,wBAAwBA,CAACtC,GAAW;IAClC,OAAO,IAAI,CAACZ,IAAI,CAACmD,KAAK,CAA4B,GAAG,IAAI,CAAClD,OAAO,uBAAuBW,GAAG,gBAAgB,EAAE,EAAE,CAAC;EAClH;;;uCAlFWkB,mBAAmB,EAAAP,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAnBK,mBAAmB;MAAAH,OAAA,EAAnBG,mBAAmB,CAAAF,IAAA;MAAAC,UAAA,EAFlB;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAOuB,eAAe;EAG1BrD,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,2BAA2B;EAEf;EAEvCoD,cAAcA,CAACjB,OAA8B;IAC3C,OAAO,IAAI,CAACpC,IAAI,CAACqC,IAAI,CAAwB,GAAG,IAAI,CAACpC,OAAO,qBAAqB,EAAEmC,OAAO,CAAC;EAC7F;EAEAkB,cAAcA,CAAC1C,GAAW,EAAEwB,OAA8B;IACxD,OAAO,IAAI,CAACpC,IAAI,CAACuC,GAAG,CAAwB,GAAG,IAAI,CAACtC,OAAO,2BAA2BW,GAAG,EAAE,EAAEwB,OAAO,CAAC;EACvG;EAEAmB,gBAAgBA,CAAC3C,GAAW;IAC1B,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAwB,GAAG,IAAI,CAACT,OAAO,2BAA2BW,GAAG,EAAE,CAAC;EAC9F;EAEA4C,iBAAiBA,CAAC1C,IAAY;IAC5B,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAAwB,GAAG,IAAI,CAACT,OAAO,4BAA4Ba,IAAI,EAAE,CAAC;EAChG;EAEA2C,eAAeA,CAACtD,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAyB,GAAG,IAAI,CAACT,OAAO,qBAAqB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAChG;EAEAmD,kBAAkBA,CAACvD,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACtG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAyB,GAAG,IAAI,CAACT,OAAO,4BAA4B,EAAE;MAAEM;IAAM,CAAE,CAAC;EACvG;EAEAoD,eAAeA,CAAC1B,KAAa,EAAE9B,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,GAAG,EAAEyB,KAAK,CAAC,CACfzB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAyB,GAAG,IAAI,CAACT,OAAO,4BAA4B,EAAE;MAAEM;IAAM,CAAE,CAAC;EACvG;EAEAqD,oBAAoBA,CAACX,QAAiB,EAAE9C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC3H,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAyB,GAAG,IAAI,CAACT,OAAO,8BAA8BgD,QAAQ,EAAE,EAAE;MAAE1C;IAAM,CAAE,CAAC;EACnH;EAEAsD,uBAAuBA,CAACjB,SAAiB,EAAEzC,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAyB,GAAG,IAAI,CAACT,OAAO,kCAAkC2C,SAAS,EAAE,EAAE;MAAErC;IAAM,CAAE,CAAC;EACxH;EAEAuD,oBAAoBA,CAAClD,GAAW;IAC9B,OAAO,IAAI,CAACZ,IAAI,CAACmD,KAAK,CAAwB,GAAG,IAAI,CAAClD,OAAO,2BAA2BW,GAAG,gBAAgB,EAAE,EAAE,CAAC;EAClH;EAEAmD,cAAcA,CAACnD,GAAW;IACxB,OAAO,IAAI,CAACZ,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,2BAA2BW,GAAG,EAAE,CAAC;EAC7F;EAEAoD,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAChE,IAAI,CAACU,GAAG,CAA6B,GAAG,IAAI,CAACT,OAAO,2BAA2B,CAAC;EAC9F;;;uCAlFWmD,eAAe,EAAA7B,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAf2B,eAAe;MAAAzB,OAAA,EAAfyB,eAAe,CAAAxB,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAOoC,aAAa;EAGxBlE,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvCiE,aAAaA,CAAC/D,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACjG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,UAAU,EAAE;MAAEM;IAAM,CAAE,CAAC;EACnF;EAEA4D,aAAaA,CAAClC,KAAa,EAAE9B,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAChH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,GAAG,EAAEyB,KAAK,CAAC,CACfzB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,iBAAiB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC1F;EAEA6D,cAAcA,CAACxD,GAAW;IACxB,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAsB,GAAG,IAAI,CAACT,OAAO,gBAAgBW,GAAG,EAAE,CAAC;EACjF;EAEAyD,YAAYA,CAACjC,OAA4B;IACvC,OAAO,IAAI,CAACpC,IAAI,CAACqC,IAAI,CAAsB,GAAG,IAAI,CAACpC,OAAO,UAAU,EAAEmC,OAAO,CAAC;EAChF;EAEAkC,YAAYA,CAAC1D,GAAW,EAAEwB,OAA4B;IACpD,OAAO,IAAI,CAACpC,IAAI,CAACuC,GAAG,CAAsB,GAAG,IAAI,CAACtC,OAAO,gBAAgBW,GAAG,EAAE,EAAEwB,OAAO,CAAC;EAC1F;EAEAmC,YAAYA,CAAC3D,GAAW;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,gBAAgBW,GAAG,EAAE,CAAC;EAClF;EAEA4D,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACxE,IAAI,CAACU,GAAG,CAA2B,GAAG,IAAI,CAACT,OAAO,gBAAgB,CAAC;EACjF;EAEAwE,sBAAsBA,CAACC,UAAkB,EAAEvE,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,wBAAwByE,UAAU,EAAE,EAAE;MAAEnE;IAAM,CAAE,CAAC;EAC7G;EAEAoE,gBAAgBA,CAACxE,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACpG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,iBAAiB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC1F;EAEAqE,kBAAkBA,CAAC3B,QAAiB,EAAE9C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACzH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,mBAAmBgD,QAAQ,EAAE,EAAE;MAAE1C;IAAM,CAAE,CAAC;EACtG;EAEAsE,kBAAkBA,CAACjE,GAAW;IAC5B,OAAO,IAAI,CAACZ,IAAI,CAACmD,KAAK,CAAsB,GAAG,IAAI,CAAClD,OAAO,gBAAgBW,GAAG,gBAAgB,EAAE,EAAE,CAAC;EACrG;;;uCAzEWqD,aAAa,EAAA1C,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAbwC,aAAa;MAAAtC,OAAA,EAAbsC,aAAa,CAAArC,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAOiD,iBAAiB;EAG5B/E,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC8E,iBAAiBA,CAAC5E,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,WAAW,EAAEC,OAAA,GAAkB,MAAM;IAC3G,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA2B,GAAG,IAAI,CAACT,OAAO,cAAc,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC3F;EAEAyE,iBAAiBA,CAACC,EAAU;IAC1B,OAAO,IAAI,CAACjF,IAAI,CAACU,GAAG,CAA0B,GAAG,IAAI,CAACT,OAAO,gBAAgBgF,EAAE,EAAE,CAAC;EACpF;EAEAC,kBAAkBA,CAACtE,GAAW;IAC5B,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAA0B,GAAG,IAAI,CAACT,OAAO,oBAAoBW,GAAG,EAAE,CAAC;EACzF;EAEAuE,mBAAmBA,CAACrE,IAAY;IAC9B,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAA0B,GAAG,IAAI,CAACT,OAAO,qBAAqBa,IAAI,EAAE,CAAC;EAC3F;EAEAsE,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAACpF,IAAI,CAACU,GAAG,CAA0B,GAAG,IAAI,CAACT,OAAO,sBAAsB,CAAC;EACtF;EAEAoF,oBAAoBA,CAAClF,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,WAAW,EAAEC,OAAA,GAAkB,MAAM;IAC9G,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA2B,GAAG,IAAI,CAACT,OAAO,qBAAqB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAClG;EAEA+E,iBAAiBA,CAACpE,UAAkB,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,WAAW,EAAEC,OAAA,GAAkB,MAAM;IAC/H,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,YAAY,EAAEU,UAAU,CAAC,CAC7BV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA2B,GAAG,IAAI,CAACT,OAAO,qBAAqB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAClG;EAEAgF,gBAAgBA,CAACnD,OAAgC;IAC/C,OAAO,IAAI,CAACpC,IAAI,CAACqC,IAAI,CAA0B,GAAG,IAAI,CAACpC,OAAO,cAAc,EAAEmC,OAAO,CAAC;EACxF;EAEAoD,gBAAgBA,CAACP,EAAU,EAAE7C,OAAgC;IAC3D,OAAO,IAAI,CAACpC,IAAI,CAACuC,GAAG,CAA0B,GAAG,IAAI,CAACtC,OAAO,gBAAgBgF,EAAE,EAAE,EAAE7C,OAAO,CAAC;EAC7F;EAEAqD,qBAAqBA,CAAC7E,GAAW,EAAEwB,OAAgC;IACjE,OAAO,IAAI,CAACpC,IAAI,CAACuC,GAAG,CAA0B,GAAG,IAAI,CAACtC,OAAO,oBAAoBW,GAAG,EAAE,EAAEwB,OAAO,CAAC;EAClG;EAEAsD,oBAAoBA,CAACT,EAAU;IAC7B,OAAO,IAAI,CAACjF,IAAI,CAACuC,GAAG,CAA0B,GAAG,IAAI,CAACtC,OAAO,gBAAgBgF,EAAE,cAAc,EAAE,EAAE,CAAC;EACpG;EAEAU,yBAAyBA,CAAC/E,GAAW;IACnC,OAAO,IAAI,CAACZ,IAAI,CAACuC,GAAG,CAA0B,GAAG,IAAI,CAACtC,OAAO,oBAAoBW,GAAG,cAAc,EAAE,EAAE,CAAC;EACzG;EAEAgF,gBAAgBA,CAACX,EAAU;IACzB,OAAO,IAAI,CAACjF,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,gBAAgBgF,EAAE,EAAE,CAAC;EACjF;EAEAY,qBAAqBA,CAACjF,GAAW;IAC/B,OAAO,IAAI,CAACZ,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,oBAAoBW,GAAG,EAAE,CAAC;EACtF;EAEAkF,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAAC9F,IAAI,CAACU,GAAG,CAA+B,GAAG,IAAI,CAACT,OAAO,oBAAoB,CAAC;EACzF;;;uCA/EW6E,iBAAiB,EAAAvD,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAjBqD,iBAAiB;MAAAnD,OAAA,EAAjBmD,iBAAiB,CAAAlD,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAOkE,qBAAqB;EAGhChG,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC+F,sBAAsBA,CAAC7F,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC1G,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA+B,GAAG,IAAI,CAACT,OAAO,oBAAoB,EAAE;MAAEM;IAAM,CAAE,CAAC;EACrG;EAEA0F,qBAAqBA,CAAChB,EAAU;IAC9B,OAAO,IAAI,CAACjF,IAAI,CAACU,GAAG,CAA8B,GAAG,IAAI,CAACT,OAAO,sBAAsBgF,EAAE,EAAE,CAAC;EAC9F;EAEAiB,sBAAsBA,CAACtF,GAAW;IAChC,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAA8B,GAAG,IAAI,CAACT,OAAO,0BAA0BW,GAAG,EAAE,CAAC;EACnG;EAEAuF,uBAAuBA,CAACrF,IAAY;IAClC,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAA8B,GAAG,IAAI,CAACT,OAAO,2BAA2Ba,IAAI,EAAE,CAAC;EACrG;EAEAsF,uBAAuBA,CAACC,IAAY;IAClC,OAAO,IAAI,CAACrG,IAAI,CAACU,GAAG,CAA8B,GAAG,IAAI,CAACT,OAAO,2BAA2BoG,IAAI,EAAE,CAAC;EACrG;EAEAC,+BAA+BA,CAACC,YAAoB;IAClD,OAAO,IAAI,CAACvG,IAAI,CAACU,GAAG,CAA8B,GAAG,IAAI,CAACT,OAAO,mCAAmCsG,YAAY,EAAE,CAAC;EACrH;EAEAC,yBAAyBA,CAACrG,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC7G,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA+B,GAAG,IAAI,CAACT,OAAO,2BAA2B,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC5G;EAEAkG,6BAA6BA,CAACtG,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACjH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA+B,GAAG,IAAI,CAACT,OAAO,+BAA+B,EAAE;MAAEM;IAAM,CAAE,CAAC;EAChH;EAEAmG,8BAA8BA,CAACvG,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA+B,GAAG,IAAI,CAACT,OAAO,gCAAgC,EAAE;MAAEM;IAAM,CAAE,CAAC;EACjH;EAEAoG,sBAAsBA,CAACzF,UAAkB,EAAEf,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,GAAG,EAAEU,UAAU,CAAC,CACpBV,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA+B,GAAG,IAAI,CAACT,OAAO,2BAA2B,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC5G;EAEAqG,iCAAiCA,CAACC,IAAY,EAAE1G,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnI,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA+B,GAAG,IAAI,CAACT,OAAO,oCAAoC4G,IAAI,EAAE,EAAE;MAAEtG;IAAM,CAAE,CAAC;EAC3H;EAEAuG,6BAA6BA,CAACC,QAAgB,EAAE5G,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnI,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,UAAU,EAAEuG,QAAQ,CAAC,CACzBvG,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAA+B,GAAG,IAAI,CAACT,OAAO,6BAA6B,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC9G;EAEAyG,oBAAoBA,CAAC5E,OAAoC;IACvD,OAAO,IAAI,CAACpC,IAAI,CAACqC,IAAI,CAA8B,GAAG,IAAI,CAACpC,OAAO,oBAAoB,EAAEmC,OAAO,CAAC;EAClG;EAEA6E,oBAAoBA,CAAChC,EAAU,EAAE7C,OAAoC;IACnE,OAAO,IAAI,CAACpC,IAAI,CAACuC,GAAG,CAA8B,GAAG,IAAI,CAACtC,OAAO,sBAAsBgF,EAAE,EAAE,EAAE7C,OAAO,CAAC;EACvG;EAEA8E,yBAAyBA,CAACtG,GAAW,EAAEwB,OAAoC;IACzE,OAAO,IAAI,CAACpC,IAAI,CAACuC,GAAG,CAA8B,GAAG,IAAI,CAACtC,OAAO,0BAA0BW,GAAG,EAAE,EAAEwB,OAAO,CAAC;EAC5G;EAEA+E,oBAAoBA,CAAClC,EAAU;IAC7B,OAAO,IAAI,CAACjF,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,sBAAsBgF,EAAE,EAAE,CAAC;EACvF;EAEAmC,yBAAyBA,CAACxG,GAAW;IACnC,OAAO,IAAI,CAACZ,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,0BAA0BW,GAAG,EAAE,CAAC;EAC5F;EAEAyG,sBAAsBA,CAACpC,EAAU;IAC/B,OAAO,IAAI,CAACjF,IAAI,CAACmD,KAAK,CAA8B,GAAG,IAAI,CAAClD,OAAO,sBAAsBgF,EAAE,WAAW,EAAE,EAAE,CAAC;EAC7G;EAEAqC,wBAAwBA,CAACrC,EAAU;IACjC,OAAO,IAAI,CAACjF,IAAI,CAACmD,KAAK,CAA8B,GAAG,IAAI,CAAClD,OAAO,sBAAsBgF,EAAE,aAAa,EAAE,EAAE,CAAC;EAC/G;EAEAsC,sBAAsBA,CAACtC,EAAU;IAC/B,OAAO,IAAI,CAACjF,IAAI,CAACmD,KAAK,CAA8B,GAAG,IAAI,CAAClD,OAAO,sBAAsBgF,EAAE,WAAW,EAAE,EAAE,CAAC;EAC7G;EAEAuC,wBAAwBA,CAACvC,EAAU;IACjC,OAAO,IAAI,CAACjF,IAAI,CAACmD,KAAK,CAA8B,GAAG,IAAI,CAAClD,OAAO,sBAAsBgF,EAAE,aAAa,EAAE,EAAE,CAAC;EAC/G;EAEAwC,sBAAsBA,CAAA;IACpB,OAAO,IAAI,CAACzH,IAAI,CAACU,GAAG,CAAmC,GAAG,IAAI,CAACT,OAAO,0BAA0B,CAAC;EACnG;;;uCAhIW8F,qBAAqB,EAAAxE,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAArBsE,qBAAqB;MAAApE,OAAA,EAArBoE,qBAAqB,CAAAnE,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAaxD,MAAO6F,aAAa;EAGxB3H,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,2BAA2B;EAEf;EAEvC0H,YAAYA,CAACvF,OAA4B;IACvC,OAAO,IAAI,CAACpC,IAAI,CAACqC,IAAI,CAAsB,GAAG,IAAI,CAACpC,OAAO,mBAAmB,EAAEmC,OAAO,CAAC;EACzF;EAEAwF,YAAYA,CAAChH,GAAW,EAAEwB,OAA4B;IACpD,OAAO,IAAI,CAACpC,IAAI,CAACuC,GAAG,CAAsB,GAAG,IAAI,CAACtC,OAAO,yBAAyBW,GAAG,EAAE,EAAEwB,OAAO,CAAC;EACnG;EAEAyF,cAAcA,CAACjH,GAAW;IACxB,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAsB,GAAG,IAAI,CAACT,OAAO,yBAAyBW,GAAG,EAAE,CAAC;EAC1F;EAEAkH,eAAeA,CAAChH,IAAY;IAC1B,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAAsB,GAAG,IAAI,CAACT,OAAO,0BAA0Ba,IAAI,EAAE,CAAC;EAC5F;EAEAiH,aAAaA,CAAC5H,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACjG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,mBAAmB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC5F;EAEAyH,gBAAgBA,CAAC7H,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACpG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,0BAA0B,EAAE;MAAEM;IAAM,CAAE,CAAC;EACnG;EAEA0H,aAAaA,CAAChG,KAAa,EAAE9B,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAChH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,GAAG,EAAEyB,KAAK,CAAC,CACfzB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,0BAA0B,EAAE;MAAEM;IAAM,CAAE,CAAC;EACnG;EAEA2H,kBAAkBA,CAACjF,QAAiB,EAAE9C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACzH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,4BAA4BgD,QAAQ,EAAE,EAAE;MAAE1C;IAAM,CAAE,CAAC;EAC/G;EAEA4H,kBAAkBA,CAACvH,GAAW;IAC5B,OAAO,IAAI,CAACZ,IAAI,CAACmD,KAAK,CAAsB,GAAG,IAAI,CAAClD,OAAO,yBAAyBW,GAAG,gBAAgB,EAAE,EAAE,CAAC;EAC9G;EAEAwH,YAAYA,CAACxH,GAAW;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,yBAAyBW,GAAG,EAAE,CAAC;EAC3F;EAEAyH,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACrI,IAAI,CAACU,GAAG,CAA2B,GAAG,IAAI,CAACT,OAAO,yBAAyB,CAAC;EAC1F;;;uCAxEWyH,aAAa,EAAAnG,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAbiG,aAAa;MAAA/F,OAAA,EAAb+F,aAAa,CAAA9F,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA;;;;;;;;;;;;;;;;;ACX0C;;;AAQxD,MAAOyG,cAAc;EAGzBvI,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC;EACAsI,cAAcA,CAACpI,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAwB,GAAG,IAAI,CAACT,OAAO,WAAW,EAAE;MAAEM;IAAM,CAAE,CAAC;EACrF;EAEA;EACAiI,cAAcA,CAACvG,KAAa,EAAE9B,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACjH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,GAAG,EAAEyB,KAAK,CAAC,CACfzB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAwB,GAAG,IAAI,CAACT,OAAO,kBAAkB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC5F;EAEA;EACAkI,eAAeA,CAAC7H,GAAW;IACzB,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAuB,GAAG,IAAI,CAACT,OAAO,iBAAiBW,GAAG,EAAE,CAAC;EACnF;EAEA;EACA8H,aAAaA,CAACC,OAA6B;IACzC,OAAO,IAAI,CAAC3I,IAAI,CAACqC,IAAI,CAAuB,GAAG,IAAI,CAACpC,OAAO,WAAW,EAAE0I,OAAO,CAAC;EAClF;EAEA;EACAC,aAAaA,CAAChI,GAAW,EAAE+H,OAA6B;IACtD,OAAO,IAAI,CAAC3I,IAAI,CAACuC,GAAG,CAAuB,GAAG,IAAI,CAACtC,OAAO,iBAAiBW,GAAG,EAAE,EAAE+H,OAAO,CAAC;EAC5F;EAEA;EACAE,aAAaA,CAACjI,GAAW;IACvB,OAAO,IAAI,CAACZ,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,iBAAiBW,GAAG,EAAE,CAAC;EACnF;EAEA;EACAkI,eAAeA,CAAA;IACb,OAAO,IAAI,CAAC9I,IAAI,CAACU,GAAG,CAA4B,GAAG,IAAI,CAACT,OAAO,iBAAiB,CAAC;EACnF;EAEA;EACA8I,oBAAoBA,CAACC,OAAe,EAAE7I,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACzH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAwB,GAAG,IAAI,CAACT,OAAO,sBAAsB+I,OAAO,EAAE,EAAE;MAAEzI;IAAM,CAAE,CAAC;EACzG;EAEA;EACA0I,iBAAiBA,CAAC9I,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACrG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAwB,GAAG,IAAI,CAACT,OAAO,kBAAkB,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC5F;EAEA;EACA2I,mBAAmBA,CAACjG,QAAiB,EAAE9C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC1H,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAwB,GAAG,IAAI,CAACT,OAAO,oBAAoBgD,QAAQ,EAAE,EAAE;MAAE1C;IAAM,CAAE,CAAC;EACxG;EAEA;EACA4I,mBAAmBA,CAACvI,GAAW;IAC7B,OAAO,IAAI,CAACZ,IAAI,CAACmD,KAAK,CAAuB,GAAG,IAAI,CAAClD,OAAO,iBAAiBW,GAAG,gBAAgB,EAAE,EAAE,CAAC;EACvG;;;uCAzFW0H,cAAc,EAAA/G,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAd6G,cAAc;MAAA3G,OAAA,EAAd2G,cAAc,CAAA1G,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA;;;;;;;;;;;;;;;;;ACN0C;;;AAQxD,MAAOuH,WAAW;EAGtBrJ,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,oCAAoC;EAExB;EAEvC;EACAoJ,WAAWA,CAAClJ,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC/F,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,QAAQ,EAAE;MAAEM;IAAM,CAAE,CAAC;EAC/E;EAEA;EACA+I,WAAWA,CAACrH,KAAa,EAAE9B,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9G,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,GAAG,EAAEyB,KAAK,CAAC,CACfzB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,eAAe,EAAE;MAAEM;IAAM,CAAE,CAAC;EACtF;EAEA;EACAgJ,YAAYA,CAAC3I,GAAW;IACtB,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAoB,GAAG,IAAI,CAACT,OAAO,cAAcW,GAAG,EAAE,CAAC;EAC7E;EAEA;EACA4I,UAAUA,CAACC,IAAuB;IAChC,OAAO,IAAI,CAACzJ,IAAI,CAACqC,IAAI,CAAoB,GAAG,IAAI,CAACpC,OAAO,QAAQ,EAAEwJ,IAAI,CAAC;EACzE;EAEA;EACAC,UAAUA,CAAC9I,GAAW,EAAE6I,IAAuB;IAC7C,OAAO,IAAI,CAACzJ,IAAI,CAACuC,GAAG,CAAoB,GAAG,IAAI,CAACtC,OAAO,cAAcW,GAAG,EAAE,EAAE6I,IAAI,CAAC;EACnF;EAEA;EACAE,UAAUA,CAAC/I,GAAW;IACpB,OAAO,IAAI,CAACZ,IAAI,CAACyC,MAAM,CAAoB,GAAG,IAAI,CAACxC,OAAO,cAAcW,GAAG,EAAE,CAAC;EAChF;EAEA;EACAgJ,YAAYA,CAAA;IACV,OAAO,IAAI,CAAC5J,IAAI,CAACU,GAAG,CAAyB,GAAG,IAAI,CAACT,OAAO,cAAc,CAAC;EAC7E;EAEA;EACA4J,qBAAqBA,CAAC/G,WAAmB,EAAE3C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,uBAAuB6C,WAAW,EAAE,EAAE;MAAEvC;IAAM,CAAE,CAAC;EAC3G;EAEA;EACAuJ,cAAcA,CAAC3J,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClG,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,eAAe,EAAE;MAAEM;IAAM,CAAE,CAAC;EACtF;EAEA;EACAwJ,gBAAgBA,CAAC9G,QAAiB,EAAE9C,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACvH,MAAMC,MAAM,GAAG,IAAIV,4DAAU,EAAE,CAC5BW,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAACN,IAAI,CAACU,GAAG,CAAqB,GAAG,IAAI,CAACT,OAAO,iBAAiBgD,QAAQ,EAAE,EAAE;MAAE1C;IAAM,CAAE,CAAC;EAClG;EAEA;EACAyJ,gBAAgBA,CAACpJ,GAAW;IAC1B,OAAO,IAAI,CAACZ,IAAI,CAACmD,KAAK,CAAoB,GAAG,IAAI,CAAClD,OAAO,cAAcW,GAAG,gBAAgB,EAAE,EAAE,CAAC;EACjG;;;uCAzFWwI,WAAW,EAAA7H,sDAAA,CAAAE,4DAAA;IAAA;EAAA;;;aAAX2H,WAAW;MAAAzH,OAAA,EAAXyH,WAAW,CAAAxH,IAAA;MAAAC,UAAA,EAFV;IAAM;EAAA","sources":["./src/app/core/services/area.service.ts","./src/app/core/services/constituency.service.ts","./src/app/core/services/district.service.ts","./src/app/core/services/hamlet.service.ts","./src/app/core/services/parliament.service.ts","./src/app/core/services/political-party.service.ts","./src/app/core/services/region.service.ts","./src/app/core/services/village.service.ts","./src/app/core/services/ward.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Area, \r\n  AreaType, \r\n  AreaStats \r\n} from '../models/area.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AreaService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllAreas(page: number = 0, size: number = 20, sortBy: string = 'code', sortDir: string = 'asc'): Observable<PageResponse<Area>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Area>>(`${this.API_URL}/areas`, { params });\r\n  }\r\n\r\n  getAreaByUid(uid: string): Observable<ApiResponse<Area>> {\r\n    return this.http.get<ApiResponse<Area>>(`${this.API_URL}/areas/uid/${uid}`);\r\n  }\r\n\r\n  getAreaByCode(code: string): Observable<ApiResponse<Area>> {\r\n    return this.http.get<ApiResponse<Area>>(`${this.API_URL}/areas/code/${code}`);\r\n  }\r\n\r\n  getAreasByType(areaType: AreaType, page: number = 0, size: number = 20, sortBy: string = 'code', sortDir: string = 'asc'): Observable<PageResponse<Area>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Area>>(`${this.API_URL}/areas/type/${areaType}`, { params });\r\n  }\r\n\r\n  searchAreas(searchTerm: string, page: number = 0, size: number = 20, sortBy: string = 'code', sortDir: string = 'asc'): Observable<PageResponse<Area>> {\r\n    const params = new HttpParams()\r\n      .set('searchTerm', searchTerm)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Area>>(`${this.API_URL}/areas/search`, { params });\r\n  }\r\n\r\n  searchAreasByType(areaType: AreaType, searchTerm: string, page: number = 0, size: number = 20, sortBy: string = 'code', sortDir: string = 'asc'): Observable<PageResponse<Area>> {\r\n    const params = new HttpParams()\r\n      .set('searchTerm', searchTerm)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Area>>(`${this.API_URL}/areas/type/${areaType}/search`, { params });\r\n  }\r\n\r\n  getAreaStats(): Observable<ApiResponse<AreaStats>> {\r\n    return this.http.get<ApiResponse<AreaStats>>(`${this.API_URL}/areas/stats`);\r\n  }\r\n\r\n  getAreaByTypeAndId(areaType: AreaType, areaId: number): Observable<ApiResponse<Area>> {\r\n    return this.http.get<ApiResponse<Area>>(`${this.API_URL}/areas/type/${areaType}/area/${areaId}`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Constituency, \r\n  CreateConstituencyRequest, \r\n  UpdateConstituencyRequest, \r\n  ConstituencyStats \r\n} from '../models/constituency.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ConstituencyService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllConstituencies(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies`, { params });\r\n  }\r\n\r\n  searchConstituencies(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/search`, { params });\r\n  }\r\n\r\n  getConstituencyByUid(uid: string): Observable<ApiResponse<Constituency>> {\r\n    return this.http.get<ApiResponse<Constituency>>(`${this.API_URL}/constituencies/uid/${uid}`);\r\n  }\r\n\r\n  createConstituency(request: CreateConstituencyRequest): Observable<ApiResponse<Constituency>> {\r\n    return this.http.post<ApiResponse<Constituency>>(`${this.API_URL}/constituencies`, request);\r\n  }\r\n\r\n  updateConstituency(uid: string, request: UpdateConstituencyRequest): Observable<ApiResponse<Constituency>> {\r\n    return this.http.put<ApiResponse<Constituency>>(`${this.API_URL}/constituencies/uid/${uid}`, request);\r\n  }\r\n\r\n  deleteConstituency(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/constituencies/uid/${uid}`);\r\n  }\r\n\r\n  getConstituencyStats(): Observable<ApiResponse<ConstituencyStats>> {\r\n    return this.http.get<ApiResponse<ConstituencyStats>>(`${this.API_URL}/constituencies/stats`);\r\n  }\r\n\r\n  getConstituenciesByRegionUid(regionUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/region/uid/${regionUid}`, { params });\r\n  }\r\n\r\n  getConstituenciesByDistrictUid(districtUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/district/uid/${districtUid}`, { params });\r\n  }\r\n\r\n  getActiveConstituencies(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/active`, { params });\r\n  }\r\n\r\n  getConstituenciesByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Constituency>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Constituency>>(`${this.API_URL}/constituencies/status/${isActive}`, { params });\r\n  }\r\n\r\n  toggleConstituencyStatus(uid: string): Observable<ApiResponse<Constituency>> {\r\n    return this.http.patch<ApiResponse<Constituency>>(`${this.API_URL}/constituencies/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  District, \r\n  CreateDistrictRequest, \r\n  UpdateDistrictRequest, \r\n  DistrictStats \r\n} from '../models/district.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DistrictService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createDistrict(request: CreateDistrictRequest): Observable<ApiResponse<District>> {\r\n    return this.http.post<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts`, request);\r\n  }\r\n\r\n  updateDistrict(uid: string, request: UpdateDistrictRequest): Observable<ApiResponse<District>> {\r\n    return this.http.put<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`, request);\r\n  }\r\n\r\n  getDistrictByUid(uid: string): Observable<ApiResponse<District>> {\r\n    return this.http.get<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`);\r\n  }\r\n\r\n  getDistrictByCode(code: string): Observable<ApiResponse<District>> {\r\n    return this.http.get<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/code/${code}`);\r\n  }\r\n\r\n  getAllDistricts(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts`, { params });\r\n  }\r\n\r\n  getActiveDistricts(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/active`, { params });\r\n  }\r\n\r\n  searchDistricts(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/search`, { params });\r\n  }\r\n\r\n  getDistrictsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/status/${isActive}`, { params });\r\n  }\r\n\r\n  getDistrictsByRegionUid(regionUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/region/uid/${regionUid}`, { params });\r\n  }\r\n\r\n  toggleDistrictStatus(uid: string): Observable<ApiResponse<District>> {\r\n    return this.http.patch<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}/toggle-status`, {});\r\n  }\r\n\r\n  deleteDistrict(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`);\r\n  }\r\n\r\n  getDistrictStats(): Observable<ApiResponse<DistrictStats>> {\r\n    return this.http.get<ApiResponse<DistrictStats>>(`${this.API_URL}/admin/v1/districts/stats`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Hamlet, \r\n  CreateHamletRequest, \r\n  UpdateHamletRequest, \r\n  HamletStats \r\n} from '../models/hamlet.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HamletService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllHamlets(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets`, { params });\r\n  }\r\n\r\n  searchHamlets(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/search`, { params });\r\n  }\r\n\r\n  getHamletByUid(uid: string): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.get<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}`);\r\n  }\r\n\r\n  createHamlet(request: CreateHamletRequest): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.post<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets`, request);\r\n  }\r\n\r\n  updateHamlet(uid: string, request: UpdateHamletRequest): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.put<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}`, request);\r\n  }\r\n\r\n  deleteHamlet(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/hamlets/uid/${uid}`);\r\n  }\r\n\r\n  getHamletStats(): Observable<ApiResponse<HamletStats>> {\r\n    return this.http.get<ApiResponse<HamletStats>>(`${this.API_URL}/hamlets/stats`);\r\n  }\r\n\r\n  getHamletsByVillageUid(villageUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/village/uid/${villageUid}`, { params });\r\n  }\r\n\r\n  getActiveHamlets(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/active`, { params });\r\n  }\r\n\r\n  getHamletsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/status/${isActive}`, { params });\r\n  }\r\n\r\n  toggleHamletStatus(uid: string): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.patch<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Parliament, \r\n  CreateParliamentRequest, \r\n  UpdateParliamentRequest, \r\n  ParliamentStats \r\n} from '../models/parliament.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ParliamentService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllParliaments(page: number = 0, size: number = 20, sortBy: string = 'startDate', sortDir: string = 'desc'): Observable<PageResponse<Parliament>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Parliament>>(`${this.API_URL}/parliaments`, { params });\r\n  }\r\n\r\n  getParliamentById(id: number): Observable<ApiResponse<Parliament>> {\r\n    return this.http.get<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/${id}`);\r\n  }\r\n\r\n  getParliamentByUid(uid: string): Observable<ApiResponse<Parliament>> {\r\n    return this.http.get<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/uid/${uid}`);\r\n  }\r\n\r\n  getParliamentByCode(code: string): Observable<ApiResponse<Parliament>> {\r\n    return this.http.get<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/code/${code}`);\r\n  }\r\n\r\n  getCurrentParliament(): Observable<ApiResponse<Parliament>> {\r\n    return this.http.get<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/current`);\r\n  }\r\n\r\n  getActiveParliaments(page: number = 0, size: number = 20, sortBy: string = 'startDate', sortDir: string = 'desc'): Observable<PageResponse<Parliament>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Parliament>>(`${this.API_URL}/parliaments/active`, { params });\r\n  }\r\n\r\n  searchParliaments(searchTerm: string, page: number = 0, size: number = 20, sortBy: string = 'startDate', sortDir: string = 'desc'): Observable<PageResponse<Parliament>> {\r\n    const params = new HttpParams()\r\n      .set('searchTerm', searchTerm)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Parliament>>(`${this.API_URL}/parliaments/search`, { params });\r\n  }\r\n\r\n  createParliament(request: CreateParliamentRequest): Observable<ApiResponse<Parliament>> {\r\n    return this.http.post<ApiResponse<Parliament>>(`${this.API_URL}/parliaments`, request);\r\n  }\r\n\r\n  updateParliament(id: number, request: UpdateParliamentRequest): Observable<ApiResponse<Parliament>> {\r\n    return this.http.put<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/${id}`, request);\r\n  }\r\n\r\n  updateParliamentByUid(uid: string, request: UpdateParliamentRequest): Observable<ApiResponse<Parliament>> {\r\n    return this.http.put<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/uid/${uid}`, request);\r\n  }\r\n\r\n  setCurrentParliament(id: number): Observable<ApiResponse<Parliament>> {\r\n    return this.http.put<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/${id}/set-current`, {});\r\n  }\r\n\r\n  setCurrentParliamentByUid(uid: string): Observable<ApiResponse<Parliament>> {\r\n    return this.http.put<ApiResponse<Parliament>>(`${this.API_URL}/parliaments/uid/${uid}/set-current`, {});\r\n  }\r\n\r\n  deleteParliament(id: number): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/parliaments/${id}`);\r\n  }\r\n\r\n  deleteParliamentByUid(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/parliaments/uid/${uid}`);\r\n  }\r\n\r\n  getParliamentStats(): Observable<ApiResponse<ParliamentStats>> {\r\n    return this.http.get<ApiResponse<ParliamentStats>>(`${this.API_URL}/parliaments/stats`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  PoliticalParty, \r\n  CreatePoliticalPartyRequest, \r\n  UpdatePoliticalPartyRequest, \r\n  PoliticalPartyStats \r\n} from '../models/political-party.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PoliticalPartyService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllPoliticalParties(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties`, { params });\r\n  }\r\n\r\n  getPoliticalPartyById(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}`);\r\n  }\r\n\r\n  getPoliticalPartyByUid(uid: string): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/uid/${uid}`);\r\n  }\r\n\r\n  getPoliticalPartyByCode(code: string): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/code/${code}`);\r\n  }\r\n\r\n  getPoliticalPartyByName(name: string): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/name/${name}`);\r\n  }\r\n\r\n  getPoliticalPartyByAbbreviation(abbreviation: string): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.get<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/abbreviation/${abbreviation}`);\r\n  }\r\n\r\n  getActivePoliticalParties(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/active`, { params });\r\n  }\r\n\r\n  getRegisteredPoliticalParties(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/registered`, { params });\r\n  }\r\n\r\n  getOperationalPoliticalParties(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/operational`, { params });\r\n  }\r\n\r\n  searchPoliticalParties(searchTerm: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('q', searchTerm)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/search`, { params });\r\n  }\r\n\r\n  getPoliticalPartiesByFoundingYear(year: number, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/founding-year/${year}`, { params });\r\n  }\r\n\r\n  getPoliticalPartiesByIdeology(ideology: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<PoliticalParty>> {\r\n    const params = new HttpParams()\r\n      .set('ideology', ideology)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<PoliticalParty>>(`${this.API_URL}/political-parties/ideology`, { params });\r\n  }\r\n\r\n  createPoliticalParty(request: CreatePoliticalPartyRequest): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.post<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties`, request);\r\n  }\r\n\r\n  updatePoliticalParty(id: number, request: UpdatePoliticalPartyRequest): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.put<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}`, request);\r\n  }\r\n\r\n  updatePoliticalPartyByUid(uid: string, request: UpdatePoliticalPartyRequest): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.put<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/uid/${uid}`, request);\r\n  }\r\n\r\n  deletePoliticalParty(id: number): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/political-parties/${id}`);\r\n  }\r\n\r\n  deletePoliticalPartyByUid(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/political-parties/uid/${uid}`);\r\n  }\r\n\r\n  activatePoliticalParty(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.patch<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}/activate`, {});\r\n  }\r\n\r\n  deactivatePoliticalParty(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.patch<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}/deactivate`, {});\r\n  }\r\n\r\n  registerPoliticalParty(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.patch<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}/register`, {});\r\n  }\r\n\r\n  deregisterPoliticalParty(id: number): Observable<ApiResponse<PoliticalParty>> {\r\n    return this.http.patch<ApiResponse<PoliticalParty>>(`${this.API_URL}/political-parties/${id}/deregister`, {});\r\n  }\r\n\r\n  getPoliticalPartyStats(): Observable<ApiResponse<PoliticalPartyStats>> {\r\n    return this.http.get<ApiResponse<PoliticalPartyStats>>(`${this.API_URL}/political-parties/stats`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Region, \r\n  CreateRegionRequest, \r\n  UpdateRegionRequest, \r\n  RegionStats \r\n} from '../models/region.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegionService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createRegion(request: CreateRegionRequest): Observable<ApiResponse<Region>> {\r\n    return this.http.post<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions`, request);\r\n  }\r\n\r\n  updateRegion(uid: string, request: UpdateRegionRequest): Observable<ApiResponse<Region>> {\r\n    return this.http.put<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`, request);\r\n  }\r\n\r\n  getRegionByUid(uid: string): Observable<ApiResponse<Region>> {\r\n    return this.http.get<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`);\r\n  }\r\n\r\n  getRegionByCode(code: string): Observable<ApiResponse<Region>> {\r\n    return this.http.get<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/code/${code}`);\r\n  }\r\n\r\n  getAllRegions(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions`, { params });\r\n  }\r\n\r\n  getActiveRegions(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/active`, { params });\r\n  }\r\n\r\n  searchRegions(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/search`, { params });\r\n  }\r\n\r\n  getRegionsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/status/${isActive}`, { params });\r\n  }\r\n\r\n  toggleRegionStatus(uid: string): Observable<ApiResponse<Region>> {\r\n    return this.http.patch<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}/toggle-status`, {});\r\n  }\r\n\r\n  deleteRegion(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`);\r\n  }\r\n\r\n  getRegionStats(): Observable<ApiResponse<RegionStats>> {\r\n    return this.http.get<ApiResponse<RegionStats>>(`${this.API_URL}/admin/v1/regions/stats`);\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Village, CreateVillageRequest, UpdateVillageRequest, VillageStats, VillageSearchParams } from '../models/village.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VillageService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all villages with pagination\r\n  getAllVillages(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages`, { params });\r\n  }\r\n\r\n  // Search villages\r\n  searchVillages(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/search`, { params });\r\n  }\r\n\r\n  // Get village by UID\r\n  getVillageByUid(uid: string): Observable<ApiResponse<Village>> {\r\n    return this.http.get<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}`);\r\n  }\r\n\r\n  // Create new village\r\n  createVillage(village: CreateVillageRequest): Observable<ApiResponse<Village>> {\r\n    return this.http.post<ApiResponse<Village>>(`${this.API_URL}/villages`, village);\r\n  }\r\n\r\n  // Update village by UID\r\n  updateVillage(uid: string, village: UpdateVillageRequest): Observable<ApiResponse<Village>> {\r\n    return this.http.put<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}`, village);\r\n  }\r\n\r\n  // Delete village by UID\r\n  deleteVillage(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/villages/uid/${uid}`);\r\n  }\r\n\r\n  // Get village statistics\r\n  getVillageStats(): Observable<ApiResponse<VillageStats>> {\r\n    return this.http.get<ApiResponse<VillageStats>>(`${this.API_URL}/villages/stats`);\r\n  }\r\n\r\n  // Get villages by ward UID\r\n  getVillagesByWardUid(wardUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/ward/uid/${wardUid}`, { params });\r\n  }\r\n\r\n  // Get active villages\r\n  getActiveVillages(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/active`, { params });\r\n  }\r\n\r\n  // Get villages by status\r\n  getVillagesByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/status/${isActive}`, { params });\r\n  }\r\n\r\n  // Toggle village status\r\n  toggleVillageStatus(uid: string): Observable<ApiResponse<Village>> {\r\n    return this.http.patch<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Ward, CreateWardRequest, UpdateWardRequest, WardStats, WardSearchParams } from '../models/ward.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WardService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all wards with pagination\r\n  getAllWards(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards`, { params });\r\n  }\r\n\r\n  // Search wards\r\n  searchWards(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/search`, { params });\r\n  }\r\n\r\n  // Get ward by UID\r\n  getWardByUid(uid: string): Observable<ApiResponse<Ward>> {\r\n    return this.http.get<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}`);\r\n  }\r\n\r\n  // Create new ward\r\n  createWard(ward: CreateWardRequest): Observable<ApiResponse<Ward>> {\r\n    return this.http.post<ApiResponse<Ward>>(`${this.API_URL}/wards`, ward);\r\n  }\r\n\r\n  // Update ward by UID\r\n  updateWard(uid: string, ward: UpdateWardRequest): Observable<ApiResponse<Ward>> {\r\n    return this.http.put<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}`, ward);\r\n  }\r\n\r\n  // Delete ward by UID\r\n  deleteWard(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/wards/uid/${uid}`);\r\n  }\r\n\r\n  // Get ward statistics\r\n  getWardStats(): Observable<ApiResponse<WardStats>> {\r\n    return this.http.get<ApiResponse<WardStats>>(`${this.API_URL}/wards/stats`);\r\n  }\r\n\r\n  // Get wards by district UID\r\n  getWardsByDistrictUid(districtUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/district/uid/${districtUid}`, { params });\r\n  }\r\n\r\n  // Get active wards\r\n  getActiveWards(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/active`, { params });\r\n  }\r\n\r\n  // Get wards by status\r\n  getWardsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/status/${isActive}`, { params });\r\n  }\r\n\r\n  // Toggle ward status\r\n  toggleWardStatus(uid: string): Observable<ApiResponse<Ward>> {\r\n    return this.http.patch<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n"],"names":["HttpParams","AreaService","constructor","http","API_URL","getAllAreas","page","size","sortBy","sortDir","params","set","toString","get","getAreaByUid","uid","getAreaByCode","code","getAreasByType","areaType","searchAreas","searchTerm","searchAreasByType","getAreaStats","getAreaByTypeAndId","areaId","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn","ConstituencyService","getAllConstituencies","searchConstituencies","query","getConstituencyByUid","createConstituency","request","post","updateConstituency","put","deleteConstituency","delete","getConstituencyStats","getConstituenciesByRegionUid","regionUid","getConstituenciesByDistrictUid","districtUid","getActiveConstituencies","getConstituenciesByStatus","isActive","toggleConstituencyStatus","patch","DistrictService","createDistrict","updateDistrict","getDistrictByUid","getDistrictByCode","getAllDistricts","getActiveDistricts","searchDistricts","getDistrictsByStatus","getDistrictsByRegionUid","toggleDistrictStatus","deleteDistrict","getDistrictStats","HamletService","getAllHamlets","searchHamlets","getHamletByUid","createHamlet","updateHamlet","deleteHamlet","getHamletStats","getHamletsByVillageUid","villageUid","getActiveHamlets","getHamletsByStatus","toggleHamletStatus","ParliamentService","getAllParliaments","getParliamentById","id","getParliamentByUid","getParliamentByCode","getCurrentParliament","getActiveParliaments","searchParliaments","createParliament","updateParliament","updateParliamentByUid","setCurrentParliament","setCurrentParliamentByUid","deleteParliament","deleteParliamentByUid","getParliamentStats","PoliticalPartyService","getAllPoliticalParties","getPoliticalPartyById","getPoliticalPartyByUid","getPoliticalPartyByCode","getPoliticalPartyByName","name","getPoliticalPartyByAbbreviation","abbreviation","getActivePoliticalParties","getRegisteredPoliticalParties","getOperationalPoliticalParties","searchPoliticalParties","getPoliticalPartiesByFoundingYear","year","getPoliticalPartiesByIdeology","ideology","createPoliticalParty","updatePoliticalParty","updatePoliticalPartyByUid","deletePoliticalParty","deletePoliticalPartyByUid","activatePoliticalParty","deactivatePoliticalParty","registerPoliticalParty","deregisterPoliticalParty","getPoliticalPartyStats","RegionService","createRegion","updateRegion","getRegionByUid","getRegionByCode","getAllRegions","getActiveRegions","searchRegions","getRegionsByStatus","toggleRegionStatus","deleteRegion","getRegionStats","VillageService","getAllVillages","searchVillages","getVillageByUid","createVillage","village","updateVillage","deleteVillage","getVillageStats","getVillagesByWardUid","wardUid","getActiveVillages","getVillagesByStatus","toggleVillageStatus","WardService","getAllWards","searchWards","getWardByUid","createWard","ward","updateWard","deleteWard","getWardStats","getWardsByDistrictUid","getActiveWards","getWardsByStatus","toggleWardStatus"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}