{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class DistrictService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080/api';\n  }\n  createDistrict(request) {\n    return this.http.post(`${this.API_URL}/admin/v1/districts`, request);\n  }\n  updateDistrict(uid, request) {\n    return this.http.put(`${this.API_URL}/admin/v1/districts/uid/${uid}`, request);\n  }\n  getDistrictByUid(uid) {\n    return this.http.get(`${this.API_URL}/admin/v1/districts/uid/${uid}`);\n  }\n  getDistrictByCode(code) {\n    return this.http.get(`${this.API_URL}/admin/v1/districts/code/${code}`);\n  }\n  getAllDistricts(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/districts`, {\n      params\n    });\n  }\n  getActiveDistricts(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/districts/active`, {\n      params\n    });\n  }\n  searchDistricts(query, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('q', query).set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/districts/search`, {\n      params\n    });\n  }\n  getDistrictsByStatus(isActive, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/districts/status/${isActive}`, {\n      params\n    });\n  }\n  getDistrictsByRegionUid(regionUid, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/districts/region/uid/${regionUid}`, {\n      params\n    });\n  }\n  toggleDistrictStatus(uid) {\n    return this.http.patch(`${this.API_URL}/admin/v1/districts/uid/${uid}/toggle-status`, {});\n  }\n  deleteDistrict(uid) {\n    return this.http.delete(`${this.API_URL}/admin/v1/districts/uid/${uid}`);\n  }\n  getDistrictStats() {\n    return this.http.get(`${this.API_URL}/admin/v1/districts/stats`);\n  }\n  static {\n    this.ɵfac = function DistrictService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DistrictService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DistrictService,\n      factory: DistrictService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","DistrictService","constructor","http","API_URL","createDistrict","request","post","updateDistrict","uid","put","getDistrictByUid","get","getDistrictByCode","code","getAllDistricts","page","size","sortBy","sortDir","params","set","toString","getActiveDistricts","searchDistricts","query","getDistrictsByStatus","isActive","getDistrictsByRegionUid","regionUid","toggleDistrictStatus","patch","deleteDistrict","delete","getDistrictStats","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\core\\services\\district.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  District, \r\n  CreateDistrictRequest, \r\n  UpdateDistrictRequest, \r\n  DistrictStats \r\n} from '../models/district.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DistrictService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createDistrict(request: CreateDistrictRequest): Observable<ApiResponse<District>> {\r\n    return this.http.post<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts`, request);\r\n  }\r\n\r\n  updateDistrict(uid: string, request: UpdateDistrictRequest): Observable<ApiResponse<District>> {\r\n    return this.http.put<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`, request);\r\n  }\r\n\r\n  getDistrictByUid(uid: string): Observable<ApiResponse<District>> {\r\n    return this.http.get<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`);\r\n  }\r\n\r\n  getDistrictByCode(code: string): Observable<ApiResponse<District>> {\r\n    return this.http.get<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/code/${code}`);\r\n  }\r\n\r\n  getAllDistricts(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts`, { params });\r\n  }\r\n\r\n  getActiveDistricts(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/active`, { params });\r\n  }\r\n\r\n  searchDistricts(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/search`, { params });\r\n  }\r\n\r\n  getDistrictsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/status/${isActive}`, { params });\r\n  }\r\n\r\n  getDistrictsByRegionUid(regionUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<District>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<District>>(`${this.API_URL}/admin/v1/districts/region/uid/${regionUid}`, { params });\r\n  }\r\n\r\n  toggleDistrictStatus(uid: string): Observable<ApiResponse<District>> {\r\n    return this.http.patch<ApiResponse<District>>(`${this.API_URL}/admin/v1/districts/uid/${uid}/toggle-status`, {});\r\n  }\r\n\r\n  deleteDistrict(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/admin/v1/districts/uid/${uid}`);\r\n  }\r\n\r\n  getDistrictStats(): Observable<ApiResponse<DistrictStats>> {\r\n    return this.http.get<ApiResponse<DistrictStats>>(`${this.API_URL}/admin/v1/districts/stats`);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,UAAU,QAAQ,sBAAsB;;;AAa7D,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,OAAO,GAAG,2BAA2B;EAEf;EAEvCC,cAAcA,CAACC,OAA8B;IAC3C,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAwB,GAAG,IAAI,CAACH,OAAO,qBAAqB,EAAEE,OAAO,CAAC;EAC7F;EAEAE,cAAcA,CAACC,GAAW,EAAEH,OAA8B;IACxD,OAAO,IAAI,CAACH,IAAI,CAACO,GAAG,CAAwB,GAAG,IAAI,CAACN,OAAO,2BAA2BK,GAAG,EAAE,EAAEH,OAAO,CAAC;EACvG;EAEAK,gBAAgBA,CAACF,GAAW;IAC1B,OAAO,IAAI,CAACN,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,2BAA2BK,GAAG,EAAE,CAAC;EAC9F;EAEAI,iBAAiBA,CAACC,IAAY;IAC5B,OAAO,IAAI,CAACX,IAAI,CAACS,GAAG,CAAwB,GAAG,IAAI,CAACR,OAAO,4BAA4BU,IAAI,EAAE,CAAC;EAChG;EAEAC,eAAeA,CAACC,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACnG,MAAMC,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAC5BqB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAChB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,qBAAqB,EAAE;MAAEgB;IAAM,CAAE,CAAC;EAChG;EAEAG,kBAAkBA,CAACP,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IACtG,MAAMC,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAC5BqB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAChB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,4BAA4B,EAAE;MAAEgB;IAAM,CAAE,CAAC;EACvG;EAEAI,eAAeA,CAACC,KAAa,EAAET,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAClH,MAAMC,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAC5BqB,GAAG,CAAC,GAAG,EAAEI,KAAK,CAAC,CACfJ,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAChB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,4BAA4B,EAAE;MAAEgB;IAAM,CAAE,CAAC;EACvG;EAEAM,oBAAoBA,CAACC,QAAiB,EAAEX,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC3H,MAAMC,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAC5BqB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAChB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,8BAA8BuB,QAAQ,EAAE,EAAE;MAAEP;IAAM,CAAE,CAAC;EACnH;EAEAQ,uBAAuBA,CAACC,SAAiB,EAAEb,IAAA,GAAe,CAAC,EAAEC,IAAA,GAAe,EAAE,EAAEC,MAAA,GAAiB,MAAM,EAAEC,OAAA,GAAkB,KAAK;IAC9H,MAAMC,MAAM,GAAG,IAAIpB,UAAU,EAAE,CAC5BqB,GAAG,CAAC,MAAM,EAAEL,IAAI,CAACM,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,MAAM,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAC5BD,GAAG,CAAC,QAAQ,EAAEH,MAAM,CAAC,CACrBG,GAAG,CAAC,SAAS,EAAEF,OAAO,CAAC;IAE1B,OAAO,IAAI,CAAChB,IAAI,CAACS,GAAG,CAAyB,GAAG,IAAI,CAACR,OAAO,kCAAkCyB,SAAS,EAAE,EAAE;MAAET;IAAM,CAAE,CAAC;EACxH;EAEAU,oBAAoBA,CAACrB,GAAW;IAC9B,OAAO,IAAI,CAACN,IAAI,CAAC4B,KAAK,CAAwB,GAAG,IAAI,CAAC3B,OAAO,2BAA2BK,GAAG,gBAAgB,EAAE,EAAE,CAAC;EAClH;EAEAuB,cAAcA,CAACvB,GAAW;IACxB,OAAO,IAAI,CAACN,IAAI,CAAC8B,MAAM,CAAoB,GAAG,IAAI,CAAC7B,OAAO,2BAA2BK,GAAG,EAAE,CAAC;EAC7F;EAEAyB,gBAAgBA,CAAA;IACd,OAAO,IAAI,CAAC/B,IAAI,CAACS,GAAG,CAA6B,GAAG,IAAI,CAACR,OAAO,2BAA2B,CAAC;EAC9F;;;uCAlFWH,eAAe,EAAAkC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfrC,eAAe;MAAAsC,OAAA,EAAftC,eAAe,CAAAuC,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}