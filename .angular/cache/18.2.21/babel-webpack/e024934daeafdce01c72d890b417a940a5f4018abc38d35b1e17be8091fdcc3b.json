{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WardService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080/api/admin/v1';\n  }\n  // Get all wards with pagination and search\n  getWards(params = {}) {\n    let httpParams = new HttpParams();\n    if (params.page !== undefined) httpParams = httpParams.set('page', params.page.toString());\n    if (params.size !== undefined) httpParams = httpParams.set('size', params.size.toString());\n    if (params.sortBy) httpParams = httpParams.set('sortBy', params.sortBy);\n    if (params.sortDir) httpParams = httpParams.set('sortDir', params.sortDir);\n    if (params.search) httpParams = httpParams.set('search', params.search);\n    if (params.districtId !== undefined) httpParams = httpParams.set('districtId', params.districtId.toString());\n    if (params.regionId !== undefined) httpParams = httpParams.set('regionId', params.regionId.toString());\n    if (params.isActive !== undefined) httpParams = httpParams.set('isActive', params.isActive.toString());\n    return this.http.get(`${this.API_URL}/wards`, {\n      params: httpParams\n    });\n  }\n  // Get ward by UID\n  getWardByUid(uid) {\n    return this.http.get(`${this.API_URL}/wards/uid/${uid}`);\n  }\n  // Create new ward\n  createWard(ward) {\n    return this.http.post(`${this.API_URL}/wards`, ward);\n  }\n  // Update ward by UID\n  updateWard(uid, ward) {\n    return this.http.put(`${this.API_URL}/wards/uid/${uid}`, ward);\n  }\n  // Delete ward by UID\n  deleteWard(uid) {\n    return this.http.delete(`${this.API_URL}/wards/uid/${uid}`);\n  }\n  // Get ward statistics\n  getWardStats() {\n    return this.http.get(`${this.API_URL}/wards/stats`);\n  }\n  // Get wards by district\n  getWardsByDistrict(districtId) {\n    return this.http.get(`${this.API_URL}/wards/district/${districtId}`);\n  }\n  // Get wards by region\n  getWardsByRegion(regionId) {\n    return this.http.get(`${this.API_URL}/wards/region/${regionId}`);\n  }\n  static {\n    this.ɵfac = function WardService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WardService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WardService,\n      factory: WardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","WardService","constructor","http","API_URL","getWards","params","httpParams","page","undefined","set","toString","size","sortBy","sortDir","search","districtId","regionId","isActive","get","getWardByUid","uid","createWard","ward","post","updateWard","put","deleteWard","delete","getWardStats","getWardsByDistrict","getWardsByRegion","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\core\\services\\ward.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Ward, CreateWardRequest, UpdateWardRequest, WardStats, WardSearchParams } from '../models/ward.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WardService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all wards with pagination and search\r\n  getWards(params: WardSearchParams = {}): Observable<PageResponse<Ward>> {\r\n    let httpParams = new HttpParams();\r\n    \r\n    if (params.page !== undefined) httpParams = httpParams.set('page', params.page.toString());\r\n    if (params.size !== undefined) httpParams = httpParams.set('size', params.size.toString());\r\n    if (params.sortBy) httpParams = httpParams.set('sortBy', params.sortBy);\r\n    if (params.sortDir) httpParams = httpParams.set('sortDir', params.sortDir);\r\n    if (params.search) httpParams = httpParams.set('search', params.search);\r\n    if (params.districtId !== undefined) httpParams = httpParams.set('districtId', params.districtId.toString());\r\n    if (params.regionId !== undefined) httpParams = httpParams.set('regionId', params.regionId.toString());\r\n    if (params.isActive !== undefined) httpParams = httpParams.set('isActive', params.isActive.toString());\r\n\r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards`, { params: httpParams });\r\n  }\r\n\r\n  // Get ward by UID\r\n  getWardByUid(uid: string): Observable<ApiResponse<Ward>> {\r\n    return this.http.get<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}`);\r\n  }\r\n\r\n  // Create new ward\r\n  createWard(ward: CreateWardRequest): Observable<ApiResponse<Ward>> {\r\n    return this.http.post<ApiResponse<Ward>>(`${this.API_URL}/wards`, ward);\r\n  }\r\n\r\n  // Update ward by UID\r\n  updateWard(uid: string, ward: UpdateWardRequest): Observable<ApiResponse<Ward>> {\r\n    return this.http.put<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}`, ward);\r\n  }\r\n\r\n  // Delete ward by UID\r\n  deleteWard(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/wards/uid/${uid}`);\r\n  }\r\n\r\n  // Get ward statistics\r\n  getWardStats(): Observable<ApiResponse<WardStats>> {\r\n    return this.http.get<ApiResponse<WardStats>>(`${this.API_URL}/wards/stats`);\r\n  }\r\n\r\n  // Get wards by district\r\n  getWardsByDistrict(districtId: number): Observable<ApiResponse<Ward[]>> {\r\n    return this.http.get<ApiResponse<Ward[]>>(`${this.API_URL}/wards/district/${districtId}`);\r\n  }\r\n\r\n  // Get wards by region\r\n  getWardsByRegion(regionId: number): Observable<ApiResponse<Ward[]>> {\r\n    return this.http.get<ApiResponse<Ward[]>>(`${this.API_URL}/wards/region/${regionId}`);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}