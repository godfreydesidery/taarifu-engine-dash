{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Validators, ReactiveFormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../core/services/region.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../../../core/services/toast.service\";\nimport * as i5 from \"@angular/common\";\nfunction RegionFormComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵtext(1, \" Region name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegionFormComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 46);\n    i0.ɵɵtext(1, \" Region name must not exceed 100 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction RegionFormComponent_span_78_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 47);\n  }\n}\nexport let RegionFormComponent = /*#__PURE__*/(() => {\n  class RegionFormComponent {\n    constructor(fb, regionService, router, route, toastService) {\n      this.fb = fb;\n      this.regionService = regionService;\n      this.router = router;\n      this.route = route;\n      this.toastService = toastService;\n      this.isEditMode = false;\n      this.isLoading = false;\n      this.regionId = null;\n      this.regionForm = this.fb.group({\n        name: ['', [Validators.required, Validators.maxLength(100)]],\n        capital: ['', [Validators.maxLength(100)]],\n        population: [null, [Validators.min(0)]],\n        areaSqKm: [null, [Validators.min(0)]],\n        latitude: [null],\n        longitude: [null],\n        commissioner: ['', [Validators.maxLength(100)]],\n        description: ['', [Validators.maxLength(500)]],\n        isActive: [true]\n      });\n    }\n    ngOnInit() {\n      this.regionId = this.route.snapshot.paramMap.get('uid');\n      this.isEditMode = !!this.regionId;\n      if (this.isEditMode && this.regionId) {\n        this.loadRegion(this.regionId);\n      }\n    }\n    loadRegion(uid) {\n      this.isLoading = true;\n      console.log('Loading region with UID:', uid);\n      this.regionService.getRegionByUid(uid).subscribe({\n        next: response => {\n          this.isLoading = false;\n          console.log('Region API Response:', response);\n          if (response.status) {\n            const region = response.data;\n            console.log('Region data:', region);\n            this.regionForm.patchValue({\n              name: region.name,\n              capital: region.capital,\n              population: region.population,\n              areaSqKm: region.areaSqKm,\n              latitude: region.latitude,\n              longitude: region.longitude,\n              commissioner: region.commissioner,\n              description: region.description,\n              isActive: region.isActive\n            });\n          }\n        },\n        error: error => {\n          this.isLoading = false;\n          console.error('Error loading region:', error);\n          console.error('Error status:', error.status);\n          console.error('Error details:', error.error);\n          this.toastService.error('Error Loading Region', error.error?.message || error.message || 'Unknown error');\n          this.goBack();\n        }\n      });\n    }\n    onSubmit() {\n      if (this.regionForm.valid) {\n        this.isLoading = true;\n        const formData = this.regionForm.value;\n        if (this.isEditMode && this.regionId) {\n          const updateRequest = {\n            name: formData.name,\n            capital: formData.capital,\n            population: formData.population,\n            areaSqKm: formData.areaSqKm,\n            latitude: formData.latitude,\n            longitude: formData.longitude,\n            commissioner: formData.commissioner,\n            description: formData.description,\n            isActive: formData.isActive\n          };\n          this.regionService.updateRegion(this.regionId, updateRequest).subscribe({\n            next: response => {\n              this.isLoading = false;\n              if (response.status) {\n                this.toastService.success('Region Updated', 'Region updated successfully!');\n                this.goBack();\n              }\n            },\n            error: error => {\n              this.isLoading = false;\n              console.error('Error updating region:', error);\n              this.toastService.error('Error Updating Region', 'Failed to update region');\n            }\n          });\n        } else {\n          const createRequest = {\n            name: formData.name,\n            capital: formData.capital,\n            population: formData.population,\n            areaSqKm: formData.areaSqKm,\n            latitude: formData.latitude,\n            longitude: formData.longitude,\n            commissioner: formData.commissioner,\n            description: formData.description,\n            isActive: formData.isActive\n          };\n          this.regionService.createRegion(createRequest).subscribe({\n            next: response => {\n              this.isLoading = false;\n              if (response.status) {\n                this.toastService.success('Region Created', 'Region created successfully!');\n                this.goBack();\n              }\n            },\n            error: error => {\n              this.isLoading = false;\n              console.error('Error creating region:', error);\n              this.toastService.error('Error Creating Region', 'Failed to create region');\n            }\n          });\n        }\n      } else {\n        this.markFormGroupTouched();\n      }\n    }\n    markFormGroupTouched() {\n      Object.keys(this.regionForm.controls).forEach(key => {\n        const control = this.regionForm.get(key);\n        control?.markAsTouched();\n      });\n    }\n    goBack() {\n      this.router.navigate(['/regions']);\n    }\n    static {\n      this.ɵfac = function RegionFormComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || RegionFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.RegionService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i4.ToastService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: RegionFormComponent,\n        selectors: [[\"app-region-form\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 120,\n        vars: 10,\n        consts: [[1, \"container-fluid\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-4\"], [1, \"h3\", \"mb-1\"], [1, \"text-muted\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-left\", \"me-1\"], [1, \"row\"], [1, \"col-lg-8\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"bi\", \"bi-geo-alt\", \"me-2\"], [1, \"card-body\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"col-md-6\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [1, \"text-danger\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Enter region name\", 1, \"form-control\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"capital\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"capital\", \"formControlName\", \"capital\", \"placeholder\", \"Enter capital city\", 1, \"form-control\"], [\"for\", \"population\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"population\", \"formControlName\", \"population\", \"min\", \"0\", \"placeholder\", \"Enter population\", 1, \"form-control\"], [\"for\", \"areaSqKm\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"areaSqKm\", \"formControlName\", \"areaSqKm\", \"min\", \"0\", \"step\", \"0.01\", \"placeholder\", \"Enter area in square kilometers\", 1, \"form-control\"], [\"for\", \"latitude\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"latitude\", \"formControlName\", \"latitude\", \"step\", \"0.000001\", \"placeholder\", \"Enter latitude\", 1, \"form-control\"], [\"for\", \"longitude\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"longitude\", \"formControlName\", \"longitude\", \"step\", \"0.000001\", \"placeholder\", \"Enter longitude\", 1, \"form-control\"], [\"for\", \"commissioner\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"commissioner\", \"formControlName\", \"commissioner\", \"placeholder\", \"Enter commissioner name\", 1, \"form-control\"], [1, \"form-label\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"id\", \"isActive\", \"formControlName\", \"isActive\", 1, \"form-check-input\"], [\"for\", \"isActive\", 1, \"form-check-label\"], [\"for\", \"description\", 1, \"form-label\"], [\"id\", \"description\", \"formControlName\", \"description\", \"rows\", \"3\", \"placeholder\", \"Enter region description\", 1, \"form-control\"], [1, \"d-flex\", \"justify-content-end\", \"gap-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-2\", \"role\", \"status\", 4, \"ngIf\"], [1, \"col-lg-4\"], [1, \"bi\", \"bi-info-circle\", \"me-2\"], [1, \"list-unstyled\", \"small\", \"text-muted\"], [1, \"mt-3\"], [1, \"invalid-feedback\"], [\"role\", \"status\", 1, \"spinner-border\", \"spinner-border-sm\", \"me-2\"]],\n        template: function RegionFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\")(3, \"h1\", 2);\n            i0.ɵɵtext(4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"p\", 3);\n            i0.ɵɵtext(6);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(7, \"button\", 4);\n            i0.ɵɵlistener(\"click\", function RegionFormComponent_Template_button_click_7_listener() {\n              return ctx.goBack();\n            });\n            i0.ɵɵelement(8, \"i\", 5);\n            i0.ɵɵtext(9, \" Back \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(10, \"div\", 6)(11, \"div\", 7)(12, \"div\", 8)(13, \"div\", 9)(14, \"h5\", 10);\n            i0.ɵɵelement(15, \"i\", 11);\n            i0.ɵɵtext(16, \" Region Information \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(17, \"div\", 12)(18, \"form\", 13);\n            i0.ɵɵlistener(\"ngSubmit\", function RegionFormComponent_Template_form_ngSubmit_18_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(19, \"div\", 6)(20, \"div\", 14)(21, \"div\", 15)(22, \"label\", 16);\n            i0.ɵɵtext(23, \"Region Name \");\n            i0.ɵɵelementStart(24, \"span\", 17);\n            i0.ɵɵtext(25, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(26, \"input\", 18);\n            i0.ɵɵtemplate(27, RegionFormComponent_div_27_Template, 2, 0, \"div\", 19)(28, RegionFormComponent_div_28_Template, 2, 0, \"div\", 19);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(29, \"div\", 14)(30, \"div\", 15)(31, \"label\", 20);\n            i0.ɵɵtext(32, \"Capital\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(33, \"input\", 21);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(34, \"div\", 6)(35, \"div\", 14)(36, \"div\", 15)(37, \"label\", 22);\n            i0.ɵɵtext(38, \"Population\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(39, \"input\", 23);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(40, \"div\", 14)(41, \"div\", 15)(42, \"label\", 24);\n            i0.ɵɵtext(43, \"Area (km\\u00B2)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(44, \"input\", 25);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(45, \"div\", 6)(46, \"div\", 14)(47, \"div\", 15)(48, \"label\", 26);\n            i0.ɵɵtext(49, \"Latitude\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(50, \"input\", 27);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(51, \"div\", 14)(52, \"div\", 15)(53, \"label\", 28);\n            i0.ɵɵtext(54, \"Longitude\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(55, \"input\", 29);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(56, \"div\", 6)(57, \"div\", 14)(58, \"div\", 15)(59, \"label\", 30);\n            i0.ɵɵtext(60, \"Regional Commissioner\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(61, \"input\", 31);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(62, \"div\", 14)(63, \"div\", 15)(64, \"label\", 32);\n            i0.ɵɵtext(65, \"Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(66, \"div\", 33);\n            i0.ɵɵelement(67, \"input\", 34);\n            i0.ɵɵelementStart(68, \"label\", 35);\n            i0.ɵɵtext(69, \" Active \");\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(70, \"div\", 15)(71, \"label\", 36);\n            i0.ɵɵtext(72, \"Description\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(73, \"textarea\", 37);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(74, \"div\", 38)(75, \"button\", 39);\n            i0.ɵɵlistener(\"click\", function RegionFormComponent_Template_button_click_75_listener() {\n              return ctx.goBack();\n            });\n            i0.ɵɵtext(76, \" Cancel \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(77, \"button\", 40);\n            i0.ɵɵtemplate(78, RegionFormComponent_span_78_Template, 1, 0, \"span\", 41);\n            i0.ɵɵtext(79);\n            i0.ɵɵelementEnd()()()()()();\n            i0.ɵɵelementStart(80, \"div\", 42)(81, \"div\", 8)(82, \"div\", 9)(83, \"h6\", 10);\n            i0.ɵɵelement(84, \"i\", 43);\n            i0.ɵɵtext(85, \" Help & Guidelines \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(86, \"div\", 12)(87, \"h6\");\n            i0.ɵɵtext(88, \"Required Fields\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(89, \"ul\", 44)(90, \"li\");\n            i0.ɵɵtext(91, \"\\u2022 Region Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(92, \"li\");\n            i0.ɵɵtext(93, \"\\u2022 Capital\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(94, \"li\");\n            i0.ɵɵtext(95, \"\\u2022 Commissioner\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(96, \"h6\", 45);\n            i0.ɵɵtext(97, \"Optional Fields\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(98, \"ul\", 44)(99, \"li\");\n            i0.ɵɵtext(100, \"\\u2022 Population\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(101, \"li\");\n            i0.ɵɵtext(102, \"\\u2022 Area (km\\u00B2)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(103, \"li\");\n            i0.ɵɵtext(104, \"\\u2022 Coordinates (Latitude/Longitude)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(105, \"li\");\n            i0.ɵɵtext(106, \"\\u2022 Description\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(107, \"h6\", 45);\n            i0.ɵɵtext(108, \"Tips\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(109, \"ul\", 44)(110, \"li\");\n            i0.ɵɵtext(111, \"\\u2022 Use official region names\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(112, \"li\");\n            i0.ɵɵtext(113, \"\\u2022 Capital should be the main city\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(114, \"li\");\n            i0.ɵɵtext(115, \"\\u2022 Use precise coordinates for mapping\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(116, \"li\");\n            i0.ɵɵtext(117, \"\\u2022 Population should be current estimates\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(118, \"li\");\n            i0.ɵɵtext(119, \"\\u2022 Keep descriptions concise and informative\");\n            i0.ɵɵelementEnd()()()()()()();\n          }\n          if (rf & 2) {\n            let tmp_3_0;\n            let tmp_4_0;\n            let tmp_5_0;\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate(ctx.isEditMode ? \"Edit Region\" : \"Create Region\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.isEditMode ? \"Update region information\" : \"Add a new region to the system\");\n            i0.ɵɵadvance(12);\n            i0.ɵɵproperty(\"formGroup\", ctx.regionForm);\n            i0.ɵɵadvance(8);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_3_0 = ctx.regionForm.get(\"name\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.regionForm.get(\"name\")) == null ? null : tmp_3_0.touched));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.regionForm.get(\"name\")) == null ? null : tmp_4_0.hasError(\"required\"));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_5_0 = ctx.regionForm.get(\"name\")) == null ? null : tmp_5_0.hasError(\"maxlength\"));\n            i0.ɵɵadvance(49);\n            i0.ɵɵproperty(\"disabled\", ctx.regionForm.invalid || ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Saving...\" : ctx.isEditMode ? \"Update Region\" : \"Create Region\", \" \");\n          }\n        },\n        dependencies: [CommonModule, i5.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.CheckboxControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MinValidator, i1.FormGroupDirective, i1.FormControlName],\n        styles: [\".container-fluid[_ngcontent-%COMP%]{max-width:1200px;margin:0 auto;padding:0 1rem}.card[_ngcontent-%COMP%]{border:none;box-shadow:0 .125rem .25rem #00000013}.card-header[_ngcontent-%COMP%]{background-color:#f8f9fa;border-bottom:1px solid #dee2e6}.form-label[_ngcontent-%COMP%]{font-weight:500;color:#495057}.text-danger[_ngcontent-%COMP%]{color:#dc3545!important}\"]\n      });\n    }\n  }\n  return RegionFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}