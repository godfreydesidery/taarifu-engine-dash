{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HamletService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080/api/admin/v1';\n  }\n  getAllHamlets(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/hamlets`, {\n      params\n    });\n  }\n  searchHamlets(query, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('q', query).set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/hamlets/search`, {\n      params\n    });\n  }\n  getHamletByUid(uid) {\n    return this.http.get(`${this.API_URL}/hamlets/uid/${uid}`);\n  }\n  createHamlet(request) {\n    return this.http.post(`${this.API_URL}/hamlets`, request);\n  }\n  updateHamlet(uid, request) {\n    return this.http.put(`${this.API_URL}/hamlets/uid/${uid}`, request);\n  }\n  deleteHamlet(uid) {\n    return this.http.delete(`${this.API_URL}/hamlets/uid/${uid}`);\n  }\n  getHamletStats() {\n    return this.http.get(`${this.API_URL}/hamlets/stats`);\n  }\n  getHamletsByVillageUid(villageUid, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/hamlets/village/uid/${villageUid}`, {\n      params\n    });\n  }\n  getActiveHamlets(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/hamlets/active`, {\n      params\n    });\n  }\n  getHamletsByStatus(isActive, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/hamlets/status/${isActive}`, {\n      params\n    });\n  }\n  toggleHamletStatus(uid) {\n    return this.http.patch(`${this.API_URL}/hamlets/uid/${uid}/toggle-status`, {});\n  }\n  static {\n    this.ɵfac = function HamletService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HamletService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: HamletService,\n      factory: HamletService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","HamletService","constructor","http","API_URL","getAllHamlets","page","size","sortBy","sortDir","params","set","toString","get","searchHamlets","query","getHamletByUid","uid","createHamlet","request","post","updateHamlet","put","deleteHamlet","delete","getHamletStats","getHamletsByVillageUid","villageUid","getActiveHamlets","getHamletsByStatus","isActive","toggleHamletStatus","patch","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\core\\services\\hamlet.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Hamlet, \r\n  CreateHamletRequest, \r\n  UpdateHamletRequest, \r\n  HamletStats \r\n} from '../models/hamlet.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HamletService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAllHamlets(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets`, { params });\r\n  }\r\n\r\n  searchHamlets(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/search`, { params });\r\n  }\r\n\r\n  getHamletByUid(uid: string): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.get<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}`);\r\n  }\r\n\r\n  createHamlet(request: CreateHamletRequest): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.post<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets`, request);\r\n  }\r\n\r\n  updateHamlet(uid: string, request: UpdateHamletRequest): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.put<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}`, request);\r\n  }\r\n\r\n  deleteHamlet(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/hamlets/uid/${uid}`);\r\n  }\r\n\r\n  getHamletStats(): Observable<ApiResponse<HamletStats>> {\r\n    return this.http.get<ApiResponse<HamletStats>>(`${this.API_URL}/hamlets/stats`);\r\n  }\r\n\r\n  getHamletsByVillageUid(villageUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/village/uid/${villageUid}`, { params });\r\n  }\r\n\r\n  getActiveHamlets(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/active`, { params });\r\n  }\r\n\r\n  getHamletsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Hamlet>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    return this.http.get<PageResponse<Hamlet>>(`${this.API_URL}/hamlets/status/${isActive}`, { params });\r\n  }\r\n\r\n  toggleHamletStatus(uid: string): Observable<ApiResponse<Hamlet>> {\r\n    return this.http.patch<ApiResponse<Hamlet>>(`${this.API_URL}/hamlets/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}