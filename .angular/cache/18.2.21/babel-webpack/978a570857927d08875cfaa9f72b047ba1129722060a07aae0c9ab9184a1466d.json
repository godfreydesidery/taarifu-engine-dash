{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Validators, ReactiveFormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../core/services/hamlet.service\";\nimport * as i3 from \"../../../core/services/region.service\";\nimport * as i4 from \"../../../core/services/district.service\";\nimport * as i5 from \"../../../core/services/ward.service\";\nimport * as i6 from \"../../../core/services/village.service\";\nimport * as i7 from \"@angular/router\";\nimport * as i8 from \"../../../core/services/toast.service\";\nimport * as i9 from \"@angular/common\";\nfunction HamletFormComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Hamlet name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Hamlet name must not exceed 100 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_option_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const region_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", region_r1.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(region_r1.name);\n  }\n}\nfunction HamletFormComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Region is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_option_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const district_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", district_r2.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(district_r2.name);\n  }\n}\nfunction HamletFormComponent_div_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" District is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_option_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ward_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", ward_r3.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ward_r3.name);\n  }\n}\nfunction HamletFormComponent_div_62_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Ward is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_option_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const village_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", village_r4.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(village_r4.name);\n  }\n}\nfunction HamletFormComponent_div_74_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Village is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_div_82_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Headquarters is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_span_127_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 58);\n  }\n}\nexport class HamletFormComponent {\n  constructor(fb, hamletService, regionService, districtService, wardService, villageService, router, route, toastService) {\n    this.fb = fb;\n    this.hamletService = hamletService;\n    this.regionService = regionService;\n    this.districtService = districtService;\n    this.wardService = wardService;\n    this.villageService = villageService;\n    this.router = router;\n    this.route = route;\n    this.toastService = toastService;\n    this.isEditMode = false;\n    this.hamletId = null;\n    this.isLoading = false;\n    this.regions = [];\n    this.districts = [];\n    this.wards = [];\n    this.villages = [];\n    this.filteredDistricts = [];\n    this.filteredWards = [];\n    this.filteredVillages = [];\n    this.hamletForm = this.fb.group({\n      name: ['', [Validators.required, Validators.maxLength(100)]],\n      regionId: [null, [Validators.required]],\n      districtId: [null, [Validators.required]],\n      wardId: [null, [Validators.required]],\n      villageId: [null, [Validators.required]],\n      headquarters: ['', [Validators.required, Validators.maxLength(100)]],\n      population: [null, [Validators.min(0)]],\n      areaSqKm: [null, [Validators.min(0)]],\n      latitude: [null],\n      longitude: [null],\n      executiveOfficer: ['', [Validators.maxLength(100)]],\n      description: ['', [Validators.maxLength(500)]],\n      isActive: [true]\n    });\n  }\n  ngOnInit() {\n    this.loadRegions();\n    this.loadDistricts();\n    this.loadWards();\n    this.loadVillages();\n    this.route.paramMap.subscribe(params => {\n      this.hamletId = params.get('uid');\n      if (this.hamletId) {\n        this.isEditMode = true;\n        this.loadHamlet(this.hamletId);\n      }\n    });\n  }\n  loadRegions() {\n    this.regionService.getAllRegions(0, 1000).subscribe({\n      next: response => {\n        this.regions = response.data || [];\n      },\n      error: error => {\n        console.error('Error loading regions:', error);\n      }\n    });\n  }\n  loadDistricts() {\n    this.districtService.getAllDistricts(0, 1000).subscribe({\n      next: response => {\n        this.districts = response.data || [];\n        this.filteredDistricts = this.districts;\n      },\n      error: error => {\n        console.error('Error loading districts:', error);\n      }\n    });\n  }\n  loadWards() {\n    this.wardService.getAllWards(0, 1000).subscribe({\n      next: response => {\n        this.wards = response.data || [];\n        this.filteredWards = this.wards;\n      },\n      error: error => {\n        console.error('Error loading wards:', error);\n      }\n    });\n  }\n  loadVillages() {\n    this.villageService.getAllVillages(0, 1000).subscribe({\n      next: response => {\n        this.villages = response.data || [];\n        this.filteredVillages = this.villages;\n      },\n      error: error => {\n        console.error('Error loading villages:', error);\n      }\n    });\n  }\n  loadHamlet(uid) {\n    this.isLoading = true;\n    this.hamletService.getHamletByUid(uid).subscribe({\n      next: response => {\n        this.isLoading = false;\n        if (response.status) {\n          const hamlet = response.data;\n          this.hamletForm.patchValue({\n            name: hamlet.name,\n            regionId: hamlet.regionId,\n            districtId: hamlet.districtId,\n            wardId: hamlet.wardId,\n            villageId: hamlet.villageId,\n            headquarters: hamlet.headquarters,\n            population: hamlet.population,\n            areaSqKm: hamlet.areaSqKm,\n            latitude: hamlet.latitude,\n            longitude: hamlet.longitude,\n            executiveOfficer: hamlet.executiveOfficer,\n            description: hamlet.description,\n            isActive: hamlet.isActive\n          });\n          // Filter cascading dropdowns based on selected values\n          this.onRegionChange();\n          this.onDistrictChange();\n          this.onWardChange();\n        }\n      },\n      error: error => {\n        this.isLoading = false;\n        console.error('Error loading hamlet:', error);\n        this.toastService.error('Error Loading Hamlet', error.error?.message || error.message || 'Unknown error');\n        this.goBack();\n      }\n    });\n  }\n  onRegionChange() {\n    const selectedRegionId = this.hamletForm.get('regionId')?.value;\n    if (selectedRegionId) {\n      const selectedRegion = this.regions.find(r => r.id === Number(selectedRegionId));\n      if (selectedRegion) {\n        this.districtService.getDistrictsByRegionUid(selectedRegion.uid, 0, 1000).subscribe({\n          next: response => {\n            this.filteredDistricts = response.data || [];\n            // Reset district selection if current selection is not in filtered list\n            const currentDistrictId = this.hamletForm.get('districtId')?.value;\n            if (currentDistrictId && !this.filteredDistricts.find(d => d.id === currentDistrictId)) {\n              this.hamletForm.patchValue({\n                districtId: null\n              });\n              this.onDistrictChange();\n            }\n          },\n          error: error => {\n            console.error('Error loading districts for region:', error);\n            this.filteredDistricts = [];\n          }\n        });\n      }\n    } else {\n      this.filteredDistricts = this.districts;\n      this.hamletForm.patchValue({\n        districtId: null\n      });\n      this.onDistrictChange();\n    }\n  }\n  onDistrictChange() {\n    const selectedDistrictId = this.hamletForm.get('districtId')?.value;\n    if (selectedDistrictId) {\n      const selectedDistrict = this.districts.find(d => d.id === Number(selectedDistrictId));\n      if (selectedDistrict) {\n        this.wardService.getWardsByDistrictUid(selectedDistrict.uid, 0, 1000).subscribe({\n          next: response => {\n            this.filteredWards = response.data || [];\n            // Reset ward selection if current selection is not in filtered list\n            const currentWardId = this.hamletForm.get('wardId')?.value;\n            if (currentWardId && !this.filteredWards.find(w => w.id === currentWardId)) {\n              this.hamletForm.patchValue({\n                wardId: null\n              });\n              this.onWardChange();\n            }\n          },\n          error: error => {\n            console.error('Error loading wards for district:', error);\n            this.filteredWards = [];\n          }\n        });\n      }\n    } else {\n      this.filteredWards = this.wards;\n      this.hamletForm.patchValue({\n        wardId: null\n      });\n      this.onWardChange();\n    }\n  }\n  onWardChange() {\n    const selectedWardId = this.hamletForm.get('wardId')?.value;\n    if (selectedWardId) {\n      const selectedWard = this.wards.find(w => w.id === Number(selectedWardId));\n      if (selectedWard) {\n        this.villageService.getVillagesByWardUid(selectedWard.uid, 0, 1000).subscribe({\n          next: response => {\n            this.filteredVillages = response.data || [];\n            // Reset village selection if current selection is not in filtered list\n            const currentVillageId = this.hamletForm.get('villageId')?.value;\n            if (currentVillageId && !this.filteredVillages.find(v => v.id === currentVillageId)) {\n              this.hamletForm.patchValue({\n                villageId: null\n              });\n            }\n          },\n          error: error => {\n            console.error('Error loading villages for ward:', error);\n            this.filteredVillages = [];\n          }\n        });\n      }\n    } else {\n      this.filteredVillages = this.villages;\n      this.hamletForm.patchValue({\n        villageId: null\n      });\n    }\n  }\n  onSubmit() {\n    if (this.hamletForm.valid) {\n      this.isLoading = true;\n      const formData = this.hamletForm.value;\n      if (this.isEditMode && this.hamletId) {\n        const updateRequest = {\n          name: formData.name,\n          villageId: formData.villageId,\n          headquarters: formData.headquarters,\n          population: formData.population,\n          areaSqKm: formData.areaSqKm,\n          latitude: formData.latitude,\n          longitude: formData.longitude,\n          executiveOfficer: formData.executiveOfficer,\n          description: formData.description,\n          isActive: formData.isActive\n        };\n        this.hamletService.updateHamlet(this.hamletId, updateRequest).subscribe({\n          next: response => {\n            this.isLoading = false;\n            if (response.status) {\n              this.toastService.success('Hamlet Updated', 'Hamlet updated successfully!');\n              this.goBack();\n            }\n          },\n          error: error => {\n            this.isLoading = false;\n            console.error('Error updating hamlet:', error);\n            this.toastService.error('Error Updating Hamlet', error.error?.message || error.message || 'Unknown error');\n          }\n        });\n      } else {\n        const createRequest = {\n          name: formData.name,\n          villageId: formData.villageId,\n          headquarters: formData.headquarters,\n          population: formData.population,\n          areaSqKm: formData.areaSqKm,\n          latitude: formData.latitude,\n          longitude: formData.longitude,\n          executiveOfficer: formData.executiveOfficer,\n          description: formData.description,\n          isActive: formData.isActive\n        };\n        this.hamletService.createHamlet(createRequest).subscribe({\n          next: response => {\n            this.isLoading = false;\n            if (response.status) {\n              this.toastService.success('Hamlet Created', 'Hamlet created successfully!');\n              this.goBack();\n            }\n          },\n          error: error => {\n            this.isLoading = false;\n            console.error('Error creating hamlet:', error);\n            this.toastService.error('Error Creating Hamlet', error.error?.message || error.message || 'Unknown error');\n          }\n        });\n      }\n    }\n  }\n  goBack() {\n    this.router.navigate(['/hamlets']);\n  }\n  static {\n    this.ɵfac = function HamletFormComponent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || HamletFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HamletService), i0.ɵɵdirectiveInject(i3.RegionService), i0.ɵɵdirectiveInject(i4.DistrictService), i0.ɵɵdirectiveInject(i5.WardService), i0.ɵɵdirectiveInject(i6.VillageService), i0.ɵɵdirectiveInject(i7.Router), i0.ɵɵdirectiveInject(i7.ActivatedRoute), i0.ɵɵdirectiveInject(i8.ToastService));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: HamletFormComponent,\n      selectors: [[\"app-hamlet-form\"]],\n      standalone: true,\n      features: [i0.ɵɵStandaloneFeature],\n      decls: 179,\n      vars: 29,\n      consts: [[1, \"container-fluid\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-4\"], [1, \"h3\", \"mb-1\"], [1, \"text-muted\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-left\", \"me-1\"], [1, \"row\"], [1, \"col-lg-8\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"bi\", \"bi-house-door-fill\", \"me-2\"], [1, \"card-body\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"col-md-6\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [1, \"text-danger\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Enter hamlet name\", 1, \"form-control\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"regionId\", 1, \"form-label\"], [\"id\", \"regionId\", \"formControlName\", \"regionId\", 1, \"form-select\", 3, \"change\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"districtId\", 1, \"form-label\"], [\"id\", \"districtId\", \"formControlName\", \"districtId\", 1, \"form-select\", 3, \"change\"], [\"for\", \"wardId\", 1, \"form-label\"], [\"id\", \"wardId\", \"formControlName\", \"wardId\", 1, \"form-select\", 3, \"change\"], [\"for\", \"villageId\", 1, \"form-label\"], [\"id\", \"villageId\", \"formControlName\", \"villageId\", 1, \"form-select\"], [\"for\", \"headquarters\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"headquarters\", \"formControlName\", \"headquarters\", \"placeholder\", \"Enter headquarters\", 1, \"form-control\"], [\"for\", \"population\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"population\", \"formControlName\", \"population\", \"min\", \"0\", \"placeholder\", \"Enter population\", 1, \"form-control\"], [\"for\", \"areaSqKm\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"areaSqKm\", \"formControlName\", \"areaSqKm\", \"min\", \"0\", \"step\", \"0.01\", \"placeholder\", \"Enter area in square kilometers\", 1, \"form-control\"], [\"for\", \"latitude\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"latitude\", \"formControlName\", \"latitude\", \"step\", \"0.000001\", \"placeholder\", \"Enter latitude\", 1, \"form-control\"], [\"for\", \"longitude\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"longitude\", \"formControlName\", \"longitude\", \"step\", \"0.000001\", \"placeholder\", \"Enter longitude\", 1, \"form-control\"], [\"for\", \"executiveOfficer\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"executiveOfficer\", \"formControlName\", \"executiveOfficer\", \"placeholder\", \"Enter executive officer name\", 1, \"form-control\"], [1, \"form-label\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"id\", \"isActive\", \"formControlName\", \"isActive\", 1, \"form-check-input\"], [\"for\", \"isActive\", 1, \"form-check-label\"], [\"for\", \"description\", 1, \"form-label\"], [\"id\", \"description\", \"formControlName\", \"description\", \"rows\", \"3\", \"placeholder\", \"Enter hamlet description\", 1, \"form-control\"], [1, \"d-flex\", \"justify-content-end\", \"gap-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-2\", \"role\", \"status\", 4, \"ngIf\"], [1, \"col-lg-4\"], [1, \"bi\", \"bi-info-circle\", \"me-2\"], [1, \"list-unstyled\", \"small\", \"text-muted\"], [1, \"mt-3\"], [1, \"invalid-feedback\"], [3, \"value\"], [\"role\", \"status\", 1, \"spinner-border\", \"spinner-border-sm\", \"me-2\"]],\n      template: function HamletFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\")(3, \"h1\", 2);\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"p\", 3);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"button\", 4);\n          i0.ɵɵlistener(\"click\", function HamletFormComponent_Template_button_click_7_listener() {\n            return ctx.goBack();\n          });\n          i0.ɵɵelement(8, \"i\", 5);\n          i0.ɵɵtext(9, \" Back \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(10, \"div\", 6)(11, \"div\", 7)(12, \"div\", 8)(13, \"div\", 9)(14, \"h5\", 10);\n          i0.ɵɵelement(15, \"i\", 11);\n          i0.ɵɵtext(16, \" Hamlet Information \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(17, \"div\", 12)(18, \"form\", 13);\n          i0.ɵɵlistener(\"ngSubmit\", function HamletFormComponent_Template_form_ngSubmit_18_listener() {\n            return ctx.onSubmit();\n          });\n          i0.ɵɵelementStart(19, \"div\", 6)(20, \"div\", 14)(21, \"div\", 15)(22, \"label\", 16);\n          i0.ɵɵtext(23, \"Hamlet Name \");\n          i0.ɵɵelementStart(24, \"span\", 17);\n          i0.ɵɵtext(25, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(26, \"input\", 18);\n          i0.ɵɵtemplate(27, HamletFormComponent_div_27_Template, 2, 0, \"div\", 19)(28, HamletFormComponent_div_28_Template, 2, 0, \"div\", 19);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(29, \"div\", 14)(30, \"div\", 15)(31, \"label\", 20);\n          i0.ɵɵtext(32, \"Region \");\n          i0.ɵɵelementStart(33, \"span\", 17);\n          i0.ɵɵtext(34, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(35, \"select\", 21);\n          i0.ɵɵlistener(\"change\", function HamletFormComponent_Template_select_change_35_listener() {\n            return ctx.onRegionChange();\n          });\n          i0.ɵɵelementStart(36, \"option\", 22);\n          i0.ɵɵtext(37, \"Select a region\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(38, HamletFormComponent_option_38_Template, 2, 2, \"option\", 23);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(39, HamletFormComponent_div_39_Template, 2, 0, \"div\", 19);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(40, \"div\", 6)(41, \"div\", 14)(42, \"div\", 15)(43, \"label\", 24);\n          i0.ɵɵtext(44, \"District \");\n          i0.ɵɵelementStart(45, \"span\", 17);\n          i0.ɵɵtext(46, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(47, \"select\", 25);\n          i0.ɵɵlistener(\"change\", function HamletFormComponent_Template_select_change_47_listener() {\n            return ctx.onDistrictChange();\n          });\n          i0.ɵɵelementStart(48, \"option\", 22);\n          i0.ɵɵtext(49, \"Select a district\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(50, HamletFormComponent_option_50_Template, 2, 2, \"option\", 23);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(51, HamletFormComponent_div_51_Template, 2, 0, \"div\", 19);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(52, \"div\", 14)(53, \"div\", 15)(54, \"label\", 26);\n          i0.ɵɵtext(55, \"Ward \");\n          i0.ɵɵelementStart(56, \"span\", 17);\n          i0.ɵɵtext(57, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(58, \"select\", 27);\n          i0.ɵɵlistener(\"change\", function HamletFormComponent_Template_select_change_58_listener() {\n            return ctx.onWardChange();\n          });\n          i0.ɵɵelementStart(59, \"option\", 22);\n          i0.ɵɵtext(60, \"Select a ward\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(61, HamletFormComponent_option_61_Template, 2, 2, \"option\", 23);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(62, HamletFormComponent_div_62_Template, 2, 0, \"div\", 19);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(63, \"div\", 6)(64, \"div\", 14)(65, \"div\", 15)(66, \"label\", 28);\n          i0.ɵɵtext(67, \"Village \");\n          i0.ɵɵelementStart(68, \"span\", 17);\n          i0.ɵɵtext(69, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(70, \"select\", 29)(71, \"option\", 22);\n          i0.ɵɵtext(72, \"Select a village\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(73, HamletFormComponent_option_73_Template, 2, 2, \"option\", 23);\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(74, HamletFormComponent_div_74_Template, 2, 0, \"div\", 19);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(75, \"div\", 14)(76, \"div\", 15)(77, \"label\", 30);\n          i0.ɵɵtext(78, \"Headquarters \");\n          i0.ɵɵelementStart(79, \"span\", 17);\n          i0.ɵɵtext(80, \"*\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelement(81, \"input\", 31);\n          i0.ɵɵtemplate(82, HamletFormComponent_div_82_Template, 2, 0, \"div\", 19);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(83, \"div\", 6)(84, \"div\", 14)(85, \"div\", 15)(86, \"label\", 32);\n          i0.ɵɵtext(87, \"Population\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(88, \"input\", 33);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(89, \"div\", 14)(90, \"div\", 15)(91, \"label\", 34);\n          i0.ɵɵtext(92, \"Area (km\\u00B2)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(93, \"input\", 35);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(94, \"div\", 6)(95, \"div\", 14)(96, \"div\", 15)(97, \"label\", 36);\n          i0.ɵɵtext(98, \"Latitude\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(99, \"input\", 37);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(100, \"div\", 14)(101, \"div\", 15)(102, \"label\", 38);\n          i0.ɵɵtext(103, \"Longitude\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(104, \"input\", 39);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(105, \"div\", 6)(106, \"div\", 14)(107, \"div\", 15)(108, \"label\", 40);\n          i0.ɵɵtext(109, \"Executive Officer\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(110, \"input\", 41);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(111, \"div\", 14)(112, \"div\", 15)(113, \"label\", 42);\n          i0.ɵɵtext(114, \"Status\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(115, \"div\", 43);\n          i0.ɵɵelement(116, \"input\", 44);\n          i0.ɵɵelementStart(117, \"label\", 45);\n          i0.ɵɵtext(118, \" Active \");\n          i0.ɵɵelementEnd()()()()();\n          i0.ɵɵelementStart(119, \"div\", 15)(120, \"label\", 46);\n          i0.ɵɵtext(121, \"Description\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelement(122, \"textarea\", 47);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(123, \"div\", 48)(124, \"button\", 49);\n          i0.ɵɵlistener(\"click\", function HamletFormComponent_Template_button_click_124_listener() {\n            return ctx.goBack();\n          });\n          i0.ɵɵtext(125, \" Cancel \");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(126, \"button\", 50);\n          i0.ɵɵtemplate(127, HamletFormComponent_span_127_Template, 1, 0, \"span\", 51);\n          i0.ɵɵtext(128);\n          i0.ɵɵelementEnd()()()()()();\n          i0.ɵɵelementStart(129, \"div\", 52)(130, \"div\", 8)(131, \"div\", 9)(132, \"h6\", 10);\n          i0.ɵɵelement(133, \"i\", 53);\n          i0.ɵɵtext(134, \" Help & Guidelines \");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(135, \"div\", 12)(136, \"h6\");\n          i0.ɵɵtext(137, \"Required Fields\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(138, \"ul\", 54)(139, \"li\");\n          i0.ɵɵtext(140, \"\\u2022 Hamlet Name\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(141, \"li\");\n          i0.ɵɵtext(142, \"\\u2022 Region\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(143, \"li\");\n          i0.ɵɵtext(144, \"\\u2022 District\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(145, \"li\");\n          i0.ɵɵtext(146, \"\\u2022 Ward\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(147, \"li\");\n          i0.ɵɵtext(148, \"\\u2022 Village\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(149, \"li\");\n          i0.ɵɵtext(150, \"\\u2022 Headquarters\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(151, \"h6\", 55);\n          i0.ɵɵtext(152, \"Optional Fields\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(153, \"ul\", 54)(154, \"li\");\n          i0.ɵɵtext(155, \"\\u2022 Population\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(156, \"li\");\n          i0.ɵɵtext(157, \"\\u2022 Area (km\\u00B2)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(158, \"li\");\n          i0.ɵɵtext(159, \"\\u2022 Coordinates (Latitude/Longitude)\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(160, \"li\");\n          i0.ɵɵtext(161, \"\\u2022 Executive Officer\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(162, \"li\");\n          i0.ɵɵtext(163, \"\\u2022 Description\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(164, \"h6\", 55);\n          i0.ɵɵtext(165, \"Tips\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(166, \"ul\", 54)(167, \"li\");\n          i0.ɵɵtext(168, \"\\u2022 Select location hierarchy in order\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(169, \"li\");\n          i0.ɵɵtext(170, \"\\u2022 Use official hamlet names\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(171, \"li\");\n          i0.ɵɵtext(172, \"\\u2022 Headquarters should be the main settlement\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(173, \"li\");\n          i0.ɵɵtext(174, \"\\u2022 Use precise coordinates for mapping\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(175, \"li\");\n          i0.ɵɵtext(176, \"\\u2022 Population should be current estimates\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(177, \"li\");\n          i0.ɵɵtext(178, \"\\u2022 Keep descriptions concise and informative\");\n          i0.ɵɵelementEnd()()()()()()();\n        }\n        if (rf & 2) {\n          let tmp_3_0;\n          let tmp_4_0;\n          let tmp_5_0;\n          let tmp_6_0;\n          let tmp_8_0;\n          let tmp_9_0;\n          let tmp_11_0;\n          let tmp_12_0;\n          let tmp_14_0;\n          let tmp_15_0;\n          let tmp_17_0;\n          let tmp_18_0;\n          let tmp_19_0;\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx.isEditMode ? \"Edit Hamlet\" : \"Create Hamlet\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.isEditMode ? \"Update hamlet information\" : \"Add a new hamlet to the system\");\n          i0.ɵɵadvance(12);\n          i0.ɵɵproperty(\"formGroup\", ctx.hamletForm);\n          i0.ɵɵadvance(8);\n          i0.ɵɵclassProp(\"is-invalid\", ((tmp_3_0 = ctx.hamletForm.get(\"name\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.hamletForm.get(\"name\")) == null ? null : tmp_3_0.touched));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.hamletForm.get(\"name\")) == null ? null : tmp_4_0.hasError(\"required\"));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (tmp_5_0 = ctx.hamletForm.get(\"name\")) == null ? null : tmp_5_0.hasError(\"maxlength\"));\n          i0.ɵɵadvance(7);\n          i0.ɵɵclassProp(\"is-invalid\", ((tmp_6_0 = ctx.hamletForm.get(\"regionId\")) == null ? null : tmp_6_0.invalid) && ((tmp_6_0 = ctx.hamletForm.get(\"regionId\")) == null ? null : tmp_6_0.touched));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.regions);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (tmp_8_0 = ctx.hamletForm.get(\"regionId\")) == null ? null : tmp_8_0.hasError(\"required\"));\n          i0.ɵɵadvance(8);\n          i0.ɵɵclassProp(\"is-invalid\", ((tmp_9_0 = ctx.hamletForm.get(\"districtId\")) == null ? null : tmp_9_0.invalid) && ((tmp_9_0 = ctx.hamletForm.get(\"districtId\")) == null ? null : tmp_9_0.touched));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.filteredDistricts);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (tmp_11_0 = ctx.hamletForm.get(\"districtId\")) == null ? null : tmp_11_0.hasError(\"required\"));\n          i0.ɵɵadvance(7);\n          i0.ɵɵclassProp(\"is-invalid\", ((tmp_12_0 = ctx.hamletForm.get(\"wardId\")) == null ? null : tmp_12_0.invalid) && ((tmp_12_0 = ctx.hamletForm.get(\"wardId\")) == null ? null : tmp_12_0.touched));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.filteredWards);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (tmp_14_0 = ctx.hamletForm.get(\"wardId\")) == null ? null : tmp_14_0.hasError(\"required\"));\n          i0.ɵɵadvance(8);\n          i0.ɵɵclassProp(\"is-invalid\", ((tmp_15_0 = ctx.hamletForm.get(\"villageId\")) == null ? null : tmp_15_0.invalid) && ((tmp_15_0 = ctx.hamletForm.get(\"villageId\")) == null ? null : tmp_15_0.touched));\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"ngForOf\", ctx.filteredVillages);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (tmp_17_0 = ctx.hamletForm.get(\"villageId\")) == null ? null : tmp_17_0.hasError(\"required\"));\n          i0.ɵɵadvance(7);\n          i0.ɵɵclassProp(\"is-invalid\", ((tmp_18_0 = ctx.hamletForm.get(\"headquarters\")) == null ? null : tmp_18_0.invalid) && ((tmp_18_0 = ctx.hamletForm.get(\"headquarters\")) == null ? null : tmp_18_0.touched));\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", (tmp_19_0 = ctx.hamletForm.get(\"headquarters\")) == null ? null : tmp_19_0.hasError(\"required\"));\n          i0.ɵɵadvance(44);\n          i0.ɵɵproperty(\"disabled\", ctx.hamletForm.invalid || ctx.isLoading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Saving...\" : ctx.isEditMode ? \"Update Hamlet\" : \"Create Hamlet\", \" \");\n        }\n      },\n      dependencies: [CommonModule, i9.NgForOf, i9.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.CheckboxControlValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MinValidator, i1.FormGroupDirective, i1.FormControlName],\n      styles: [\".container-fluid[_ngcontent-%COMP%] {\\n  max-width: 1200px;\\n  margin: 0 auto;\\n  padding: 0 1rem;\\n}\\n\\n.card[_ngcontent-%COMP%] {\\n  border: none;\\n  box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\\n}\\n\\n.card-header[_ngcontent-%COMP%] {\\n  background-color: #f8f9fa;\\n  border-bottom: 1px solid #dee2e6;\\n}\\n\\n.form-label[_ngcontent-%COMP%] {\\n  font-weight: 500;\\n  color: #495057;\\n}\\n\\n.text-danger[_ngcontent-%COMP%] {\\n  color: #dc3545 !important;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvZmVhdHVyZXMvaGFtbGV0cy9oYW1sZXQtZm9ybS9oYW1sZXQtZm9ybS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0k7RUFDRSxpQkFBQTtFQUNBLGNBQUE7RUFDQSxlQUFBO0FBQU47O0FBR0k7RUFDRSxZQUFBO0VBQ0EsbURBQUE7QUFBTjs7QUFHSTtFQUNFLHlCQUFBO0VBQ0EsZ0NBQUE7QUFBTjs7QUFHSTtFQUNFLGdCQUFBO0VBQ0EsY0FBQTtBQUFOOztBQUdJO0VBQ0UseUJBQUE7QUFBTiIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgIC5jb250YWluZXItZmx1aWQge1xuICAgICAgbWF4LXdpZHRoOiAxMjAwcHg7XG4gICAgICBtYXJnaW46IDAgYXV0bztcbiAgICAgIHBhZGRpbmc6IDAgMXJlbTtcbiAgICB9XG5cbiAgICAuY2FyZCB7XG4gICAgICBib3JkZXI6IG5vbmU7XG4gICAgICBib3gtc2hhZG93OiAwIDAuMTI1cmVtIDAuMjVyZW0gcmdiYSgwLCAwLCAwLCAwLjA3NSk7XG4gICAgfVxuXG4gICAgLmNhcmQtaGVhZGVyIHtcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XG4gICAgICBib3JkZXItYm90dG9tOiAxcHggc29saWQgI2RlZTJlNjtcbiAgICB9XG5cbiAgICAuZm9ybS1sYWJlbCB7XG4gICAgICBmb250LXdlaWdodDogNTAwO1xuICAgICAgY29sb3I6ICM0OTUwNTc7XG4gICAgfVxuXG4gICAgLnRleHQtZGFuZ2VyIHtcbiAgICAgIGNvbG9yOiAjZGMzNTQ1ICFpbXBvcnRhbnQ7XG4gICAgfVxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["CommonModule","Validators","ReactiveFormsModule","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","region_r1","id","ɵɵadvance","ɵɵtextInterpolate","name","district_r2","ward_r3","village_r4","ɵɵelement","HamletFormComponent","constructor","fb","hamletService","regionService","districtService","wardService","villageService","router","route","toastService","isEditMode","hamletId","isLoading","regions","districts","wards","villages","filteredDistricts","filteredWards","filteredVillages","hamletForm","group","required","maxLength","regionId","districtId","wardId","villageId","headquarters","population","min","areaSqKm","latitude","longitude","executiveOfficer","description","isActive","ngOnInit","loadRegions","loadDistricts","loadWards","loadVillages","paramMap","subscribe","params","get","loadHamlet","getAllRegions","next","response","data","error","console","getAllDistricts","getAllWards","getAllVillages","uid","getHamletByUid","status","hamlet","patchValue","onRegionChange","onDistrictChange","onWardChange","message","goBack","selectedRegionId","value","selectedRegion","find","r","Number","getDistrictsByRegionUid","currentDistrictId","d","selectedDistrictId","selectedDistrict","getWardsByDistrictUid","currentWardId","w","selectedWardId","selectedWard","getVillagesByWardUid","currentVillageId","v","onSubmit","valid","formData","updateRequest","updateHamlet","success","createRequest","createHamlet","navigate","ɵɵdirectiveInject","i1","FormBuilder","i2","HamletService","i3","RegionService","i4","DistrictService","i5","WardService","i6","VillageService","i7","Router","ActivatedRoute","i8","ToastService","selectors","standalone","features","ɵɵStandaloneFeature","decls","vars","consts","template","HamletFormComponent_Template","rf","ctx","ɵɵlistener","HamletFormComponent_Template_button_click_7_listener","HamletFormComponent_Template_form_ngSubmit_18_listener","ɵɵtemplate","HamletFormComponent_div_27_Template","HamletFormComponent_div_28_Template","HamletFormComponent_Template_select_change_35_listener","HamletFormComponent_option_38_Template","HamletFormComponent_div_39_Template","HamletFormComponent_Template_select_change_47_listener","HamletFormComponent_option_50_Template","HamletFormComponent_div_51_Template","HamletFormComponent_Template_select_change_58_listener","HamletFormComponent_option_61_Template","HamletFormComponent_div_62_Template","HamletFormComponent_option_73_Template","HamletFormComponent_div_74_Template","HamletFormComponent_div_82_Template","HamletFormComponent_Template_button_click_124_listener","HamletFormComponent_span_127_Template","ɵɵclassProp","tmp_3_0","invalid","touched","tmp_4_0","hasError","tmp_5_0","tmp_6_0","tmp_8_0","tmp_9_0","tmp_11_0","tmp_12_0","tmp_14_0","tmp_15_0","tmp_17_0","tmp_18_0","tmp_19_0","ɵɵtextInterpolate1","i9","NgForOf","NgIf","ɵNgNoValidate","NgSelectOption","ɵNgSelectMultipleOption","DefaultValueAccessor","NumberValueAccessor","CheckboxControlValueAccessor","SelectControlValueAccessor","NgControlStatus","NgControlStatusGroup","MinValidator","FormGroupDirective","FormControlName","styles"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\features\\hamlets\\hamlet-form\\hamlet-form.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, ActivatedRoute } from '@angular/router';\r\nimport { HamletService } from '../../../core/services/hamlet.service';\r\nimport { RegionService } from '../../../core/services/region.service';\r\nimport { DistrictService } from '../../../core/services/district.service';\r\nimport { WardService } from '../../../core/services/ward.service';\r\nimport { VillageService } from '../../../core/services/village.service';\r\nimport { ToastService } from '../../../core/services/toast.service';\r\nimport { Region } from '../../../core/models/region.model';\r\nimport { District } from '../../../core/models/district.model';\r\nimport { Ward } from '../../../core/models/ward.model';\r\nimport { Village } from '../../../core/models/village.model';\r\nimport { CreateHamletRequest, UpdateHamletRequest } from '../../../core/models/hamlet.model';\r\n\r\n@Component({\r\n  selector: 'app-hamlet-form',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule\r\n  ],\r\n  template: `\r\n    <div class=\"container-fluid\">\r\n      <div class=\"d-flex justify-content-between align-items-center mb-4\">\r\n        <div>\r\n          <h1 class=\"h3 mb-1\">{{ isEditMode ? 'Edit Hamlet' : 'Create Hamlet' }}</h1>\r\n          <p class=\"text-muted\">{{ isEditMode ? 'Update hamlet information' : 'Add a new hamlet to the system' }}</p>\r\n        </div>\r\n        <button type=\"button\" class=\"btn btn-outline-secondary\" (click)=\"goBack()\">\r\n          <i class=\"bi bi-arrow-left me-1\"></i>\r\n          Back\r\n        </button>\r\n      </div>\r\n\r\n      <div class=\"row\">\r\n        <div class=\"col-lg-8\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h5 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-house-door-fill me-2\"></i>\r\n                Hamlet Information\r\n              </h5>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <form [formGroup]=\"hamletForm\" (ngSubmit)=\"onSubmit()\">\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"name\" class=\"form-label\">Hamlet Name <span class=\"text-danger\">*</span></label>\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        id=\"name\"\r\n                        formControlName=\"name\"\r\n                        [class.is-invalid]=\"hamletForm.get('name')?.invalid && hamletForm.get('name')?.touched\"\r\n                        placeholder=\"Enter hamlet name\">\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('name')?.hasError('required')\">\r\n                        Hamlet name is required\r\n                      </div>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('name')?.hasError('maxlength')\">\r\n                        Hamlet name must not exceed 100 characters\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"regionId\" class=\"form-label\">Region <span class=\"text-danger\">*</span></label>\r\n                      <select \r\n                        class=\"form-select\" \r\n                        id=\"regionId\"\r\n                        formControlName=\"regionId\"\r\n                        [class.is-invalid]=\"hamletForm.get('regionId')?.invalid && hamletForm.get('regionId')?.touched\"\r\n                        (change)=\"onRegionChange()\">\r\n                        <option value=\"\">Select a region</option>\r\n                        <option *ngFor=\"let region of regions\" [value]=\"region.id\">{{ region.name }}</option>\r\n                      </select>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('regionId')?.hasError('required')\">\r\n                        Region is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"districtId\" class=\"form-label\">District <span class=\"text-danger\">*</span></label>\r\n                      <select \r\n                        class=\"form-select\" \r\n                        id=\"districtId\"\r\n                        formControlName=\"districtId\"\r\n                        [class.is-invalid]=\"hamletForm.get('districtId')?.invalid && hamletForm.get('districtId')?.touched\"\r\n                        (change)=\"onDistrictChange()\">\r\n                        <option value=\"\">Select a district</option>\r\n                        <option *ngFor=\"let district of filteredDistricts\" [value]=\"district.id\">{{ district.name }}</option>\r\n                      </select>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('districtId')?.hasError('required')\">\r\n                        District is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"wardId\" class=\"form-label\">Ward <span class=\"text-danger\">*</span></label>\r\n                      <select \r\n                        class=\"form-select\" \r\n                        id=\"wardId\"\r\n                        formControlName=\"wardId\"\r\n                        [class.is-invalid]=\"hamletForm.get('wardId')?.invalid && hamletForm.get('wardId')?.touched\"\r\n                        (change)=\"onWardChange()\">\r\n                        <option value=\"\">Select a ward</option>\r\n                        <option *ngFor=\"let ward of filteredWards\" [value]=\"ward.id\">{{ ward.name }}</option>\r\n                      </select>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('wardId')?.hasError('required')\">\r\n                        Ward is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"villageId\" class=\"form-label\">Village <span class=\"text-danger\">*</span></label>\r\n                      <select \r\n                        class=\"form-select\" \r\n                        id=\"villageId\"\r\n                        formControlName=\"villageId\"\r\n                        [class.is-invalid]=\"hamletForm.get('villageId')?.invalid && hamletForm.get('villageId')?.touched\">\r\n                        <option value=\"\">Select a village</option>\r\n                        <option *ngFor=\"let village of filteredVillages\" [value]=\"village.id\">{{ village.name }}</option>\r\n                      </select>\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('villageId')?.hasError('required')\">\r\n                        Village is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"headquarters\" class=\"form-label\">Headquarters <span class=\"text-danger\">*</span></label>\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        id=\"headquarters\"\r\n                        formControlName=\"headquarters\"\r\n                        [class.is-invalid]=\"hamletForm.get('headquarters')?.invalid && hamletForm.get('headquarters')?.touched\"\r\n                        placeholder=\"Enter headquarters\">\r\n                      <div class=\"invalid-feedback\" *ngIf=\"hamletForm.get('headquarters')?.hasError('required')\">\r\n                        Headquarters is required\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"population\" class=\"form-label\">Population</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-control\" \r\n                        id=\"population\"\r\n                        formControlName=\"population\"\r\n                        min=\"0\"\r\n                        placeholder=\"Enter population\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"areaSqKm\" class=\"form-label\">Area (km²)</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-control\" \r\n                        id=\"areaSqKm\"\r\n                        formControlName=\"areaSqKm\"\r\n                        min=\"0\"\r\n                        step=\"0.01\"\r\n                        placeholder=\"Enter area in square kilometers\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"latitude\" class=\"form-label\">Latitude</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-control\" \r\n                        id=\"latitude\"\r\n                        formControlName=\"latitude\"\r\n                        step=\"0.000001\"\r\n                        placeholder=\"Enter latitude\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"longitude\" class=\"form-label\">Longitude</label>\r\n                      <input \r\n                        type=\"number\" \r\n                        class=\"form-control\" \r\n                        id=\"longitude\"\r\n                        formControlName=\"longitude\"\r\n                        step=\"0.000001\"\r\n                        placeholder=\"Enter longitude\">\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"row\">\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label for=\"executiveOfficer\" class=\"form-label\">Executive Officer</label>\r\n                      <input \r\n                        type=\"text\" \r\n                        class=\"form-control\" \r\n                        id=\"executiveOfficer\"\r\n                        formControlName=\"executiveOfficer\"\r\n                        placeholder=\"Enter executive officer name\">\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div class=\"col-md-6\">\r\n                    <div class=\"mb-3\">\r\n                      <label class=\"form-label\">Status</label>\r\n                      <div class=\"form-check form-switch\">\r\n                        <input \r\n                          class=\"form-check-input\" \r\n                          type=\"checkbox\" \r\n                          id=\"isActive\"\r\n                          formControlName=\"isActive\">\r\n                        <label class=\"form-check-label\" for=\"isActive\">\r\n                          Active\r\n                        </label>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div class=\"mb-3\">\r\n                  <label for=\"description\" class=\"form-label\">Description</label>\r\n                  <textarea \r\n                    class=\"form-control\" \r\n                    id=\"description\"\r\n                    formControlName=\"description\"\r\n                    rows=\"3\"\r\n                    placeholder=\"Enter hamlet description\"></textarea>\r\n                </div>\r\n\r\n                <div class=\"d-flex justify-content-end gap-2\">\r\n                  <button type=\"button\" class=\"btn btn-secondary\" (click)=\"goBack()\">\r\n                    Cancel\r\n                  </button>\r\n                  <button \r\n                    type=\"submit\" \r\n                    class=\"btn btn-primary\" \r\n                    [disabled]=\"hamletForm.invalid || isLoading\">\r\n                    <span *ngIf=\"isLoading\" class=\"spinner-border spinner-border-sm me-2\" role=\"status\"></span>\r\n                    {{ isLoading ? 'Saving...' : (isEditMode ? 'Update Hamlet' : 'Create Hamlet') }}\r\n                  </button>\r\n                </div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        <!-- Help Panel -->\r\n        <div class=\"col-lg-4\">\r\n          <div class=\"card\">\r\n            <div class=\"card-header\">\r\n              <h6 class=\"card-title mb-0\">\r\n                <i class=\"bi bi-info-circle me-2\"></i>\r\n                Help & Guidelines\r\n              </h6>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <h6>Required Fields</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Hamlet Name</li>\r\n                <li>• Region</li>\r\n                <li>• District</li>\r\n                <li>• Ward</li>\r\n                <li>• Village</li>\r\n                <li>• Headquarters</li>\r\n              </ul>\r\n\r\n              <h6 class=\"mt-3\">Optional Fields</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Population</li>\r\n                <li>• Area (km²)</li>\r\n                <li>• Coordinates (Latitude/Longitude)</li>\r\n                <li>• Executive Officer</li>\r\n                <li>• Description</li>\r\n              </ul>\r\n\r\n              <h6 class=\"mt-3\">Tips</h6>\r\n              <ul class=\"list-unstyled small text-muted\">\r\n                <li>• Select location hierarchy in order</li>\r\n                <li>• Use official hamlet names</li>\r\n                <li>• Headquarters should be the main settlement</li>\r\n                <li>• Use precise coordinates for mapping</li>\r\n                <li>• Population should be current estimates</li>\r\n                <li>• Keep descriptions concise and informative</li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .container-fluid {\r\n      max-width: 1200px;\r\n      margin: 0 auto;\r\n      padding: 0 1rem;\r\n    }\r\n\r\n    .card {\r\n      border: none;\r\n      box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);\r\n    }\r\n\r\n    .card-header {\r\n      background-color: #f8f9fa;\r\n      border-bottom: 1px solid #dee2e6;\r\n    }\r\n\r\n    .form-label {\r\n      font-weight: 500;\r\n      color: #495057;\r\n    }\r\n\r\n    .text-danger {\r\n      color: #dc3545 !important;\r\n    }\r\n  `]\r\n})\r\nexport class HamletFormComponent implements OnInit {\r\n  hamletForm: FormGroup;\r\n  isEditMode = false;\r\n  hamletId: string | null = null;\r\n  isLoading = false;\r\n  regions: Region[] = [];\r\n  districts: District[] = [];\r\n  wards: Ward[] = [];\r\n  villages: Village[] = [];\r\n  filteredDistricts: District[] = [];\r\n  filteredWards: Ward[] = [];\r\n  filteredVillages: Village[] = [];\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private hamletService: HamletService,\r\n    private regionService: RegionService,\r\n    private districtService: DistrictService,\r\n    private wardService: WardService,\r\n    private villageService: VillageService,\r\n    private router: Router,\r\n    private route: ActivatedRoute,\r\n    private toastService: ToastService\r\n  ) {\r\n    this.hamletForm = this.fb.group({\r\n      name: ['', [Validators.required, Validators.maxLength(100)]],\r\n      regionId: [null, [Validators.required]],\r\n      districtId: [null, [Validators.required]],\r\n      wardId: [null, [Validators.required]],\r\n      villageId: [null, [Validators.required]],\r\n      headquarters: ['', [Validators.required, Validators.maxLength(100)]],\r\n      population: [null, [Validators.min(0)]],\r\n      areaSqKm: [null, [Validators.min(0)]],\r\n      latitude: [null],\r\n      longitude: [null],\r\n      executiveOfficer: ['', [Validators.maxLength(100)]],\r\n      description: ['', [Validators.maxLength(500)]],\r\n      isActive: [true]\r\n    });\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.loadRegions();\r\n    this.loadDistricts();\r\n    this.loadWards();\r\n    this.loadVillages();\r\n    \r\n    this.route.paramMap.subscribe(params => {\r\n      this.hamletId = params.get('uid');\r\n      if (this.hamletId) {\r\n        this.isEditMode = true;\r\n        this.loadHamlet(this.hamletId);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadRegions() {\r\n    this.regionService.getAllRegions(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.regions = response.data || [];\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading regions:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadDistricts() {\r\n    this.districtService.getAllDistricts(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.districts = response.data || [];\r\n        this.filteredDistricts = this.districts;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading districts:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadWards() {\r\n    this.wardService.getAllWards(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.wards = response.data || [];\r\n        this.filteredWards = this.wards;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading wards:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadVillages() {\r\n    this.villageService.getAllVillages(0, 1000).subscribe({\r\n      next: (response: any) => {\r\n        this.villages = response.data || [];\r\n        this.filteredVillages = this.villages;\r\n      },\r\n      error: (error: any) => {\r\n        console.error('Error loading villages:', error);\r\n      }\r\n    });\r\n  }\r\n\r\n  loadHamlet(uid: string) {\r\n    this.isLoading = true;\r\n    this.hamletService.getHamletByUid(uid).subscribe({\r\n      next: (response) => {\r\n        this.isLoading = false;\r\n        if (response.status) {\r\n          const hamlet = response.data;\r\n          this.hamletForm.patchValue({\r\n            name: hamlet.name,\r\n            regionId: hamlet.regionId,\r\n            districtId: hamlet.districtId,\r\n            wardId: hamlet.wardId,\r\n            villageId: hamlet.villageId,\r\n            headquarters: hamlet.headquarters,\r\n            population: hamlet.population,\r\n            areaSqKm: hamlet.areaSqKm,\r\n            latitude: hamlet.latitude,\r\n            longitude: hamlet.longitude,\r\n            executiveOfficer: hamlet.executiveOfficer,\r\n            description: hamlet.description,\r\n            isActive: hamlet.isActive\r\n          });\r\n          \r\n          // Filter cascading dropdowns based on selected values\r\n          this.onRegionChange();\r\n          this.onDistrictChange();\r\n          this.onWardChange();\r\n        }\r\n      },\r\n      error: (error) => {\r\n        this.isLoading = false;\r\n        console.error('Error loading hamlet:', error);\r\n        this.toastService.error('Error Loading Hamlet', error.error?.message || error.message || 'Unknown error');\r\n        this.goBack();\r\n      }\r\n    });\r\n  }\r\n\r\n  onRegionChange() {\r\n    const selectedRegionId = this.hamletForm.get('regionId')?.value;\r\n    \r\n    if (selectedRegionId) {\r\n      const selectedRegion = this.regions.find(r => r.id === Number(selectedRegionId));\r\n      \r\n      if (selectedRegion) {\r\n        this.districtService.getDistrictsByRegionUid(selectedRegion.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredDistricts = response.data || [];\r\n            \r\n            // Reset district selection if current selection is not in filtered list\r\n            const currentDistrictId = this.hamletForm.get('districtId')?.value;\r\n            if (currentDistrictId && !this.filteredDistricts.find(d => d.id === currentDistrictId)) {\r\n              this.hamletForm.patchValue({ districtId: null });\r\n              this.onDistrictChange();\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading districts for region:', error);\r\n            this.filteredDistricts = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.filteredDistricts = this.districts;\r\n      this.hamletForm.patchValue({ districtId: null });\r\n      this.onDistrictChange();\r\n    }\r\n  }\r\n\r\n  onDistrictChange() {\r\n    const selectedDistrictId = this.hamletForm.get('districtId')?.value;\r\n    \r\n    if (selectedDistrictId) {\r\n      const selectedDistrict = this.districts.find(d => d.id === Number(selectedDistrictId));\r\n      \r\n      if (selectedDistrict) {\r\n        this.wardService.getWardsByDistrictUid(selectedDistrict.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredWards = response.data || [];\r\n            \r\n            // Reset ward selection if current selection is not in filtered list\r\n            const currentWardId = this.hamletForm.get('wardId')?.value;\r\n            if (currentWardId && !this.filteredWards.find(w => w.id === currentWardId)) {\r\n              this.hamletForm.patchValue({ wardId: null });\r\n              this.onWardChange();\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading wards for district:', error);\r\n            this.filteredWards = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.filteredWards = this.wards;\r\n      this.hamletForm.patchValue({ wardId: null });\r\n      this.onWardChange();\r\n    }\r\n  }\r\n\r\n  onWardChange() {\r\n    const selectedWardId = this.hamletForm.get('wardId')?.value;\r\n    \r\n    if (selectedWardId) {\r\n      const selectedWard = this.wards.find(w => w.id === Number(selectedWardId));\r\n      \r\n      if (selectedWard) {\r\n        this.villageService.getVillagesByWardUid(selectedWard.uid, 0, 1000).subscribe({\r\n          next: (response: any) => {\r\n            this.filteredVillages = response.data || [];\r\n            \r\n            // Reset village selection if current selection is not in filtered list\r\n            const currentVillageId = this.hamletForm.get('villageId')?.value;\r\n            if (currentVillageId && !this.filteredVillages.find(v => v.id === currentVillageId)) {\r\n              this.hamletForm.patchValue({ villageId: null });\r\n            }\r\n          },\r\n          error: (error: any) => {\r\n            console.error('Error loading villages for ward:', error);\r\n            this.filteredVillages = [];\r\n          }\r\n        });\r\n      }\r\n    } else {\r\n      this.filteredVillages = this.villages;\r\n      this.hamletForm.patchValue({ villageId: null });\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.hamletForm.valid) {\r\n      this.isLoading = true;\r\n      const formData = this.hamletForm.value;\r\n\r\n      if (this.isEditMode && this.hamletId) {\r\n        const updateRequest: UpdateHamletRequest = {\r\n          name: formData.name,\r\n          villageId: formData.villageId,\r\n          headquarters: formData.headquarters,\r\n          population: formData.population,\r\n          areaSqKm: formData.areaSqKm,\r\n          latitude: formData.latitude,\r\n          longitude: formData.longitude,\r\n          executiveOfficer: formData.executiveOfficer,\r\n          description: formData.description,\r\n          isActive: formData.isActive\r\n        };\r\n\r\n        this.hamletService.updateHamlet(this.hamletId, updateRequest).subscribe({\r\n          next: (response) => {\r\n            this.isLoading = false;\r\n            if (response.status) {\r\n              this.toastService.success('Hamlet Updated', 'Hamlet updated successfully!');\r\n              this.goBack();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            this.isLoading = false;\r\n            console.error('Error updating hamlet:', error);\r\n            this.toastService.error('Error Updating Hamlet', error.error?.message || error.message || 'Unknown error');\r\n          }\r\n        });\r\n      } else {\r\n        const createRequest: CreateHamletRequest = {\r\n          name: formData.name,\r\n          villageId: formData.villageId,\r\n          headquarters: formData.headquarters,\r\n          population: formData.population,\r\n          areaSqKm: formData.areaSqKm,\r\n          latitude: formData.latitude,\r\n          longitude: formData.longitude,\r\n          executiveOfficer: formData.executiveOfficer,\r\n          description: formData.description,\r\n          isActive: formData.isActive\r\n        };\r\n\r\n        this.hamletService.createHamlet(createRequest).subscribe({\r\n          next: (response) => {\r\n            this.isLoading = false;\r\n            if (response.status) {\r\n              this.toastService.success('Hamlet Created', 'Hamlet created successfully!');\r\n              this.goBack();\r\n            }\r\n          },\r\n          error: (error) => {\r\n            this.isLoading = false;\r\n            console.error('Error creating hamlet:', error);\r\n            this.toastService.error('Error Creating Hamlet', error.error?.message || error.message || 'Unknown error');\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  goBack() {\r\n    this.router.navigate(['/hamlets']);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}