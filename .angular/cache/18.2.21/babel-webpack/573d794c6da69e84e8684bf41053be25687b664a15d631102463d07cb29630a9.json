{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080/api';\n    this.TOKEN_KEY = 'auth_token';\n    this.USER_KEY = 'current_user';\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.loadStoredUser();\n  }\n  login(credentials) {\n    return this.http.post(`${this.API_URL}/admin/v1/auth/login`, credentials).pipe(tap(response => {\n      if (response.success && response.data.accessToken) {\n        this.setToken(response.data.accessToken);\n        this.setCurrentUser(response.data);\n      }\n    }));\n  }\n  logout() {\n    localStorage.removeItem(this.TOKEN_KEY);\n    localStorage.removeItem(this.USER_KEY);\n    this.currentUserSubject.next(null);\n  }\n  isAuthenticated() {\n    const token = this.getToken();\n    if (!token) {\n      console.log('No token found - user not authenticated');\n      return false;\n    }\n    // Check if token is expired (basic check)\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1]));\n      const currentTime = Date.now() / 1000;\n      if (payload.exp && payload.exp < currentTime) {\n        console.log('Token expired - user not authenticated');\n        this.logout(); // Clear expired token\n        return false;\n      }\n      console.log('Token valid - user authenticated');\n      return true;\n    } catch (error) {\n      console.log('Invalid token format - user not authenticated');\n      this.logout(); // Clear invalid token\n      return false;\n    }\n  }\n  getToken() {\n    return localStorage.getItem(this.TOKEN_KEY);\n  }\n  setToken(token) {\n    localStorage.setItem(this.TOKEN_KEY, token);\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  setCurrentUser(user) {\n    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n    this.currentUserSubject.next(user);\n  }\n  loadStoredUser() {\n    const storedUser = localStorage.getItem(this.USER_KEY);\n    if (storedUser) {\n      try {\n        const user = JSON.parse(storedUser);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        console.error('Error parsing stored user:', error);\n        this.logout();\n      }\n    }\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","AuthService","constructor","http","API_URL","TOKEN_KEY","USER_KEY","currentUserSubject","currentUser$","asObservable","loadStoredUser","login","credentials","post","pipe","response","success","data","accessToken","setToken","setCurrentUser","logout","localStorage","removeItem","next","isAuthenticated","token","getToken","console","log","payload","JSON","parse","atob","split","currentTime","Date","now","exp","error","getItem","setItem","getCurrentUser","value","user","stringify","storedUser","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\core\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\r\nimport { LoginRequest, LoginResponse, User } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n  private readonly TOKEN_KEY = 'auth_token';\r\n  private readonly USER_KEY = 'current_user';\r\n\r\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\r\n  public currentUser$ = this.currentUserSubject.asObservable();\r\n\r\n  constructor(private http: HttpClient) {\r\n    this.loadStoredUser();\r\n  }\r\n\r\n  login(credentials: LoginRequest): Observable<LoginResponse> {\r\n    return this.http.post<LoginResponse>(`${this.API_URL}/admin/v1/auth/login`, credentials)\r\n      .pipe(\r\n        tap(response => {\r\n          if (response.success && response.data.accessToken) {\r\n            this.setToken(response.data.accessToken);\r\n            this.setCurrentUser(response.data);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.removeItem(this.TOKEN_KEY);\r\n    localStorage.removeItem(this.USER_KEY);\r\n    this.currentUserSubject.next(null);\r\n  }\r\n\r\n  isAuthenticated(): boolean {\r\n    const token = this.getToken();\r\n    if (!token) {\r\n      console.log('No token found - user not authenticated');\r\n      return false;\r\n    }\r\n    \r\n    // Check if token is expired (basic check)\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1]));\r\n      const currentTime = Date.now() / 1000;\r\n      if (payload.exp && payload.exp < currentTime) {\r\n        console.log('Token expired - user not authenticated');\r\n        this.logout(); // Clear expired token\r\n        return false;\r\n      }\r\n      console.log('Token valid - user authenticated');\r\n      return true;\r\n    } catch (error) {\r\n      console.log('Invalid token format - user not authenticated');\r\n      this.logout(); // Clear invalid token\r\n      return false;\r\n    }\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem(this.TOKEN_KEY);\r\n  }\r\n\r\n  private setToken(token: string): void {\r\n    localStorage.setItem(this.TOKEN_KEY, token);\r\n  }\r\n\r\n  getCurrentUser(): User | null {\r\n    return this.currentUserSubject.value;\r\n  }\r\n\r\n  private setCurrentUser(user: User): void {\r\n    localStorage.setItem(this.USER_KEY, JSON.stringify(user));\r\n    this.currentUserSubject.next(user);\r\n  }\r\n\r\n  private loadStoredUser(): void {\r\n    const storedUser = localStorage.getItem(this.USER_KEY);\r\n    if (storedUser) {\r\n      try {\r\n        const user = JSON.parse(storedUser);\r\n        this.currentUserSubject.next(user);\r\n      } catch (error) {\r\n        console.error('Error parsing stored user:', error);\r\n        this.logout();\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}