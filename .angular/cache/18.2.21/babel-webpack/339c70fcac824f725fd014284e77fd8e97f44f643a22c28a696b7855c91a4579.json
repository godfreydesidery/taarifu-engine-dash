{"ast":null,"code":"// Helper functions for Political Party\nexport class PoliticalPartyHelper {\n  static getStatusBadgeClass(party) {\n    if (!party.isActive) {\n      return 'bg-secondary';\n    } else if (party.isRegistered && party.operational) {\n      return 'bg-success';\n    } else if (party.isRegistered) {\n      return 'bg-primary';\n    } else {\n      return 'bg-warning';\n    }\n  }\n  static getStatusText(party) {\n    if (!party.isActive) {\n      return 'Inactive';\n    } else if (party.isRegistered && party.operational) {\n      return 'Operational';\n    } else if (party.isRegistered) {\n      return 'Registered';\n    } else {\n      return 'Unregistered';\n    }\n  }\n  static getRegistrationStatusBadgeClass(party) {\n    return party.isRegistered ? 'bg-success' : 'bg-warning';\n  }\n  static getRegistrationStatusText(party) {\n    return party.isRegistered ? 'Registered' : 'Unregistered';\n  }\n  static getOperationalStatusBadgeClass(party) {\n    return party.operational ? 'bg-success' : 'bg-secondary';\n  }\n  static getOperationalStatusText(party) {\n    return party.operational ? 'Operational' : 'Non-operational';\n  }\n  static formatDate(dateString) {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n  static getAgeText(party) {\n    if (party.ageInYears) {\n      return `${party.ageInYears} year${party.ageInYears > 1 ? 's' : ''}`;\n    }\n    return 'N/A';\n  }\n  static getMemberCountText(party) {\n    if (party.memberCount) {\n      return party.memberCount.toLocaleString();\n    }\n    return 'N/A';\n  }\n  static getColorsArray(colors) {\n    if (!colors) return [];\n    return colors.split(',').map(color => color.trim());\n  }\n  static isValidUrl(url) {\n    if (!url) return false;\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  static isValidEmail(email) {\n    if (!email) return false;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  static getDisplayName(party) {\n    return party.displayName || `${party.name} (${party.abbreviation})`;\n  }\n}","map":{"version":3,"names":["PoliticalPartyHelper","getStatusBadgeClass","party","isActive","isRegistered","operational","getStatusText","getRegistrationStatusBadgeClass","getRegistrationStatusText","getOperationalStatusBadgeClass","getOperationalStatusText","formatDate","dateString","Date","toLocaleDateString","year","month","day","getAgeText","ageInYears","getMemberCountText","memberCount","toLocaleString","getColorsArray","colors","split","map","color","trim","isValidUrl","url","URL","isValidEmail","email","emailRegex","test","getDisplayName","displayName","name","abbreviation"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\core\\models\\political-party.model.ts"],"sourcesContent":["import { PageResponse } from './auth.model';\r\n\r\nexport interface PoliticalParty {\r\n  id: number;\r\n  uid: string;\r\n  code: string;\r\n  name: string;\r\n  abbreviation: string;\r\n  description: string;\r\n  foundingDate: string;\r\n  foundingLocation: string;\r\n  ideology: string;\r\n  colors: string;\r\n  symbol: string;\r\n  motto: string;\r\n  websiteUrl: string;\r\n  email: string;\r\n  phone: string;\r\n  headquartersAddress: string;\r\n  isRegistered: boolean;\r\n  isActive: boolean;\r\n  registrationNumber: string;\r\n  registrationDate: string;\r\n  memberCount: number;\r\n  ageInYears: number;\r\n  operational: boolean;\r\n  displayName: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nexport interface CreatePoliticalPartyRequest {\r\n  name: string;\r\n  abbreviation: string;\r\n  description?: string;\r\n  foundingDate?: string;\r\n  foundingLocation?: string;\r\n  ideology?: string;\r\n  colors?: string;\r\n  symbol?: string;\r\n  motto?: string;\r\n  websiteUrl?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  headquartersAddress?: string;\r\n  isRegistered?: boolean;\r\n  isActive?: boolean;\r\n  registrationNumber?: string;\r\n  registrationDate?: string;\r\n  memberCount?: number;\r\n}\r\n\r\nexport interface UpdatePoliticalPartyRequest {\r\n  name?: string;\r\n  abbreviation?: string;\r\n  description?: string;\r\n  foundingDate?: string;\r\n  foundingLocation?: string;\r\n  ideology?: string;\r\n  colors?: string;\r\n  symbol?: string;\r\n  motto?: string;\r\n  websiteUrl?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  headquartersAddress?: string;\r\n  isRegistered?: boolean;\r\n  isActive?: boolean;\r\n  registrationNumber?: string;\r\n  registrationDate?: string;\r\n  memberCount?: number;\r\n}\r\n\r\nexport interface PoliticalPartyStats {\r\n  totalParties: number;\r\n  activeParties: number;\r\n  inactiveParties: number;\r\n  registeredParties: number;\r\n  unregisteredParties: number;\r\n  operationalParties: number;\r\n  partiesWithWebsite: number;\r\n  partiesFoundedThisYear: number;\r\n  averageMemberCount: number;\r\n}\r\n\r\nexport interface PoliticalPartySearchParams {\r\n  searchTerm?: string;\r\n  isActive?: boolean;\r\n  isRegistered?: boolean;\r\n  operational?: boolean;\r\n  ideology?: string;\r\n  foundingYear?: number;\r\n  page?: number;\r\n  size?: number;\r\n  sortBy?: string;\r\n  sortDir?: 'asc' | 'desc';\r\n}\r\n\r\n// Helper functions for Political Party\r\nexport class PoliticalPartyHelper {\r\n  static getStatusBadgeClass(party: PoliticalParty): string {\r\n    if (!party.isActive) {\r\n      return 'bg-secondary';\r\n    } else if (party.isRegistered && party.operational) {\r\n      return 'bg-success';\r\n    } else if (party.isRegistered) {\r\n      return 'bg-primary';\r\n    } else {\r\n      return 'bg-warning';\r\n    }\r\n  }\r\n\r\n  static getStatusText(party: PoliticalParty): string {\r\n    if (!party.isActive) {\r\n      return 'Inactive';\r\n    } else if (party.isRegistered && party.operational) {\r\n      return 'Operational';\r\n    } else if (party.isRegistered) {\r\n      return 'Registered';\r\n    } else {\r\n      return 'Unregistered';\r\n    }\r\n  }\r\n\r\n  static getRegistrationStatusBadgeClass(party: PoliticalParty): string {\r\n    return party.isRegistered ? 'bg-success' : 'bg-warning';\r\n  }\r\n\r\n  static getRegistrationStatusText(party: PoliticalParty): string {\r\n    return party.isRegistered ? 'Registered' : 'Unregistered';\r\n  }\r\n\r\n  static getOperationalStatusBadgeClass(party: PoliticalParty): string {\r\n    return party.operational ? 'bg-success' : 'bg-secondary';\r\n  }\r\n\r\n  static getOperationalStatusText(party: PoliticalParty): string {\r\n    return party.operational ? 'Operational' : 'Non-operational';\r\n  }\r\n\r\n  static formatDate(dateString: string): string {\r\n    if (!dateString) return 'N/A';\r\n    return new Date(dateString).toLocaleDateString('en-US', {\r\n      year: 'numeric',\r\n      month: 'short',\r\n      day: 'numeric'\r\n    });\r\n  }\r\n\r\n  static getAgeText(party: PoliticalParty): string {\r\n    if (party.ageInYears) {\r\n      return `${party.ageInYears} year${party.ageInYears > 1 ? 's' : ''}`;\r\n    }\r\n    return 'N/A';\r\n  }\r\n\r\n  static getMemberCountText(party: PoliticalParty): string {\r\n    if (party.memberCount) {\r\n      return party.memberCount.toLocaleString();\r\n    }\r\n    return 'N/A';\r\n  }\r\n\r\n  static getColorsArray(colors: string): string[] {\r\n    if (!colors) return [];\r\n    return colors.split(',').map(color => color.trim());\r\n  }\r\n\r\n  static isValidUrl(url: string): boolean {\r\n    if (!url) return false;\r\n    try {\r\n      new URL(url);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  static isValidEmail(email: string): boolean {\r\n    if (!email) return false;\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  }\r\n\r\n  static getDisplayName(party: PoliticalParty): string {\r\n    return party.displayName || `${party.name} (${party.abbreviation})`;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}