{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http) {\n      this.http = http;\n      this.API_URL = 'http://localhost:8080/api';\n      this.TOKEN_KEY = 'auth_token';\n      this.USER_KEY = 'current_user';\n      this.currentUserSubject = new BehaviorSubject(null);\n      this.currentUser$ = this.currentUserSubject.asObservable();\n      this.loadStoredUser();\n    }\n    login(credentials) {\n      return this.http.post(`${this.API_URL}/admin/v1/auth/login`, credentials).pipe(tap(response => {\n        if (response.status && response.data.accessToken) {\n          this.setToken(response.data.accessToken);\n          this.setCurrentUser(response.data);\n        }\n      }));\n    }\n    logout() {\n      localStorage.removeItem(this.TOKEN_KEY);\n      localStorage.removeItem(this.USER_KEY);\n      this.currentUserSubject.next(null);\n    }\n    isAuthenticated() {\n      const token = this.getToken();\n      if (!token) {\n        console.log('No token found - user not authenticated');\n        return false;\n      }\n      // Check if token is expired (basic check)\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        const currentTime = Date.now() / 1000;\n        if (payload.exp && payload.exp < currentTime) {\n          console.log('Token expired - user not authenticated');\n          this.logout(); // Clear expired token\n          return false;\n        }\n        console.log('Token valid - user authenticated');\n        return true;\n      } catch (error) {\n        console.log('Invalid token format - user not authenticated');\n        this.logout(); // Clear invalid token\n        return false;\n      }\n    }\n    getToken() {\n      return localStorage.getItem(this.TOKEN_KEY);\n    }\n    setToken(token) {\n      localStorage.setItem(this.TOKEN_KEY, token);\n    }\n    getCurrentUser() {\n      return this.currentUserSubject.value;\n    }\n    setCurrentUser(user) {\n      localStorage.setItem(this.USER_KEY, JSON.stringify(user));\n      this.currentUserSubject.next(user);\n    }\n    loadStoredUser() {\n      const storedUser = localStorage.getItem(this.USER_KEY);\n      if (storedUser) {\n        try {\n          const user = JSON.parse(storedUser);\n          this.currentUserSubject.next(user);\n        } catch (error) {\n          console.error('Error parsing stored user:', error);\n          this.logout();\n        }\n      }\n    }\n    static {\n      this.ɵfac = function AuthService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || AuthService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: AuthService,\n        factory: AuthService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}