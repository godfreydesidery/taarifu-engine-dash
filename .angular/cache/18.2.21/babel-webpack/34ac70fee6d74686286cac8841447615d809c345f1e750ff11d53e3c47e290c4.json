{"ast":null,"code":"// Helper functions for Political Party\nexport class PoliticalPartyHelper {\n  static getStatusBadgeClass(party) {\n    if (!party.isActive) {\n      return 'bg-secondary';\n    } else if (party.isRegistered && party.operational) {\n      return 'bg-success';\n    } else if (party.isRegistered) {\n      return 'bg-primary';\n    } else {\n      return 'bg-warning';\n    }\n  }\n  static getStatusText(party) {\n    if (!party.isActive) {\n      return 'Inactive';\n    } else if (party.isRegistered && party.operational) {\n      return 'Operational';\n    } else if (party.isRegistered) {\n      return 'Registered';\n    } else {\n      return 'Unregistered';\n    }\n  }\n  static getRegistrationStatusBadgeClass(party) {\n    return party.isRegistered ? 'bg-success' : 'bg-warning';\n  }\n  static getRegistrationStatusText(party) {\n    return party.isRegistered ? 'Registered' : 'Unregistered';\n  }\n  static getOperationalStatusBadgeClass(party) {\n    return party.operational ? 'bg-success' : 'bg-secondary';\n  }\n  static getOperationalStatusText(party) {\n    return party.operational ? 'Operational' : 'Non-operational';\n  }\n  static formatDate(dateString) {\n    if (!dateString) return 'N/A';\n    return new Date(dateString).toLocaleDateString('en-US', {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  }\n  static getAgeText(party) {\n    if (party.ageInYears) {\n      return `${party.ageInYears} year${party.ageInYears > 1 ? 's' : ''}`;\n    }\n    return 'N/A';\n  }\n  static getMemberCountText(party) {\n    if (party.memberCount) {\n      return party.memberCount.toLocaleString();\n    }\n    return 'N/A';\n  }\n  static getColorsArray(colors) {\n    if (!colors) return [];\n    return colors.split(',').map(color => color.trim());\n  }\n  static isValidUrl(url) {\n    if (!url) return false;\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  static isValidEmail(email) {\n    if (!email) return false;\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n  static getDisplayName(party) {\n    return party.displayName || `${party.name} (${party.abbreviation})`;\n  }\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}