{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class VillageService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080/api/admin/v1';\n  }\n  // Get all villages with pagination\n  getAllVillages(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/villages`, {\n      params\n    });\n  }\n  // Search villages\n  searchVillages(query, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('q', query).set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/villages/search`, {\n      params\n    });\n  }\n  // Get village by UID\n  getVillageByUid(uid) {\n    return this.http.get(`${this.API_URL}/villages/uid/${uid}`);\n  }\n  // Create new village\n  createVillage(village) {\n    return this.http.post(`${this.API_URL}/villages`, village);\n  }\n  // Update village by UID\n  updateVillage(uid, village) {\n    return this.http.put(`${this.API_URL}/villages/uid/${uid}`, village);\n  }\n  // Delete village by UID\n  deleteVillage(uid) {\n    return this.http.delete(`${this.API_URL}/villages/uid/${uid}`);\n  }\n  // Get village statistics\n  getVillageStats() {\n    return this.http.get(`${this.API_URL}/villages/stats`);\n  }\n  // Get villages by ward UID\n  getVillagesByWardUid(wardUid, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/villages/ward/uid/${wardUid}`, {\n      params\n    });\n  }\n  // Get active villages\n  getActiveVillages(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/villages/active`, {\n      params\n    });\n  }\n  // Get villages by status\n  getVillagesByStatus(isActive, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/villages/status/${isActive}`, {\n      params\n    });\n  }\n  // Toggle village status\n  toggleVillageStatus(uid) {\n    return this.http.patch(`${this.API_URL}/villages/uid/${uid}/toggle-status`, {});\n  }\n  static {\n    this.ɵfac = function VillageService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || VillageService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: VillageService,\n      factory: VillageService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","VillageService","constructor","http","API_URL","getAllVillages","page","size","sortBy","sortDir","params","set","toString","get","searchVillages","query","getVillageByUid","uid","createVillage","village","post","updateVillage","put","deleteVillage","delete","getVillageStats","getVillagesByWardUid","wardUid","getActiveVillages","getVillagesByStatus","isActive","toggleVillageStatus","patch","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\core\\services\\village.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Village, CreateVillageRequest, UpdateVillageRequest, VillageStats, VillageSearchParams } from '../models/village.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class VillageService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all villages with pagination\r\n  getAllVillages(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages`, { params });\r\n  }\r\n\r\n  // Search villages\r\n  searchVillages(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/search`, { params });\r\n  }\r\n\r\n  // Get village by UID\r\n  getVillageByUid(uid: string): Observable<ApiResponse<Village>> {\r\n    return this.http.get<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}`);\r\n  }\r\n\r\n  // Create new village\r\n  createVillage(village: CreateVillageRequest): Observable<ApiResponse<Village>> {\r\n    return this.http.post<ApiResponse<Village>>(`${this.API_URL}/villages`, village);\r\n  }\r\n\r\n  // Update village by UID\r\n  updateVillage(uid: string, village: UpdateVillageRequest): Observable<ApiResponse<Village>> {\r\n    return this.http.put<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}`, village);\r\n  }\r\n\r\n  // Delete village by UID\r\n  deleteVillage(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/villages/uid/${uid}`);\r\n  }\r\n\r\n  // Get village statistics\r\n  getVillageStats(): Observable<ApiResponse<VillageStats>> {\r\n    return this.http.get<ApiResponse<VillageStats>>(`${this.API_URL}/villages/stats`);\r\n  }\r\n\r\n  // Get villages by ward UID\r\n  getVillagesByWardUid(wardUid: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/ward/uid/${wardUid}`, { params });\r\n  }\r\n\r\n  // Get active villages\r\n  getActiveVillages(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/active`, { params });\r\n  }\r\n\r\n  // Get villages by status\r\n  getVillagesByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Village>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Village>>(`${this.API_URL}/villages/status/${isActive}`, { params });\r\n  }\r\n\r\n  // Toggle village status\r\n  toggleVillageStatus(uid: string): Observable<ApiResponse<Village>> {\r\n    return this.http.patch<ApiResponse<Village>>(`${this.API_URL}/villages/uid/${uid}/toggle-status`, {});\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}