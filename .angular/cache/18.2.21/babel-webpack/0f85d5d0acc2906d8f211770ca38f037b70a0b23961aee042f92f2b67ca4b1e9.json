{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class WardService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080/api/admin/v1';\n  }\n  // Get all wards with pagination\n  getAllWards(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/wards`, {\n      params\n    });\n  }\n  // Search wards\n  searchWards(query, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('q', query).set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/wards/search`, {\n      params\n    });\n  }\n  // Get ward by UID\n  getWardByUid(uid) {\n    return this.http.get(`${this.API_URL}/wards/uid/${uid}`);\n  }\n  // Create new ward\n  createWard(ward) {\n    return this.http.post(`${this.API_URL}/wards`, ward);\n  }\n  // Update ward by UID\n  updateWard(uid, ward) {\n    return this.http.put(`${this.API_URL}/wards/uid/${uid}`, ward);\n  }\n  // Delete ward by UID\n  deleteWard(uid) {\n    return this.http.delete(`${this.API_URL}/wards/uid/${uid}`);\n  }\n  // Get ward statistics\n  getWardStats() {\n    return this.http.get(`${this.API_URL}/wards/stats`);\n  }\n  // Get wards by district\n  getWardsByDistrict(districtId) {\n    return this.http.get(`${this.API_URL}/wards/district/${districtId}`);\n  }\n  // Get wards by region\n  getWardsByRegion(regionId) {\n    return this.http.get(`${this.API_URL}/wards/region/${regionId}`);\n  }\n  static {\n    this.ɵfac = function WardService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || WardService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: WardService,\n      factory: WardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","WardService","constructor","http","API_URL","getAllWards","page","size","sortBy","sortDir","params","set","toString","get","searchWards","query","getWardByUid","uid","createWard","ward","post","updateWard","put","deleteWard","delete","getWardStats","getWardsByDistrict","districtId","getWardsByRegion","regionId","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\core\\services\\ward.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Ward, CreateWardRequest, UpdateWardRequest, WardStats, WardSearchParams } from '../models/ward.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WardService {\r\n  private readonly API_URL = 'http://localhost:8080/api/admin/v1';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  // Get all wards with pagination\r\n  getAllWards(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards`, { params });\r\n  }\r\n\r\n  // Search wards\r\n  searchWards(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Ward>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Ward>>(`${this.API_URL}/wards/search`, { params });\r\n  }\r\n\r\n  // Get ward by UID\r\n  getWardByUid(uid: string): Observable<ApiResponse<Ward>> {\r\n    return this.http.get<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}`);\r\n  }\r\n\r\n  // Create new ward\r\n  createWard(ward: CreateWardRequest): Observable<ApiResponse<Ward>> {\r\n    return this.http.post<ApiResponse<Ward>>(`${this.API_URL}/wards`, ward);\r\n  }\r\n\r\n  // Update ward by UID\r\n  updateWard(uid: string, ward: UpdateWardRequest): Observable<ApiResponse<Ward>> {\r\n    return this.http.put<ApiResponse<Ward>>(`${this.API_URL}/wards/uid/${uid}`, ward);\r\n  }\r\n\r\n  // Delete ward by UID\r\n  deleteWard(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/wards/uid/${uid}`);\r\n  }\r\n\r\n  // Get ward statistics\r\n  getWardStats(): Observable<ApiResponse<WardStats>> {\r\n    return this.http.get<ApiResponse<WardStats>>(`${this.API_URL}/wards/stats`);\r\n  }\r\n\r\n  // Get wards by district\r\n  getWardsByDistrict(districtId: number): Observable<ApiResponse<Ward[]>> {\r\n    return this.http.get<ApiResponse<Ward[]>>(`${this.API_URL}/wards/district/${districtId}`);\r\n  }\r\n\r\n  // Get wards by region\r\n  getWardsByRegion(regionId: number): Observable<ApiResponse<Ward[]>> {\r\n    return this.http.get<ApiResponse<Ward[]>>(`${this.API_URL}/wards/region/${regionId}`);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}