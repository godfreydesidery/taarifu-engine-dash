{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AreaType, AreaTypeHelper } from '../../../core/models/area.model';\nlet AreaListComponent = class AreaListComponent {\n  constructor(areaService, toastService, authService) {\n    this.areaService = areaService;\n    this.toastService = toastService;\n    this.authService = authService;\n    this.areas = [];\n    this.areaTypes = AreaTypeHelper.getAllTypes();\n    this.isLoading = false;\n    this.currentPage = 0;\n    this.pageSize = 20;\n    this.totalPages = 0;\n    this.totalElements = 0;\n    this.searchTerm = '';\n    this.selectedAreaType = '';\n    this.sortBy = 'code';\n    this.sortDir = 'asc';\n    // Expose helper class to template\n    this.AreaTypeHelper = AreaTypeHelper;\n    this.Math = Math;\n  }\n  ngOnInit() {\n    this.loadAreas();\n  }\n  loadAreas() {\n    this.isLoading = true;\n    let request;\n    if (this.searchTerm.trim()) {\n      if (this.selectedAreaType) {\n        request = this.areaService.searchAreasByType(this.selectedAreaType, this.searchTerm, this.currentPage, this.pageSize, this.sortBy, this.sortDir);\n      } else {\n        request = this.areaService.searchAreas(this.searchTerm, this.currentPage, this.pageSize, this.sortBy, this.sortDir);\n      }\n    } else if (this.selectedAreaType) {\n      request = this.areaService.getAreasByType(this.selectedAreaType, this.currentPage, this.pageSize, this.sortBy, this.sortDir);\n    } else {\n      request = this.areaService.getAllAreas(this.currentPage, this.pageSize, this.sortBy, this.sortDir);\n    }\n    request.subscribe({\n      next: response => {\n        this.isLoading = false;\n        if (response.status) {\n          this.areas = response.data;\n          this.totalPages = response.totalPages;\n          this.totalElements = response.totalElements;\n        } else {\n          this.toastService.error('Error', 'Failed to load areas');\n        }\n      },\n      error: error => {\n        this.isLoading = false;\n        console.error('Error loading areas:', error);\n        this.toastService.error('Error', 'Failed to load areas. Please try again.');\n      }\n    });\n  }\n  onSearch() {\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onClearSearch() {\n    this.searchTerm = '';\n    this.selectedAreaType = '';\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onAreaTypeChange() {\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onSortChange() {\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onSort(field, event) {\n    event.preventDefault();\n    if (this.sortBy === field) {\n      this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';\n    } else {\n      this.sortBy = field;\n      this.sortDir = 'asc';\n    }\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onPageChange(page) {\n    this.currentPage = page;\n    this.loadAreas();\n  }\n  onPageSizeChange() {\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  getPageNumbers() {\n    const pages = [];\n    const start = Math.max(0, this.currentPage - 2);\n    const end = Math.min(this.totalPages - 1, this.currentPage + 2);\n    for (let i = start; i <= end; i++) {\n      pages.push(i);\n    }\n    return pages;\n  }\n  getAreaTypeIcon(areaType) {\n    switch (areaType) {\n      case AreaType.REGION:\n        return 'bi-geo-alt-fill';\n      case AreaType.DISTRICT:\n        return 'bi-building';\n      case AreaType.WARD:\n        return 'bi-house';\n      case AreaType.VILLAGE:\n        return 'bi-house-door';\n      case AreaType.HAMLET:\n        return 'bi-house-door-fill';\n      case AreaType.CONSTITUENCY:\n        return 'bi-flag-fill';\n      default:\n        return 'bi-question-circle';\n    }\n  }\n};\nAreaListComponent = __decorate([Component({\n  selector: 'app-area-list',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterModule],\n  template: `\n    <div class=\"container-fluid\">\n      <!-- Search Card -->\n      <div class=\"card mb-4\">\n        <div class=\"card-body\">\n          <div class=\"row g-3\">\n            <div class=\"col-md-4\">\n              <label for=\"searchTerm\" class=\"form-label\">Search Areas</label>\n              <input \n                type=\"text\" \n                class=\"form-control\" \n                id=\"searchTerm\"\n                [(ngModel)]=\"searchTerm\"\n                placeholder=\"Search by code or area type...\"\n                (keyup.enter)=\"onSearch()\">\n            </div>\n            <div class=\"col-md-3\">\n              <label for=\"areaTypeFilter\" class=\"form-label\">Filter by Type</label>\n              <select \n                class=\"form-select\" \n                id=\"areaTypeFilter\"\n                [(ngModel)]=\"selectedAreaType\"\n                (change)=\"onAreaTypeChange()\">\n                <option value=\"\">All Types</option>\n                <option *ngFor=\"let type of areaTypes\" [value]=\"type\">{{ AreaTypeHelper.getDisplayName(type) }}</option>\n              </select>\n            </div>\n            <div class=\"col-md-3\">\n              <label for=\"sortBy\" class=\"form-label\">Sort By</label>\n              <select \n                class=\"form-select\" \n                id=\"sortBy\"\n                [(ngModel)]=\"sortBy\"\n                (change)=\"onSortChange()\">\n                <option value=\"code\">Code</option>\n                <option value=\"areaType\">Type</option>\n                <option value=\"areaId\">Area ID</option>\n              </select>\n            </div>\n            <div class=\"col-md-2 d-flex align-items-end\">\n              <button \n                type=\"button\" \n                class=\"btn btn-primary me-2\"\n                (click)=\"onSearch()\"\n                [disabled]=\"isLoading\">\n                <i class=\"bi bi-search me-1\"></i>\n                Search\n              </button>\n              <button \n                type=\"button\" \n                class=\"btn btn-outline-secondary\"\n                (click)=\"onClearSearch()\"\n                [disabled]=\"isLoading\">\n                <i class=\"bi bi-x-circle me-1\"></i>\n                Clear\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Areas Table -->\n      <div class=\"card\">\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\n          <h5 class=\"card-title mb-0\">\n            <i class=\"bi bi-geo-alt me-2\"></i>\n            All Areas\n          </h5>\n          <div class=\"d-flex align-items-center gap-2\">\n            <span class=\"text-muted me-2\">Page Size:</span>\n            <select class=\"form-select form-select-sm w-auto\" [(ngModel)]=\"pageSize\" (change)=\"onPageSizeChange()\">\n              <option [value]=\"10\">10</option>\n              <option [value]=\"20\">20</option>\n              <option [value]=\"50\">50</option>\n              <option [value]=\"100\">100</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <div *ngIf=\"isLoading\" class=\"text-center py-4\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n              <span class=\"visually-hidden\">Loading...</span>\n            </div>\n            <p class=\"mt-2\">Loading areas...</p>\n          </div>\n\n          <div *ngIf=\"!isLoading && areas.length === 0\" class=\"text-center py-4\">\n            <i class=\"bi bi-inbox display-1 text-muted\"></i>\n            <h5 class=\"mt-3\">No Areas Found</h5>\n            <p class=\"text-muted\">No areas match your search criteria.</p>\n          </div>\n\n          <div *ngIf=\"!isLoading && areas.length > 0\" class=\"table-responsive\">\n            <table class=\"table table-hover\">\n              <thead class=\"table-light\">\n                <tr>\n                  <th (click)=\"onSort('code', $event)\" class=\"sortable\">\n                    Code\n                    <i class=\"bi\" [class.bi-arrow-up]=\"sortBy === 'code' && sortDir === 'asc'\" [class.bi-arrow-down]=\"sortBy === 'code' && sortDir === 'desc'\"></i>\n                  </th>\n                  <th (click)=\"onSort('areaType', $event)\" class=\"sortable\">\n                    Type\n                    <i class=\"bi\" [class.bi-arrow-up]=\"sortBy === 'areaType' && sortDir === 'asc'\" [class.bi-arrow-down]=\"sortBy === 'areaType' && sortDir === 'desc'\"></i>\n                  </th>\n                  <th>Area ID</th>\n                  <th>UID</th>\n                  <th>Level</th>\n                  <th>Category</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let area of areas\">\n                  <td>\n                    <span class=\"badge bg-primary\">{{ area.code }}</span>\n                  </td>\n                  <td>\n                    <span \n                      class=\"badge\" \n                      [style.background-color]=\"AreaTypeHelper.getColorCode(area.areaType)\"\n                      [style.color]=\"'white'\">\n                      <i class=\"bi\" [ngClass]=\"getAreaTypeIcon(area.areaType)\" style=\"margin-right: 4px;\"></i>\n                      {{ AreaTypeHelper.getDisplayName(area.areaType) }}\n                    </span>\n                  </td>\n                  <td>\n                    <span class=\"badge bg-secondary\">{{ area.areaId }}</span>\n                  </td>\n                  <td>\n                    <code class=\"text-muted\">{{ area.uid }}</code>\n                  </td>\n                  <td>\n                    <span class=\"badge bg-info\">{{ AreaTypeHelper.getLevel(area.areaType) }}</span>\n                  </td>\n                  <td>\n                    <span \n                      class=\"badge\" \n                      [class.bg-success]=\"AreaTypeHelper.isAdministrative(area.areaType)\"\n                      [class.bg-warning]=\"AreaTypeHelper.isPolitical(area.areaType)\">\n                      {{ AreaTypeHelper.isAdministrative(area.areaType) ? 'Administrative' : 'Political' }}\n                    </span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <!-- Pagination -->\n          <div *ngIf=\"!isLoading && totalPages > 1\" class=\"d-flex justify-content-between align-items-center mt-4\">\n            <div class=\"text-muted\">\n              Showing {{ (currentPage * pageSize) + 1 }} to {{ Math.min((currentPage + 1) * pageSize, totalElements) }} of {{ totalElements }} areas\n            </div>\n            <nav>\n              <ul class=\"pagination pagination-sm mb-0\">\n                <li class=\"page-item\" [class.disabled]=\"currentPage === 0\">\n                  <button class=\"page-link\" (click)=\"onPageChange(currentPage - 1)\" [disabled]=\"currentPage === 0\">\n                    <i class=\"bi bi-chevron-left\"></i>\n                  </button>\n                </li>\n                <li \n                  *ngFor=\"let page of getPageNumbers()\" \n                  class=\"page-item\" \n                  [class.active]=\"page === currentPage\">\n                  <button class=\"page-link\" (click)=\"onPageChange(page)\">{{ page + 1 }}</button>\n                </li>\n                <li class=\"page-item\" [class.disabled]=\"currentPage === totalPages - 1\">\n                  <button class=\"page-link\" (click)=\"onPageChange(currentPage + 1)\" [disabled]=\"currentPage === totalPages - 1\">\n                    <i class=\"bi bi-chevron-right\"></i>\n                  </button>\n                </li>\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .sortable {\n      cursor: pointer;\n      user-select: none;\n    }\n    .sortable:hover {\n      background-color: #f8f9fa;\n    }\n    .table th.sortable {\n      position: relative;\n    }\n    .table th.sortable i {\n      position: absolute;\n      right: 8px;\n      top: 50%;\n      transform: translateY(-50%);\n      font-size: 0.8rem;\n    }\n    .badge {\n      font-size: 0.75rem;\n    }\n    code {\n      font-size: 0.8rem;\n    }\n  `]\n})], AreaListComponent);\nexport { AreaListComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}