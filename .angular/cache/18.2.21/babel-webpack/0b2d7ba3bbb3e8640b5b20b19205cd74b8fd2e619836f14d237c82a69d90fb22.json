{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { Validators, ReactiveFormsModule } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../../../core/services/hamlet.service\";\nimport * as i3 from \"../../../core/services/region.service\";\nimport * as i4 from \"../../../core/services/district.service\";\nimport * as i5 from \"../../../core/services/ward.service\";\nimport * as i6 from \"../../../core/services/village.service\";\nimport * as i7 from \"@angular/router\";\nimport * as i8 from \"../../../core/services/toast.service\";\nimport * as i9 from \"@angular/common\";\nfunction HamletFormComponent_div_27_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Hamlet name is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_div_28_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Hamlet name must not exceed 100 characters \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_option_38_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const region_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", region_r1.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(region_r1.name);\n  }\n}\nfunction HamletFormComponent_div_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Region is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_option_50_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const district_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", district_r2.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(district_r2.name);\n  }\n}\nfunction HamletFormComponent_div_51_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" District is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_option_61_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ward_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", ward_r3.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(ward_r3.name);\n  }\n}\nfunction HamletFormComponent_div_62_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Ward is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_option_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 57);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const village_r4 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", village_r4.id);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate(village_r4.name);\n  }\n}\nfunction HamletFormComponent_div_74_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Village is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_div_82_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 56);\n    i0.ɵɵtext(1, \" Headquarters is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction HamletFormComponent_span_127_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"span\", 58);\n  }\n}\nexport let HamletFormComponent = /*#__PURE__*/(() => {\n  class HamletFormComponent {\n    constructor(fb, hamletService, regionService, districtService, wardService, villageService, router, route, toastService) {\n      this.fb = fb;\n      this.hamletService = hamletService;\n      this.regionService = regionService;\n      this.districtService = districtService;\n      this.wardService = wardService;\n      this.villageService = villageService;\n      this.router = router;\n      this.route = route;\n      this.toastService = toastService;\n      this.isEditMode = false;\n      this.hamletId = null;\n      this.isLoading = false;\n      this.regions = [];\n      this.districts = [];\n      this.wards = [];\n      this.villages = [];\n      this.filteredDistricts = [];\n      this.filteredWards = [];\n      this.filteredVillages = [];\n      this.hamletForm = this.fb.group({\n        name: ['', [Validators.required, Validators.maxLength(100)]],\n        regionId: [null, [Validators.required]],\n        districtId: [null, [Validators.required]],\n        wardId: [null, [Validators.required]],\n        villageId: [null, [Validators.required]],\n        headquarters: ['', [Validators.required, Validators.maxLength(100)]],\n        population: [null, [Validators.min(0)]],\n        areaSqKm: [null, [Validators.min(0)]],\n        latitude: [null],\n        longitude: [null],\n        executiveOfficer: ['', [Validators.maxLength(100)]],\n        description: ['', [Validators.maxLength(500)]],\n        isActive: [true]\n      });\n    }\n    ngOnInit() {\n      this.loadRegions();\n      this.loadDistricts();\n      this.loadWards();\n      this.loadVillages();\n      this.route.paramMap.subscribe(params => {\n        this.hamletId = params.get('uid');\n        if (this.hamletId) {\n          this.isEditMode = true;\n          this.loadHamlet(this.hamletId);\n        }\n      });\n    }\n    loadRegions() {\n      this.regionService.getAllRegions(0, 1000).subscribe({\n        next: response => {\n          this.regions = response.data || [];\n        },\n        error: error => {\n          console.error('Error loading regions:', error);\n        }\n      });\n    }\n    loadDistricts() {\n      this.districtService.getAllDistricts(0, 1000).subscribe({\n        next: response => {\n          this.districts = response.data || [];\n          this.filteredDistricts = this.districts;\n        },\n        error: error => {\n          console.error('Error loading districts:', error);\n        }\n      });\n    }\n    loadWards() {\n      this.wardService.getAllWards(0, 1000).subscribe({\n        next: response => {\n          this.wards = response.data || [];\n          this.filteredWards = this.wards;\n        },\n        error: error => {\n          console.error('Error loading wards:', error);\n        }\n      });\n    }\n    loadVillages() {\n      this.villageService.getAllVillages(0, 1000).subscribe({\n        next: response => {\n          this.villages = response.data || [];\n          this.filteredVillages = this.villages;\n        },\n        error: error => {\n          console.error('Error loading villages:', error);\n        }\n      });\n    }\n    loadHamlet(uid) {\n      this.isLoading = true;\n      this.hamletService.getHamletByUid(uid).subscribe({\n        next: response => {\n          this.isLoading = false;\n          if (response.status) {\n            const hamlet = response.data;\n            this.hamletForm.patchValue({\n              name: hamlet.name,\n              regionId: hamlet.regionId,\n              districtId: hamlet.districtId,\n              wardId: hamlet.wardId,\n              villageId: hamlet.villageId,\n              headquarters: hamlet.headquarters,\n              population: hamlet.population,\n              areaSqKm: hamlet.areaSqKm,\n              latitude: hamlet.latitude,\n              longitude: hamlet.longitude,\n              executiveOfficer: hamlet.executiveOfficer,\n              description: hamlet.description,\n              isActive: hamlet.isActive\n            });\n            // Filter cascading dropdowns based on selected values\n            this.onRegionChange();\n            this.onDistrictChange();\n            this.onWardChange();\n          }\n        },\n        error: error => {\n          this.isLoading = false;\n          console.error('Error loading hamlet:', error);\n          this.toastService.error('Error Loading Hamlet', error.error?.message || error.message || 'Unknown error');\n          this.goBack();\n        }\n      });\n    }\n    onRegionChange() {\n      const selectedRegionId = this.hamletForm.get('regionId')?.value;\n      if (selectedRegionId) {\n        const selectedRegion = this.regions.find(r => r.id === Number(selectedRegionId));\n        if (selectedRegion) {\n          this.districtService.getDistrictsByRegionUid(selectedRegion.uid, 0, 1000).subscribe({\n            next: response => {\n              this.filteredDistricts = response.data || [];\n              // Reset district selection if current selection is not in filtered list\n              const currentDistrictId = this.hamletForm.get('districtId')?.value;\n              if (currentDistrictId && !this.filteredDistricts.find(d => d.id === currentDistrictId)) {\n                this.hamletForm.patchValue({\n                  districtId: null\n                });\n                this.onDistrictChange();\n              }\n            },\n            error: error => {\n              console.error('Error loading districts for region:', error);\n              this.filteredDistricts = [];\n            }\n          });\n        }\n      } else {\n        this.filteredDistricts = this.districts;\n        this.hamletForm.patchValue({\n          districtId: null\n        });\n        this.onDistrictChange();\n      }\n    }\n    onDistrictChange() {\n      const selectedDistrictId = this.hamletForm.get('districtId')?.value;\n      if (selectedDistrictId) {\n        const selectedDistrict = this.districts.find(d => d.id === Number(selectedDistrictId));\n        if (selectedDistrict) {\n          this.wardService.getWardsByDistrictUid(selectedDistrict.uid, 0, 1000).subscribe({\n            next: response => {\n              this.filteredWards = response.data || [];\n              // Reset ward selection if current selection is not in filtered list\n              const currentWardId = this.hamletForm.get('wardId')?.value;\n              if (currentWardId && !this.filteredWards.find(w => w.id === currentWardId)) {\n                this.hamletForm.patchValue({\n                  wardId: null\n                });\n                this.onWardChange();\n              }\n            },\n            error: error => {\n              console.error('Error loading wards for district:', error);\n              this.filteredWards = [];\n            }\n          });\n        }\n      } else {\n        this.filteredWards = this.wards;\n        this.hamletForm.patchValue({\n          wardId: null\n        });\n        this.onWardChange();\n      }\n    }\n    onWardChange() {\n      const selectedWardId = this.hamletForm.get('wardId')?.value;\n      if (selectedWardId) {\n        const selectedWard = this.wards.find(w => w.id === Number(selectedWardId));\n        if (selectedWard) {\n          this.villageService.getVillagesByWardUid(selectedWard.uid, 0, 1000).subscribe({\n            next: response => {\n              this.filteredVillages = response.data || [];\n              // Reset village selection if current selection is not in filtered list\n              const currentVillageId = this.hamletForm.get('villageId')?.value;\n              if (currentVillageId && !this.filteredVillages.find(v => v.id === currentVillageId)) {\n                this.hamletForm.patchValue({\n                  villageId: null\n                });\n              }\n            },\n            error: error => {\n              console.error('Error loading villages for ward:', error);\n              this.filteredVillages = [];\n            }\n          });\n        }\n      } else {\n        this.filteredVillages = this.villages;\n        this.hamletForm.patchValue({\n          villageId: null\n        });\n      }\n    }\n    onSubmit() {\n      if (this.hamletForm.valid) {\n        this.isLoading = true;\n        const formData = this.hamletForm.value;\n        if (this.isEditMode && this.hamletId) {\n          const updateRequest = {\n            name: formData.name,\n            villageId: formData.villageId,\n            headquarters: formData.headquarters,\n            population: formData.population,\n            areaSqKm: formData.areaSqKm,\n            latitude: formData.latitude,\n            longitude: formData.longitude,\n            executiveOfficer: formData.executiveOfficer,\n            description: formData.description,\n            isActive: formData.isActive\n          };\n          this.hamletService.updateHamlet(this.hamletId, updateRequest).subscribe({\n            next: response => {\n              this.isLoading = false;\n              if (response.status) {\n                this.toastService.success('Hamlet Updated', 'Hamlet updated successfully!');\n                this.goBack();\n              }\n            },\n            error: error => {\n              this.isLoading = false;\n              console.error('Error updating hamlet:', error);\n              this.toastService.error('Error Updating Hamlet', error.error?.message || error.message || 'Unknown error');\n            }\n          });\n        } else {\n          const createRequest = {\n            name: formData.name,\n            villageId: formData.villageId,\n            headquarters: formData.headquarters,\n            population: formData.population,\n            areaSqKm: formData.areaSqKm,\n            latitude: formData.latitude,\n            longitude: formData.longitude,\n            executiveOfficer: formData.executiveOfficer,\n            description: formData.description,\n            isActive: formData.isActive\n          };\n          this.hamletService.createHamlet(createRequest).subscribe({\n            next: response => {\n              this.isLoading = false;\n              if (response.status) {\n                this.toastService.success('Hamlet Created', 'Hamlet created successfully!');\n                this.goBack();\n              }\n            },\n            error: error => {\n              this.isLoading = false;\n              console.error('Error creating hamlet:', error);\n              this.toastService.error('Error Creating Hamlet', error.error?.message || error.message || 'Unknown error');\n            }\n          });\n        }\n      }\n    }\n    goBack() {\n      this.router.navigate(['/hamlets']);\n    }\n    static {\n      this.ɵfac = function HamletFormComponent_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || HamletFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.HamletService), i0.ɵɵdirectiveInject(i3.RegionService), i0.ɵɵdirectiveInject(i4.DistrictService), i0.ɵɵdirectiveInject(i5.WardService), i0.ɵɵdirectiveInject(i6.VillageService), i0.ɵɵdirectiveInject(i7.Router), i0.ɵɵdirectiveInject(i7.ActivatedRoute), i0.ɵɵdirectiveInject(i8.ToastService));\n      };\n    }\n    static {\n      this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n        type: HamletFormComponent,\n        selectors: [[\"app-hamlet-form\"]],\n        standalone: true,\n        features: [i0.ɵɵStandaloneFeature],\n        decls: 179,\n        vars: 29,\n        consts: [[1, \"container-fluid\"], [1, \"d-flex\", \"justify-content-between\", \"align-items-center\", \"mb-4\"], [1, \"h3\", \"mb-1\"], [1, \"text-muted\"], [\"type\", \"button\", 1, \"btn\", \"btn-outline-secondary\", 3, \"click\"], [1, \"bi\", \"bi-arrow-left\", \"me-1\"], [1, \"row\"], [1, \"col-lg-8\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"mb-0\"], [1, \"bi\", \"bi-house-door-fill\", \"me-2\"], [1, \"card-body\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"col-md-6\"], [1, \"mb-3\"], [\"for\", \"name\", 1, \"form-label\"], [1, \"text-danger\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\", \"placeholder\", \"Enter hamlet name\", 1, \"form-control\"], [\"class\", \"invalid-feedback\", 4, \"ngIf\"], [\"for\", \"regionId\", 1, \"form-label\"], [\"id\", \"regionId\", \"formControlName\", \"regionId\", 1, \"form-select\", 3, \"change\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"districtId\", 1, \"form-label\"], [\"id\", \"districtId\", \"formControlName\", \"districtId\", 1, \"form-select\", 3, \"change\"], [\"for\", \"wardId\", 1, \"form-label\"], [\"id\", \"wardId\", \"formControlName\", \"wardId\", 1, \"form-select\", 3, \"change\"], [\"for\", \"villageId\", 1, \"form-label\"], [\"id\", \"villageId\", \"formControlName\", \"villageId\", 1, \"form-select\"], [\"for\", \"headquarters\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"headquarters\", \"formControlName\", \"headquarters\", \"placeholder\", \"Enter headquarters\", 1, \"form-control\"], [\"for\", \"population\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"population\", \"formControlName\", \"population\", \"min\", \"0\", \"placeholder\", \"Enter population\", 1, \"form-control\"], [\"for\", \"areaSqKm\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"areaSqKm\", \"formControlName\", \"areaSqKm\", \"min\", \"0\", \"step\", \"0.01\", \"placeholder\", \"Enter area in square kilometers\", 1, \"form-control\"], [\"for\", \"latitude\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"latitude\", \"formControlName\", \"latitude\", \"step\", \"0.000001\", \"placeholder\", \"Enter latitude\", 1, \"form-control\"], [\"for\", \"longitude\", 1, \"form-label\"], [\"type\", \"number\", \"id\", \"longitude\", \"formControlName\", \"longitude\", \"step\", \"0.000001\", \"placeholder\", \"Enter longitude\", 1, \"form-control\"], [\"for\", \"executiveOfficer\", 1, \"form-label\"], [\"type\", \"text\", \"id\", \"executiveOfficer\", \"formControlName\", \"executiveOfficer\", \"placeholder\", \"Enter executive officer name\", 1, \"form-control\"], [1, \"form-label\"], [1, \"form-check\", \"form-switch\"], [\"type\", \"checkbox\", \"id\", \"isActive\", \"formControlName\", \"isActive\", 1, \"form-check-input\"], [\"for\", \"isActive\", 1, \"form-check-label\"], [\"for\", \"description\", 1, \"form-label\"], [\"id\", \"description\", \"formControlName\", \"description\", \"rows\", \"3\", \"placeholder\", \"Enter hamlet description\", 1, \"form-control\"], [1, \"d-flex\", \"justify-content-end\", \"gap-2\"], [\"type\", \"button\", 1, \"btn\", \"btn-secondary\", 3, \"click\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"class\", \"spinner-border spinner-border-sm me-2\", \"role\", \"status\", 4, \"ngIf\"], [1, \"col-lg-4\"], [1, \"bi\", \"bi-info-circle\", \"me-2\"], [1, \"list-unstyled\", \"small\", \"text-muted\"], [1, \"mt-3\"], [1, \"invalid-feedback\"], [3, \"value\"], [\"role\", \"status\", 1, \"spinner-border\", \"spinner-border-sm\", \"me-2\"]],\n        template: function HamletFormComponent_Template(rf, ctx) {\n          if (rf & 1) {\n            i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\")(3, \"h1\", 2);\n            i0.ɵɵtext(4);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(5, \"p\", 3);\n            i0.ɵɵtext(6);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(7, \"button\", 4);\n            i0.ɵɵlistener(\"click\", function HamletFormComponent_Template_button_click_7_listener() {\n              return ctx.goBack();\n            });\n            i0.ɵɵelement(8, \"i\", 5);\n            i0.ɵɵtext(9, \" Back \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(10, \"div\", 6)(11, \"div\", 7)(12, \"div\", 8)(13, \"div\", 9)(14, \"h5\", 10);\n            i0.ɵɵelement(15, \"i\", 11);\n            i0.ɵɵtext(16, \" Hamlet Information \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(17, \"div\", 12)(18, \"form\", 13);\n            i0.ɵɵlistener(\"ngSubmit\", function HamletFormComponent_Template_form_ngSubmit_18_listener() {\n              return ctx.onSubmit();\n            });\n            i0.ɵɵelementStart(19, \"div\", 6)(20, \"div\", 14)(21, \"div\", 15)(22, \"label\", 16);\n            i0.ɵɵtext(23, \"Hamlet Name \");\n            i0.ɵɵelementStart(24, \"span\", 17);\n            i0.ɵɵtext(25, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(26, \"input\", 18);\n            i0.ɵɵtemplate(27, HamletFormComponent_div_27_Template, 2, 0, \"div\", 19)(28, HamletFormComponent_div_28_Template, 2, 0, \"div\", 19);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(29, \"div\", 14)(30, \"div\", 15)(31, \"label\", 20);\n            i0.ɵɵtext(32, \"Region \");\n            i0.ɵɵelementStart(33, \"span\", 17);\n            i0.ɵɵtext(34, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(35, \"select\", 21);\n            i0.ɵɵlistener(\"change\", function HamletFormComponent_Template_select_change_35_listener() {\n              return ctx.onRegionChange();\n            });\n            i0.ɵɵelementStart(36, \"option\", 22);\n            i0.ɵɵtext(37, \"Select a region\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(38, HamletFormComponent_option_38_Template, 2, 2, \"option\", 23);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(39, HamletFormComponent_div_39_Template, 2, 0, \"div\", 19);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(40, \"div\", 6)(41, \"div\", 14)(42, \"div\", 15)(43, \"label\", 24);\n            i0.ɵɵtext(44, \"District \");\n            i0.ɵɵelementStart(45, \"span\", 17);\n            i0.ɵɵtext(46, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(47, \"select\", 25);\n            i0.ɵɵlistener(\"change\", function HamletFormComponent_Template_select_change_47_listener() {\n              return ctx.onDistrictChange();\n            });\n            i0.ɵɵelementStart(48, \"option\", 22);\n            i0.ɵɵtext(49, \"Select a district\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(50, HamletFormComponent_option_50_Template, 2, 2, \"option\", 23);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(51, HamletFormComponent_div_51_Template, 2, 0, \"div\", 19);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(52, \"div\", 14)(53, \"div\", 15)(54, \"label\", 26);\n            i0.ɵɵtext(55, \"Ward \");\n            i0.ɵɵelementStart(56, \"span\", 17);\n            i0.ɵɵtext(57, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(58, \"select\", 27);\n            i0.ɵɵlistener(\"change\", function HamletFormComponent_Template_select_change_58_listener() {\n              return ctx.onWardChange();\n            });\n            i0.ɵɵelementStart(59, \"option\", 22);\n            i0.ɵɵtext(60, \"Select a ward\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(61, HamletFormComponent_option_61_Template, 2, 2, \"option\", 23);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(62, HamletFormComponent_div_62_Template, 2, 0, \"div\", 19);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(63, \"div\", 6)(64, \"div\", 14)(65, \"div\", 15)(66, \"label\", 28);\n            i0.ɵɵtext(67, \"Village \");\n            i0.ɵɵelementStart(68, \"span\", 17);\n            i0.ɵɵtext(69, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(70, \"select\", 29)(71, \"option\", 22);\n            i0.ɵɵtext(72, \"Select a village\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(73, HamletFormComponent_option_73_Template, 2, 2, \"option\", 23);\n            i0.ɵɵelementEnd();\n            i0.ɵɵtemplate(74, HamletFormComponent_div_74_Template, 2, 0, \"div\", 19);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(75, \"div\", 14)(76, \"div\", 15)(77, \"label\", 30);\n            i0.ɵɵtext(78, \"Headquarters \");\n            i0.ɵɵelementStart(79, \"span\", 17);\n            i0.ɵɵtext(80, \"*\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelement(81, \"input\", 31);\n            i0.ɵɵtemplate(82, HamletFormComponent_div_82_Template, 2, 0, \"div\", 19);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(83, \"div\", 6)(84, \"div\", 14)(85, \"div\", 15)(86, \"label\", 32);\n            i0.ɵɵtext(87, \"Population\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(88, \"input\", 33);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(89, \"div\", 14)(90, \"div\", 15)(91, \"label\", 34);\n            i0.ɵɵtext(92, \"Area (km\\u00B2)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(93, \"input\", 35);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(94, \"div\", 6)(95, \"div\", 14)(96, \"div\", 15)(97, \"label\", 36);\n            i0.ɵɵtext(98, \"Latitude\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(99, \"input\", 37);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(100, \"div\", 14)(101, \"div\", 15)(102, \"label\", 38);\n            i0.ɵɵtext(103, \"Longitude\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(104, \"input\", 39);\n            i0.ɵɵelementEnd()()();\n            i0.ɵɵelementStart(105, \"div\", 6)(106, \"div\", 14)(107, \"div\", 15)(108, \"label\", 40);\n            i0.ɵɵtext(109, \"Executive Officer\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(110, \"input\", 41);\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(111, \"div\", 14)(112, \"div\", 15)(113, \"label\", 42);\n            i0.ɵɵtext(114, \"Status\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(115, \"div\", 43);\n            i0.ɵɵelement(116, \"input\", 44);\n            i0.ɵɵelementStart(117, \"label\", 45);\n            i0.ɵɵtext(118, \" Active \");\n            i0.ɵɵelementEnd()()()()();\n            i0.ɵɵelementStart(119, \"div\", 15)(120, \"label\", 46);\n            i0.ɵɵtext(121, \"Description\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelement(122, \"textarea\", 47);\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(123, \"div\", 48)(124, \"button\", 49);\n            i0.ɵɵlistener(\"click\", function HamletFormComponent_Template_button_click_124_listener() {\n              return ctx.goBack();\n            });\n            i0.ɵɵtext(125, \" Cancel \");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(126, \"button\", 50);\n            i0.ɵɵtemplate(127, HamletFormComponent_span_127_Template, 1, 0, \"span\", 51);\n            i0.ɵɵtext(128);\n            i0.ɵɵelementEnd()()()()()();\n            i0.ɵɵelementStart(129, \"div\", 52)(130, \"div\", 8)(131, \"div\", 9)(132, \"h6\", 10);\n            i0.ɵɵelement(133, \"i\", 53);\n            i0.ɵɵtext(134, \" Help & Guidelines \");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(135, \"div\", 12)(136, \"h6\");\n            i0.ɵɵtext(137, \"Required Fields\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(138, \"ul\", 54)(139, \"li\");\n            i0.ɵɵtext(140, \"\\u2022 Hamlet Name\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(141, \"li\");\n            i0.ɵɵtext(142, \"\\u2022 Region\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(143, \"li\");\n            i0.ɵɵtext(144, \"\\u2022 District\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(145, \"li\");\n            i0.ɵɵtext(146, \"\\u2022 Ward\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(147, \"li\");\n            i0.ɵɵtext(148, \"\\u2022 Village\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(149, \"li\");\n            i0.ɵɵtext(150, \"\\u2022 Headquarters\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(151, \"h6\", 55);\n            i0.ɵɵtext(152, \"Optional Fields\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(153, \"ul\", 54)(154, \"li\");\n            i0.ɵɵtext(155, \"\\u2022 Population\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(156, \"li\");\n            i0.ɵɵtext(157, \"\\u2022 Area (km\\u00B2)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(158, \"li\");\n            i0.ɵɵtext(159, \"\\u2022 Coordinates (Latitude/Longitude)\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(160, \"li\");\n            i0.ɵɵtext(161, \"\\u2022 Executive Officer\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(162, \"li\");\n            i0.ɵɵtext(163, \"\\u2022 Description\");\n            i0.ɵɵelementEnd()();\n            i0.ɵɵelementStart(164, \"h6\", 55);\n            i0.ɵɵtext(165, \"Tips\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(166, \"ul\", 54)(167, \"li\");\n            i0.ɵɵtext(168, \"\\u2022 Select location hierarchy in order\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(169, \"li\");\n            i0.ɵɵtext(170, \"\\u2022 Use official hamlet names\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(171, \"li\");\n            i0.ɵɵtext(172, \"\\u2022 Headquarters should be the main settlement\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(173, \"li\");\n            i0.ɵɵtext(174, \"\\u2022 Use precise coordinates for mapping\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(175, \"li\");\n            i0.ɵɵtext(176, \"\\u2022 Population should be current estimates\");\n            i0.ɵɵelementEnd();\n            i0.ɵɵelementStart(177, \"li\");\n            i0.ɵɵtext(178, \"\\u2022 Keep descriptions concise and informative\");\n            i0.ɵɵelementEnd()()()()()()();\n          }\n          if (rf & 2) {\n            let tmp_3_0;\n            let tmp_4_0;\n            let tmp_5_0;\n            let tmp_6_0;\n            let tmp_8_0;\n            let tmp_9_0;\n            let tmp_11_0;\n            let tmp_12_0;\n            let tmp_14_0;\n            let tmp_15_0;\n            let tmp_17_0;\n            let tmp_18_0;\n            let tmp_19_0;\n            i0.ɵɵadvance(4);\n            i0.ɵɵtextInterpolate(ctx.isEditMode ? \"Edit Hamlet\" : \"Create Hamlet\");\n            i0.ɵɵadvance(2);\n            i0.ɵɵtextInterpolate(ctx.isEditMode ? \"Update hamlet information\" : \"Add a new hamlet to the system\");\n            i0.ɵɵadvance(12);\n            i0.ɵɵproperty(\"formGroup\", ctx.hamletForm);\n            i0.ɵɵadvance(8);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_3_0 = ctx.hamletForm.get(\"name\")) == null ? null : tmp_3_0.invalid) && ((tmp_3_0 = ctx.hamletForm.get(\"name\")) == null ? null : tmp_3_0.touched));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx.hamletForm.get(\"name\")) == null ? null : tmp_4_0.hasError(\"required\"));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_5_0 = ctx.hamletForm.get(\"name\")) == null ? null : tmp_5_0.hasError(\"maxlength\"));\n            i0.ɵɵadvance(7);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_6_0 = ctx.hamletForm.get(\"regionId\")) == null ? null : tmp_6_0.invalid) && ((tmp_6_0 = ctx.hamletForm.get(\"regionId\")) == null ? null : tmp_6_0.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.regions);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_8_0 = ctx.hamletForm.get(\"regionId\")) == null ? null : tmp_8_0.hasError(\"required\"));\n            i0.ɵɵadvance(8);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_9_0 = ctx.hamletForm.get(\"districtId\")) == null ? null : tmp_9_0.invalid) && ((tmp_9_0 = ctx.hamletForm.get(\"districtId\")) == null ? null : tmp_9_0.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.filteredDistricts);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_11_0 = ctx.hamletForm.get(\"districtId\")) == null ? null : tmp_11_0.hasError(\"required\"));\n            i0.ɵɵadvance(7);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_12_0 = ctx.hamletForm.get(\"wardId\")) == null ? null : tmp_12_0.invalid) && ((tmp_12_0 = ctx.hamletForm.get(\"wardId\")) == null ? null : tmp_12_0.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.filteredWards);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_14_0 = ctx.hamletForm.get(\"wardId\")) == null ? null : tmp_14_0.hasError(\"required\"));\n            i0.ɵɵadvance(8);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_15_0 = ctx.hamletForm.get(\"villageId\")) == null ? null : tmp_15_0.invalid) && ((tmp_15_0 = ctx.hamletForm.get(\"villageId\")) == null ? null : tmp_15_0.touched));\n            i0.ɵɵadvance(3);\n            i0.ɵɵproperty(\"ngForOf\", ctx.filteredVillages);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_17_0 = ctx.hamletForm.get(\"villageId\")) == null ? null : tmp_17_0.hasError(\"required\"));\n            i0.ɵɵadvance(7);\n            i0.ɵɵclassProp(\"is-invalid\", ((tmp_18_0 = ctx.hamletForm.get(\"headquarters\")) == null ? null : tmp_18_0.invalid) && ((tmp_18_0 = ctx.hamletForm.get(\"headquarters\")) == null ? null : tmp_18_0.touched));\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", (tmp_19_0 = ctx.hamletForm.get(\"headquarters\")) == null ? null : tmp_19_0.hasError(\"required\"));\n            i0.ɵɵadvance(44);\n            i0.ɵɵproperty(\"disabled\", ctx.hamletForm.invalid || ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵproperty(\"ngIf\", ctx.isLoading);\n            i0.ɵɵadvance();\n            i0.ɵɵtextInterpolate1(\" \", ctx.isLoading ? \"Saving...\" : ctx.isEditMode ? \"Update Hamlet\" : \"Create Hamlet\", \" \");\n          }\n        },\n        dependencies: [CommonModule, i9.NgForOf, i9.NgIf, ReactiveFormsModule, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.CheckboxControlValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.MinValidator, i1.FormGroupDirective, i1.FormControlName],\n        styles: [\".container-fluid[_ngcontent-%COMP%]{max-width:1200px;margin:0 auto;padding:0 1rem}.card[_ngcontent-%COMP%]{border:none;box-shadow:0 .125rem .25rem #00000013}.card-header[_ngcontent-%COMP%]{background-color:#f8f9fa;border-bottom:1px solid #dee2e6}.form-label[_ngcontent-%COMP%]{font-weight:500;color:#495057}.text-danger[_ngcontent-%COMP%]{color:#dc3545!important}\"]\n      });\n    }\n  }\n  return HamletFormComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}