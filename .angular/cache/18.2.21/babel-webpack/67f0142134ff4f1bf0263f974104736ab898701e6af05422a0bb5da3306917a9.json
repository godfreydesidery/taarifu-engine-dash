{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { RouterModule } from '@angular/router';\nimport { AreaType, AreaTypeHelper } from '../../../core/models/area.model';\nlet AreaListComponent = class AreaListComponent {\n  constructor(areaService, toastService, authService) {\n    this.areaService = areaService;\n    this.toastService = toastService;\n    this.authService = authService;\n    this.areas = [];\n    this.areaTypes = AreaTypeHelper.getAllTypes();\n    this.isLoading = false;\n    this.currentPage = 0;\n    this.pageSize = 20;\n    this.totalPages = 0;\n    this.totalElements = 0;\n    this.searchTerm = '';\n    this.selectedAreaType = '';\n    this.sortBy = 'code';\n    this.sortDir = 'asc';\n    // Expose helper class to template\n    this.AreaTypeHelper = AreaTypeHelper;\n    this.Math = Math;\n  }\n  ngOnInit() {\n    this.loadAreas();\n  }\n  loadAreas() {\n    this.isLoading = true;\n    let request;\n    if (this.searchTerm.trim()) {\n      if (this.selectedAreaType) {\n        request = this.areaService.searchAreasByType(this.selectedAreaType, this.searchTerm, this.currentPage, this.pageSize, this.sortBy, this.sortDir);\n      } else {\n        request = this.areaService.searchAreas(this.searchTerm, this.currentPage, this.pageSize, this.sortBy, this.sortDir);\n      }\n    } else if (this.selectedAreaType) {\n      request = this.areaService.getAreasByType(this.selectedAreaType, this.currentPage, this.pageSize, this.sortBy, this.sortDir);\n    } else {\n      request = this.areaService.getAllAreas(this.currentPage, this.pageSize, this.sortBy, this.sortDir);\n    }\n    request.subscribe({\n      next: response => {\n        this.isLoading = false;\n        if (response.status) {\n          this.areas = response.data;\n          this.totalPages = response.totalPages;\n          this.totalElements = response.totalElements;\n        } else {\n          this.toastService.error('Error', 'Failed to load areas');\n        }\n      },\n      error: error => {\n        this.isLoading = false;\n        console.error('Error loading areas:', error);\n        this.toastService.error('Error', 'Failed to load areas. Please try again.');\n      }\n    });\n  }\n  onSearch() {\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onClearSearch() {\n    this.searchTerm = '';\n    this.selectedAreaType = '';\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onAreaTypeChange() {\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onSortChange() {\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onSort(field, event) {\n    event.preventDefault();\n    if (this.sortBy === field) {\n      this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';\n    } else {\n      this.sortBy = field;\n      this.sortDir = 'asc';\n    }\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  onPageChange(page) {\n    this.currentPage = page;\n    this.loadAreas();\n  }\n  onPageSizeChange() {\n    this.currentPage = 0;\n    this.loadAreas();\n  }\n  getPageNumbers() {\n    const pages = [];\n    const start = Math.max(0, this.currentPage - 2);\n    const end = Math.min(this.totalPages - 1, this.currentPage + 2);\n    for (let i = start; i <= end; i++) {\n      pages.push(i);\n    }\n    return pages;\n  }\n  getAreaTypeIcon(areaType) {\n    switch (areaType) {\n      case AreaType.REGION:\n        return 'bi-geo-alt-fill';\n      case AreaType.DISTRICT:\n        return 'bi-building';\n      case AreaType.WARD:\n        return 'bi-house';\n      case AreaType.VILLAGE:\n        return 'bi-house-door';\n      case AreaType.HAMLET:\n        return 'bi-house-door-fill';\n      case AreaType.CONSTITUENCY:\n        return 'bi-flag-fill';\n      default:\n        return 'bi-question-circle';\n    }\n  }\n};\nAreaListComponent = __decorate([Component({\n  selector: 'app-area-list',\n  standalone: true,\n  imports: [CommonModule, FormsModule, RouterModule],\n  template: `\n    <div class=\"container-fluid\">\n      <!-- Search Card -->\n      <div class=\"card mb-4\">\n        <div class=\"card-body\">\n          <div class=\"row g-3\">\n            <div class=\"col-md-4\">\n              <label for=\"searchTerm\" class=\"form-label\">Search Areas</label>\n              <input \n                type=\"text\" \n                class=\"form-control\" \n                id=\"searchTerm\"\n                [(ngModel)]=\"searchTerm\"\n                placeholder=\"Search by code or area type...\"\n                (keyup.enter)=\"onSearch()\">\n            </div>\n            <div class=\"col-md-3\">\n              <label for=\"areaTypeFilter\" class=\"form-label\">Filter by Type</label>\n              <select \n                class=\"form-select\" \n                id=\"areaTypeFilter\"\n                [(ngModel)]=\"selectedAreaType\"\n                (change)=\"onAreaTypeChange()\">\n                <option value=\"\">All Types</option>\n                <option *ngFor=\"let type of areaTypes\" [value]=\"type\">{{ AreaTypeHelper.getDisplayName(type) }}</option>\n              </select>\n            </div>\n            <div class=\"col-md-3\">\n              <label for=\"sortBy\" class=\"form-label\">Sort By</label>\n              <select \n                class=\"form-select\" \n                id=\"sortBy\"\n                [(ngModel)]=\"sortBy\"\n                (change)=\"onSortChange()\">\n                <option value=\"code\">Code</option>\n                <option value=\"areaType\">Type</option>\n                <option value=\"areaId\">Area ID</option>\n              </select>\n            </div>\n            <div class=\"col-md-2 d-flex align-items-end\">\n              <button \n                type=\"button\" \n                class=\"btn btn-primary me-2\"\n                (click)=\"onSearch()\"\n                [disabled]=\"isLoading\">\n                <i class=\"bi bi-search me-1\"></i>\n                Search\n              </button>\n              <button \n                type=\"button\" \n                class=\"btn btn-outline-secondary\"\n                (click)=\"onClearSearch()\"\n                [disabled]=\"isLoading\">\n                <i class=\"bi bi-x-circle me-1\"></i>\n                Clear\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <!-- Areas Table -->\n      <div class=\"card\">\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\n          <h5 class=\"card-title mb-0\">\n            <i class=\"bi bi-geo-alt me-2\"></i>\n            All Areas\n          </h5>\n          <div class=\"d-flex align-items-center gap-2\">\n            <span class=\"text-muted me-2\">Page Size:</span>\n            <select class=\"form-select form-select-sm w-auto\" [(ngModel)]=\"pageSize\" (change)=\"onPageSizeChange()\">\n              <option [value]=\"10\">10</option>\n              <option [value]=\"20\">20</option>\n              <option [value]=\"50\">50</option>\n              <option [value]=\"100\">100</option>\n            </select>\n          </div>\n        </div>\n        <div class=\"card-body\">\n          <div *ngIf=\"isLoading\" class=\"text-center py-4\">\n            <div class=\"spinner-border text-primary\" role=\"status\">\n              <span class=\"visually-hidden\">Loading...</span>\n            </div>\n            <p class=\"mt-2\">Loading areas...</p>\n          </div>\n\n          <div *ngIf=\"!isLoading && areas.length === 0\" class=\"text-center py-4\">\n            <i class=\"bi bi-inbox display-1 text-muted\"></i>\n            <h5 class=\"mt-3\">No Areas Found</h5>\n            <p class=\"text-muted\">No areas match your search criteria.</p>\n          </div>\n\n          <div *ngIf=\"!isLoading && areas.length > 0\" class=\"table-responsive\">\n            <table class=\"table table-hover\">\n              <thead class=\"table-light\">\n                <tr>\n                  <th (click)=\"onSort('code', $event)\" class=\"sortable\">\n                    Code\n                    <i class=\"bi\" [class.bi-arrow-up]=\"sortBy === 'code' && sortDir === 'asc'\" [class.bi-arrow-down]=\"sortBy === 'code' && sortDir === 'desc'\"></i>\n                  </th>\n                  <th (click)=\"onSort('areaType', $event)\" class=\"sortable\">\n                    Type\n                    <i class=\"bi\" [class.bi-arrow-up]=\"sortBy === 'areaType' && sortDir === 'asc'\" [class.bi-arrow-down]=\"sortBy === 'areaType' && sortDir === 'desc'\"></i>\n                  </th>\n                  <th>Area ID</th>\n                  <th>UID</th>\n                  <th>Level</th>\n                  <th>Category</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr *ngFor=\"let area of areas\">\n                  <td>\n                    <span class=\"badge bg-primary\">{{ area.code }}</span>\n                  </td>\n                  <td>\n                    <span \n                      class=\"badge\" \n                      [style.background-color]=\"AreaTypeHelper.getColorCode(area.areaType)\"\n                      [style.color]=\"'white'\">\n                      <i class=\"bi\" [ngClass]=\"getAreaTypeIcon(area.areaType)\" style=\"margin-right: 4px;\"></i>\n                      {{ AreaTypeHelper.getDisplayName(area.areaType) }}\n                    </span>\n                  </td>\n                  <td>\n                    <span class=\"badge bg-secondary\">{{ area.areaId }}</span>\n                  </td>\n                  <td>\n                    <code class=\"text-muted\">{{ area.uid }}</code>\n                  </td>\n                  <td>\n                    <span class=\"badge bg-info\">{{ AreaTypeHelper.getLevel(area.areaType) }}</span>\n                  </td>\n                  <td>\n                    <span \n                      class=\"badge\" \n                      [class.bg-success]=\"AreaTypeHelper.isAdministrative(area.areaType)\"\n                      [class.bg-warning]=\"AreaTypeHelper.isPolitical(area.areaType)\">\n                      {{ AreaTypeHelper.isAdministrative(area.areaType) ? 'Administrative' : 'Political' }}\n                    </span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n\n          <!-- Pagination -->\n          <div *ngIf=\"!isLoading && totalPages > 1\" class=\"d-flex justify-content-between align-items-center mt-4\">\n            <div class=\"text-muted\">\n              Showing {{ (currentPage * pageSize) + 1 }} to {{ Math.min((currentPage + 1) * pageSize, totalElements) }} of {{ totalElements }} areas\n            </div>\n            <nav>\n              <ul class=\"pagination pagination-sm mb-0\">\n                <li class=\"page-item\" [class.disabled]=\"currentPage === 0\">\n                  <button class=\"page-link\" (click)=\"onPageChange(currentPage - 1)\" [disabled]=\"currentPage === 0\">\n                    <i class=\"bi bi-chevron-left\"></i>\n                  </button>\n                </li>\n                <li \n                  *ngFor=\"let page of getPageNumbers()\" \n                  class=\"page-item\" \n                  [class.active]=\"page === currentPage\">\n                  <button class=\"page-link\" (click)=\"onPageChange(page)\">{{ page + 1 }}</button>\n                </li>\n                <li class=\"page-item\" [class.disabled]=\"currentPage === totalPages - 1\">\n                  <button class=\"page-link\" (click)=\"onPageChange(currentPage + 1)\" [disabled]=\"currentPage === totalPages - 1\">\n                    <i class=\"bi bi-chevron-right\"></i>\n                  </button>\n                </li>\n              </ul>\n            </nav>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .sortable {\n      cursor: pointer;\n      user-select: none;\n    }\n    .sortable:hover {\n      background-color: #f8f9fa;\n    }\n    .table th.sortable {\n      position: relative;\n    }\n    .table th.sortable i {\n      position: absolute;\n      right: 8px;\n      top: 50%;\n      transform: translateY(-50%);\n      font-size: 0.8rem;\n    }\n    .badge {\n      font-size: 0.75rem;\n    }\n    code {\n      font-size: 0.8rem;\n    }\n  `]\n})], AreaListComponent);\nexport { AreaListComponent };","map":{"version":3,"names":["Component","CommonModule","FormsModule","RouterModule","AreaType","AreaTypeHelper","AreaListComponent","constructor","areaService","toastService","authService","areas","areaTypes","getAllTypes","isLoading","currentPage","pageSize","totalPages","totalElements","searchTerm","selectedAreaType","sortBy","sortDir","Math","ngOnInit","loadAreas","request","trim","searchAreasByType","searchAreas","getAreasByType","getAllAreas","subscribe","next","response","status","data","error","console","onSearch","onClearSearch","onAreaTypeChange","onSortChange","onSort","field","event","preventDefault","onPageChange","page","onPageSizeChange","getPageNumbers","pages","start","max","end","min","i","push","getAreaTypeIcon","areaType","REGION","DISTRICT","WARD","VILLAGE","HAMLET","CONSTITUENCY","__decorate","selector","standalone","imports","template","styles"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\features\\areas\\area-list\\area-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { AreaService } from '../../../core/services/area.service';\r\nimport { ToastService } from '../../../shared/services/toast.service';\r\nimport { AuthService } from '../../../core/services/auth.service';\r\nimport { Area, AreaType, AreaTypeHelper } from '../../../core/models/area.model';\r\nimport { PageResponse } from '../../../core/models/auth.model';\r\n\r\n@Component({\r\n  selector: 'app-area-list',\r\n  standalone: true,\r\n  imports: [CommonModule, FormsModule, RouterModule],\r\n  template: `\r\n    <div class=\"container-fluid\">\r\n      <!-- Search Card -->\r\n      <div class=\"card mb-4\">\r\n        <div class=\"card-body\">\r\n          <div class=\"row g-3\">\r\n            <div class=\"col-md-4\">\r\n              <label for=\"searchTerm\" class=\"form-label\">Search Areas</label>\r\n              <input \r\n                type=\"text\" \r\n                class=\"form-control\" \r\n                id=\"searchTerm\"\r\n                [(ngModel)]=\"searchTerm\"\r\n                placeholder=\"Search by code or area type...\"\r\n                (keyup.enter)=\"onSearch()\">\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <label for=\"areaTypeFilter\" class=\"form-label\">Filter by Type</label>\r\n              <select \r\n                class=\"form-select\" \r\n                id=\"areaTypeFilter\"\r\n                [(ngModel)]=\"selectedAreaType\"\r\n                (change)=\"onAreaTypeChange()\">\r\n                <option value=\"\">All Types</option>\r\n                <option *ngFor=\"let type of areaTypes\" [value]=\"type\">{{ AreaTypeHelper.getDisplayName(type) }}</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"col-md-3\">\r\n              <label for=\"sortBy\" class=\"form-label\">Sort By</label>\r\n              <select \r\n                class=\"form-select\" \r\n                id=\"sortBy\"\r\n                [(ngModel)]=\"sortBy\"\r\n                (change)=\"onSortChange()\">\r\n                <option value=\"code\">Code</option>\r\n                <option value=\"areaType\">Type</option>\r\n                <option value=\"areaId\">Area ID</option>\r\n              </select>\r\n            </div>\r\n            <div class=\"col-md-2 d-flex align-items-end\">\r\n              <button \r\n                type=\"button\" \r\n                class=\"btn btn-primary me-2\"\r\n                (click)=\"onSearch()\"\r\n                [disabled]=\"isLoading\">\r\n                <i class=\"bi bi-search me-1\"></i>\r\n                Search\r\n              </button>\r\n              <button \r\n                type=\"button\" \r\n                class=\"btn btn-outline-secondary\"\r\n                (click)=\"onClearSearch()\"\r\n                [disabled]=\"isLoading\">\r\n                <i class=\"bi bi-x-circle me-1\"></i>\r\n                Clear\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <!-- Areas Table -->\r\n      <div class=\"card\">\r\n        <div class=\"card-header d-flex justify-content-between align-items-center\">\r\n          <h5 class=\"card-title mb-0\">\r\n            <i class=\"bi bi-geo-alt me-2\"></i>\r\n            All Areas\r\n          </h5>\r\n          <div class=\"d-flex align-items-center gap-2\">\r\n            <span class=\"text-muted me-2\">Page Size:</span>\r\n            <select class=\"form-select form-select-sm w-auto\" [(ngModel)]=\"pageSize\" (change)=\"onPageSizeChange()\">\r\n              <option [value]=\"10\">10</option>\r\n              <option [value]=\"20\">20</option>\r\n              <option [value]=\"50\">50</option>\r\n              <option [value]=\"100\">100</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n        <div class=\"card-body\">\r\n          <div *ngIf=\"isLoading\" class=\"text-center py-4\">\r\n            <div class=\"spinner-border text-primary\" role=\"status\">\r\n              <span class=\"visually-hidden\">Loading...</span>\r\n            </div>\r\n            <p class=\"mt-2\">Loading areas...</p>\r\n          </div>\r\n\r\n          <div *ngIf=\"!isLoading && areas.length === 0\" class=\"text-center py-4\">\r\n            <i class=\"bi bi-inbox display-1 text-muted\"></i>\r\n            <h5 class=\"mt-3\">No Areas Found</h5>\r\n            <p class=\"text-muted\">No areas match your search criteria.</p>\r\n          </div>\r\n\r\n          <div *ngIf=\"!isLoading && areas.length > 0\" class=\"table-responsive\">\r\n            <table class=\"table table-hover\">\r\n              <thead class=\"table-light\">\r\n                <tr>\r\n                  <th (click)=\"onSort('code', $event)\" class=\"sortable\">\r\n                    Code\r\n                    <i class=\"bi\" [class.bi-arrow-up]=\"sortBy === 'code' && sortDir === 'asc'\" [class.bi-arrow-down]=\"sortBy === 'code' && sortDir === 'desc'\"></i>\r\n                  </th>\r\n                  <th (click)=\"onSort('areaType', $event)\" class=\"sortable\">\r\n                    Type\r\n                    <i class=\"bi\" [class.bi-arrow-up]=\"sortBy === 'areaType' && sortDir === 'asc'\" [class.bi-arrow-down]=\"sortBy === 'areaType' && sortDir === 'desc'\"></i>\r\n                  </th>\r\n                  <th>Area ID</th>\r\n                  <th>UID</th>\r\n                  <th>Level</th>\r\n                  <th>Category</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr *ngFor=\"let area of areas\">\r\n                  <td>\r\n                    <span class=\"badge bg-primary\">{{ area.code }}</span>\r\n                  </td>\r\n                  <td>\r\n                    <span \r\n                      class=\"badge\" \r\n                      [style.background-color]=\"AreaTypeHelper.getColorCode(area.areaType)\"\r\n                      [style.color]=\"'white'\">\r\n                      <i class=\"bi\" [ngClass]=\"getAreaTypeIcon(area.areaType)\" style=\"margin-right: 4px;\"></i>\r\n                      {{ AreaTypeHelper.getDisplayName(area.areaType) }}\r\n                    </span>\r\n                  </td>\r\n                  <td>\r\n                    <span class=\"badge bg-secondary\">{{ area.areaId }}</span>\r\n                  </td>\r\n                  <td>\r\n                    <code class=\"text-muted\">{{ area.uid }}</code>\r\n                  </td>\r\n                  <td>\r\n                    <span class=\"badge bg-info\">{{ AreaTypeHelper.getLevel(area.areaType) }}</span>\r\n                  </td>\r\n                  <td>\r\n                    <span \r\n                      class=\"badge\" \r\n                      [class.bg-success]=\"AreaTypeHelper.isAdministrative(area.areaType)\"\r\n                      [class.bg-warning]=\"AreaTypeHelper.isPolitical(area.areaType)\">\r\n                      {{ AreaTypeHelper.isAdministrative(area.areaType) ? 'Administrative' : 'Political' }}\r\n                    </span>\r\n                  </td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n\r\n          <!-- Pagination -->\r\n          <div *ngIf=\"!isLoading && totalPages > 1\" class=\"d-flex justify-content-between align-items-center mt-4\">\r\n            <div class=\"text-muted\">\r\n              Showing {{ (currentPage * pageSize) + 1 }} to {{ Math.min((currentPage + 1) * pageSize, totalElements) }} of {{ totalElements }} areas\r\n            </div>\r\n            <nav>\r\n              <ul class=\"pagination pagination-sm mb-0\">\r\n                <li class=\"page-item\" [class.disabled]=\"currentPage === 0\">\r\n                  <button class=\"page-link\" (click)=\"onPageChange(currentPage - 1)\" [disabled]=\"currentPage === 0\">\r\n                    <i class=\"bi bi-chevron-left\"></i>\r\n                  </button>\r\n                </li>\r\n                <li \r\n                  *ngFor=\"let page of getPageNumbers()\" \r\n                  class=\"page-item\" \r\n                  [class.active]=\"page === currentPage\">\r\n                  <button class=\"page-link\" (click)=\"onPageChange(page)\">{{ page + 1 }}</button>\r\n                </li>\r\n                <li class=\"page-item\" [class.disabled]=\"currentPage === totalPages - 1\">\r\n                  <button class=\"page-link\" (click)=\"onPageChange(currentPage + 1)\" [disabled]=\"currentPage === totalPages - 1\">\r\n                    <i class=\"bi bi-chevron-right\"></i>\r\n                  </button>\r\n                </li>\r\n              </ul>\r\n            </nav>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styles: [`\r\n    .sortable {\r\n      cursor: pointer;\r\n      user-select: none;\r\n    }\r\n    .sortable:hover {\r\n      background-color: #f8f9fa;\r\n    }\r\n    .table th.sortable {\r\n      position: relative;\r\n    }\r\n    .table th.sortable i {\r\n      position: absolute;\r\n      right: 8px;\r\n      top: 50%;\r\n      transform: translateY(-50%);\r\n      font-size: 0.8rem;\r\n    }\r\n    .badge {\r\n      font-size: 0.75rem;\r\n    }\r\n    code {\r\n      font-size: 0.8rem;\r\n    }\r\n  `]\r\n})\r\nexport class AreaListComponent implements OnInit {\r\n  areas: Area[] = [];\r\n  areaTypes = AreaTypeHelper.getAllTypes();\r\n  isLoading = false;\r\n  currentPage = 0;\r\n  pageSize = 20;\r\n  totalPages = 0;\r\n  totalElements = 0;\r\n  searchTerm = '';\r\n  selectedAreaType: AreaType | '' = '';\r\n  sortBy = 'code';\r\n  sortDir: 'asc' | 'desc' = 'asc';\r\n\r\n  // Expose helper class to template\r\n  AreaTypeHelper = AreaTypeHelper;\r\n  Math = Math;\r\n\r\n  constructor(\r\n    private areaService: AreaService,\r\n    private toastService: ToastService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loadAreas();\r\n  }\r\n\r\n  private loadAreas() {\r\n    this.isLoading = true;\r\n    \r\n    let request: Observable<PageResponse<Area>>;\r\n    \r\n    if (this.searchTerm.trim()) {\r\n      if (this.selectedAreaType) {\r\n        request = this.areaService.searchAreasByType(\r\n          this.selectedAreaType as AreaType,\r\n          this.searchTerm,\r\n          this.currentPage,\r\n          this.pageSize,\r\n          this.sortBy,\r\n          this.sortDir\r\n        );\r\n      } else {\r\n        request = this.areaService.searchAreas(\r\n          this.searchTerm,\r\n          this.currentPage,\r\n          this.pageSize,\r\n          this.sortBy,\r\n          this.sortDir\r\n        );\r\n      }\r\n    } else if (this.selectedAreaType) {\r\n      request = this.areaService.getAreasByType(\r\n        this.selectedAreaType as AreaType,\r\n        this.currentPage,\r\n        this.pageSize,\r\n        this.sortBy,\r\n        this.sortDir\r\n      );\r\n    } else {\r\n      request = this.areaService.getAllAreas(\r\n        this.currentPage,\r\n        this.pageSize,\r\n        this.sortBy,\r\n        this.sortDir\r\n      );\r\n    }\r\n\r\n    request.subscribe({\r\n      next: (response: PageResponse<Area>) => {\r\n        this.isLoading = false;\r\n        if (response.status) {\r\n          this.areas = response.data;\r\n          this.totalPages = response.totalPages;\r\n          this.totalElements = response.totalElements;\r\n        } else {\r\n          this.toastService.error('Error', 'Failed to load areas');\r\n        }\r\n      },\r\n      error: (error: any) => {\r\n        this.isLoading = false;\r\n        console.error('Error loading areas:', error);\r\n        this.toastService.error('Error', 'Failed to load areas. Please try again.');\r\n      }\r\n    });\r\n  }\r\n\r\n  onSearch() {\r\n    this.currentPage = 0;\r\n    this.loadAreas();\r\n  }\r\n\r\n  onClearSearch() {\r\n    this.searchTerm = '';\r\n    this.selectedAreaType = '';\r\n    this.currentPage = 0;\r\n    this.loadAreas();\r\n  }\r\n\r\n  onAreaTypeChange() {\r\n    this.currentPage = 0;\r\n    this.loadAreas();\r\n  }\r\n\r\n  onSortChange() {\r\n    this.currentPage = 0;\r\n    this.loadAreas();\r\n  }\r\n\r\n  onSort(field: string, event: Event) {\r\n    event.preventDefault();\r\n    \r\n    if (this.sortBy === field) {\r\n      this.sortDir = this.sortDir === 'asc' ? 'desc' : 'asc';\r\n    } else {\r\n      this.sortBy = field;\r\n      this.sortDir = 'asc';\r\n    }\r\n    \r\n    this.currentPage = 0;\r\n    this.loadAreas();\r\n  }\r\n\r\n  onPageChange(page: number) {\r\n    this.currentPage = page;\r\n    this.loadAreas();\r\n  }\r\n\r\n  onPageSizeChange() {\r\n    this.currentPage = 0;\r\n    this.loadAreas();\r\n  }\r\n\r\n  getPageNumbers(): number[] {\r\n    const pages: number[] = [];\r\n    const start = Math.max(0, this.currentPage - 2);\r\n    const end = Math.min(this.totalPages - 1, this.currentPage + 2);\r\n    \r\n    for (let i = start; i <= end; i++) {\r\n      pages.push(i);\r\n    }\r\n    \r\n    return pages;\r\n  }\r\n\r\n  getAreaTypeIcon(areaType: AreaType): string {\r\n    switch (areaType) {\r\n      case AreaType.REGION:\r\n        return 'bi-geo-alt-fill';\r\n      case AreaType.DISTRICT:\r\n        return 'bi-building';\r\n      case AreaType.WARD:\r\n        return 'bi-house';\r\n      case AreaType.VILLAGE:\r\n        return 'bi-house-door';\r\n      case AreaType.HAMLET:\r\n        return 'bi-house-door-fill';\r\n      case AreaType.CONSTITUENCY:\r\n        return 'bi-flag-fill';\r\n      default:\r\n        return 'bi-question-circle';\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}