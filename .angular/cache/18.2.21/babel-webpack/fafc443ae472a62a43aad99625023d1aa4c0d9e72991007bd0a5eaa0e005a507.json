{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport let ToastService = /*#__PURE__*/(() => {\n  class ToastService {\n    constructor() {\n      this.toastsSubject = new BehaviorSubject([]);\n      this.toasts$ = this.toastsSubject.asObservable();\n    }\n    showToast(type, title, message, duration = 5000) {\n      const toast = {\n        id: this.generateId(),\n        type,\n        title,\n        message,\n        duration\n      };\n      const currentToasts = this.toastsSubject.value;\n      this.toastsSubject.next([...currentToasts, toast]);\n      // Auto remove toast after duration\n      if (duration > 0) {\n        setTimeout(() => {\n          this.removeToast(toast.id);\n        }, duration);\n      }\n    }\n    success(title, message, duration) {\n      this.showToast('success', title, message, duration);\n    }\n    error(title, message, duration) {\n      this.showToast('error', title, message, duration);\n    }\n    warning(title, message, duration) {\n      this.showToast('warning', title, message, duration);\n    }\n    info(title, message, duration) {\n      this.showToast('info', title, message, duration);\n    }\n    removeToast(id) {\n      const currentToasts = this.toastsSubject.value;\n      this.toastsSubject.next(currentToasts.filter(toast => toast.id !== id));\n    }\n    clearAll() {\n      this.toastsSubject.next([]);\n    }\n    generateId() {\n      return Math.random().toString(36).substr(2, 9);\n    }\n    static {\n      this.ɵfac = function ToastService_Factory(__ngFactoryType__) {\n        return new (__ngFactoryType__ || ToastService)();\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: ToastService,\n        factory: ToastService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return ToastService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}