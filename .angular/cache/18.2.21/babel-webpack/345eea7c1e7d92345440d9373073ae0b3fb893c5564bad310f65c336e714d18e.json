{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class RegionService {\n  constructor(http) {\n    this.http = http;\n    this.API_URL = 'http://localhost:8080/api';\n  }\n  createRegion(request) {\n    return this.http.post(`${this.API_URL}/admin/v1/regions`, request);\n  }\n  updateRegion(uid, request) {\n    return this.http.put(`${this.API_URL}/admin/v1/regions/uid/${uid}`, request);\n  }\n  getRegionByUid(uid) {\n    return this.http.get(`${this.API_URL}/admin/v1/regions/uid/${uid}`);\n  }\n  getRegionByCode(code) {\n    return this.http.get(`${this.API_URL}/admin/v1/regions/code/${code}`);\n  }\n  getAllRegions(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/regions`, {\n      params\n    });\n  }\n  getActiveRegions(page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/regions/active`, {\n      params\n    });\n  }\n  searchRegions(query, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('q', query).set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/regions/search`, {\n      params\n    });\n  }\n  getRegionsByStatus(isActive, page = 0, size = 10, sortBy = 'name', sortDir = 'asc') {\n    const params = new HttpParams().set('page', page.toString()).set('size', size.toString()).set('sortBy', sortBy).set('sortDir', sortDir);\n    return this.http.get(`${this.API_URL}/admin/v1/regions/status/${isActive}`, {\n      params\n    });\n  }\n  toggleRegionStatus(uid) {\n    return this.http.patch(`${this.API_URL}/admin/v1/regions/uid/${uid}/toggle-status`, {});\n  }\n  deleteRegion(uid) {\n    return this.http.delete(`${this.API_URL}/admin/v1/regions/uid/${uid}`);\n  }\n  getRegionStats() {\n    return this.http.get(`${this.API_URL}/admin/v1/regions/stats`);\n  }\n  static {\n    this.ɵfac = function RegionService_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || RegionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RegionService,\n      factory: RegionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpParams","RegionService","constructor","http","API_URL","createRegion","request","post","updateRegion","uid","put","getRegionByUid","get","getRegionByCode","code","getAllRegions","page","size","sortBy","sortDir","params","set","toString","getActiveRegions","searchRegions","query","getRegionsByStatus","isActive","toggleRegionStatus","patch","deleteRegion","delete","getRegionStats","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\My_Works\\Taarifu_Project\\taarifu-engine-dash\\src\\app\\core\\services\\region.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { \r\n  Region, \r\n  CreateRegionRequest, \r\n  UpdateRegionRequest, \r\n  RegionStats \r\n} from '../models/region.model';\r\nimport { ApiResponse, PageResponse } from '../models/auth.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class RegionService {\r\n  private readonly API_URL = 'http://localhost:8080/api';\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  createRegion(request: CreateRegionRequest): Observable<ApiResponse<Region>> {\r\n    return this.http.post<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions`, request);\r\n  }\r\n\r\n  updateRegion(uid: string, request: UpdateRegionRequest): Observable<ApiResponse<Region>> {\r\n    return this.http.put<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`, request);\r\n  }\r\n\r\n  getRegionByUid(uid: string): Observable<ApiResponse<Region>> {\r\n    return this.http.get<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`);\r\n  }\r\n\r\n  getRegionByCode(code: string): Observable<ApiResponse<Region>> {\r\n    return this.http.get<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/code/${code}`);\r\n  }\r\n\r\n  getAllRegions(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions`, { params });\r\n  }\r\n\r\n  getActiveRegions(page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/active`, { params });\r\n  }\r\n\r\n  searchRegions(query: string, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('q', query)\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/search`, { params });\r\n  }\r\n\r\n  getRegionsByStatus(isActive: boolean, page: number = 0, size: number = 10, sortBy: string = 'name', sortDir: string = 'asc'): Observable<PageResponse<Region>> {\r\n    const params = new HttpParams()\r\n      .set('page', page.toString())\r\n      .set('size', size.toString())\r\n      .set('sortBy', sortBy)\r\n      .set('sortDir', sortDir);\r\n    \r\n    return this.http.get<PageResponse<Region>>(`${this.API_URL}/admin/v1/regions/status/${isActive}`, { params });\r\n  }\r\n\r\n  toggleRegionStatus(uid: string): Observable<ApiResponse<Region>> {\r\n    return this.http.patch<ApiResponse<Region>>(`${this.API_URL}/admin/v1/regions/uid/${uid}/toggle-status`, {});\r\n  }\r\n\r\n  deleteRegion(uid: string): Observable<ApiResponse<void>> {\r\n    return this.http.delete<ApiResponse<void>>(`${this.API_URL}/admin/v1/regions/uid/${uid}`);\r\n  }\r\n\r\n  getRegionStats(): Observable<ApiResponse<RegionStats>> {\r\n    return this.http.get<ApiResponse<RegionStats>>(`${this.API_URL}/admin/v1/regions/stats`);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}